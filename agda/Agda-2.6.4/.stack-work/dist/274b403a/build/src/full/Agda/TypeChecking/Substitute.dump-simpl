
==================== Tidy Core ====================

Result size of Tidy Core
  = {terms: 21,409, types: 25,777, coercions: 4,314, joins: 69/227}

-- RHS size: {terms: 3, types: 4, coercions: 2, joins: 0/0}
teleNoAbs = \ @ a_alX6Y v_B1 -> v_B1 `cast` <Co:2>

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rmk0m = "__IMPOSSIBLE__"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_rmk0n = unpackCString# lvl_rmk0m

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "Agda-2.6.4-9WyhschBh6LJGXB1FPjO94"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl2_rmk0o = unpackCString# $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Agda.TypeChecking.Substitute"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl3_rmk0p = unpackCString# $trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4_rmk0q = "src/full\\Agda\\TypeChecking\\Substitute.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl5_rmk0r = unpackCString# lvl4_rmk0q

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6_rmk0s = I# 239#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl7_rmk0t = I# 37#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl8_rmk0u = I# 51#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl9_rmk0v
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl6_rmk0s
      lvl7_rmk0t
      lvl6_rmk0s
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl10_rmk0w = PushCallStack lvl1_rmk0n lvl9_rmk0v EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyDefinition1 = __IMPOSSIBLE__ (lvl10_rmk0w `cast` <Co:4>)

Rec {
-- RHS size: {terms: 18, types: 13, coercions: 0, joins: 0/0}
$wunsafeDrop
  = \ @ a1_smdPh ww_smdPm w_smdPj ->
      case w_smdPj of {
        [] -> [];
        : ipv1_a19Y5 ipv2_a19Y6 ->
          case ww_smdPm of ds3_a19Y8 {
            __DEFAULT -> $wunsafeDrop (-# ds3_a19Y8 1#) ipv2_a19Y6;
            1# -> ipv2_a19Y6
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl11_rmk0x = I# 356#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl12_rmk0y
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl11_rmk0x
      lvl7_rmk0t
      lvl11_rmk0x
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl13_rmk0z = PushCallStack lvl1_rmk0n lvl12_rmk0y EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyDefn1 = __IMPOSSIBLE__ (lvl13_rmk0z `cast` <Co:4>)

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lvl14_rmk0A = Left MaybeProjection

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowTelV1 = I# 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl15_rmk0B = I# 333#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl16_rmk0C = I# 60#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl17_rmk0D = I# 74#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl18_rmk0E
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl15_rmk0B
      lvl16_rmk0C
      lvl15_rmk0B
      lvl17_rmk0D

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl19_rmk0F = PushCallStack lvl1_rmk0n lvl18_rmk0E EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl20_rmk0G = __IMPOSSIBLE__ (lvl19_rmk0F `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl21_rmk0H = I# 323#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl22_rmk0I = I# 46#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl23_rmk0J
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl21_rmk0H
      lvl22_rmk0I
      lvl21_rmk0H
      lvl16_rmk0C

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl24_rmk0K = PushCallStack lvl1_rmk0n lvl23_rmk0J EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
lvl25_rmk0L = __IMPOSSIBLE__ (lvl24_rmk0K `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl26_rmk0M = I# 527#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl27_rmk0N
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl26_rmk0M
      lvl7_rmk0t
      lvl26_rmk0M
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl28_rmk0O = PushCallStack lvl1_rmk0n lvl27_rmk0N EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyFunctionInverse'1
  = __IMPOSSIBLE__ (lvl28_rmk0O `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl29_rmk0P = I# 475#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl30_rmk0Q = I# 39#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl31_rmk0R = I# 53#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl32_rmk0S
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl29_rmk0P
      lvl30_rmk0Q
      lvl29_rmk0P
      lvl31_rmk0R

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl33_rmk0T = PushCallStack lvl1_rmk0n lvl32_rmk0S EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyClause1 = __IMPOSSIBLE__ (lvl33_rmk0T `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl34_rmk0U = I# 371#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl35_rmk0V = I# 35#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl36_rmk0W = I# 49#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl37_rmk0X
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl34_rmk0U
      lvl35_rmk0V
      lvl34_rmk0U
      lvl36_rmk0W

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl38_rmk0Y = PushCallStack lvl1_rmk0n lvl37_rmk0X EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl39_rmk0Z = __IMPOSSIBLE__ (lvl38_rmk0Y `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl40_rmk10 = I# 449#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl41_rmk11 = I# 24#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl42_rmk12 = I# 38#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl43_rmk13
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl40_rmk10
      lvl41_rmk11
      lvl40_rmk10
      lvl42_rmk12

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl44_rmk14 = PushCallStack lvl1_rmk0n lvl43_rmk13 EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
lvl45_rmk15 = __IMPOSSIBLE__ (lvl44_rmk14 `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl46_rmk16 = I# 450#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl47_rmk17
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl46_rmk16
      lvl41_rmk11
      lvl46_rmk16
      lvl42_rmk12

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl48_rmk18 = PushCallStack lvl1_rmk0n lvl47_rmk17 EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
lvl49_rmk19 = __IMPOSSIBLE__ (lvl48_rmk18 `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl50_rmk1a = I# 448#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl51_rmk1b
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl50_rmk1a
      lvl41_rmk11
      lvl50_rmk1a
      lvl42_rmk12

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl52_rmk1c = PushCallStack lvl1_rmk0n lvl51_rmk1b EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
lvl53_rmk1d = __IMPOSSIBLE__ (lvl52_rmk1c `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc_rmk1e = I# 430#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc1_rmk1f = I# 25#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
$dIP_rmk1g
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      loc_rmk1e
      loc1_rmk1f
      loc_rmk1e
      lvl30_rmk0Q

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
$dIP1_rmk1h = PushCallStack lvl1_rmk0n $dIP_rmk1g EmptyCallStack

-- RHS size: {terms: 2, types: 2, coercions: 4, joins: 0/0}
lvl54_rmk1i = __IMPOSSIBLE__ ($dIP1_rmk1h `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl55_rmk1j = I# 427#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl56_rmk1k
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl55_rmk1j
      lvl41_rmk11
      lvl55_rmk1j
      lvl42_rmk12

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl57_rmk1l = PushCallStack lvl1_rmk0n lvl56_rmk1k EmptyCallStack

-- RHS size: {terms: 2, types: 2, coercions: 4, joins: 0/0}
lvl58_rmk1m = __IMPOSSIBLE__ (lvl57_rmk1l `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl59_rmk1n = I# 426#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl60_rmk1o
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl59_rmk1n
      lvl41_rmk11
      lvl59_rmk1n
      lvl42_rmk12

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl61_rmk1p = PushCallStack lvl1_rmk0n lvl60_rmk1o EmptyCallStack

-- RHS size: {terms: 2, types: 2, coercions: 4, joins: 0/0}
lvl62_rmk1q = __IMPOSSIBLE__ (lvl61_rmk1p `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl63_rmk1r = I# 425#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl64_rmk1s
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl63_rmk1r
      lvl41_rmk11
      lvl63_rmk1r
      lvl42_rmk12

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl65_rmk1t = PushCallStack lvl1_rmk0n lvl64_rmk1s EmptyCallStack

-- RHS size: {terms: 2, types: 2, coercions: 4, joins: 0/0}
lvl66_rmk1u = __IMPOSSIBLE__ (lvl65_rmk1t `cast` <Co:4>)

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
lvl67_rmk1v = __IMPOSSIBLE__ ($dIP1_rmk1h `cast` <Co:4>)

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
lvl68_rmk1w = __IMPOSSIBLE__ (lvl57_rmk1l `cast` <Co:4>)

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
lvl69_rmk1x = __IMPOSSIBLE__ (lvl61_rmk1p `cast` <Co:4>)

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
lvl70_rmk1y = __IMPOSSIBLE__ (lvl65_rmk1t `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl71_rmk1z = I# 471#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl72_rmk1A = I# 31#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl73_rmk1B = I# 45#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl74_rmk1C
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl71_rmk1z
      lvl72_rmk1A
      lvl71_rmk1z
      lvl73_rmk1B

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl75_rmk1D = PushCallStack lvl1_rmk0n lvl74_rmk1C EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
lvl76_rmk1E = __IMPOSSIBLE__ (lvl75_rmk1D `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc2_rmk1F = I# 42#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc3_rmk1G = I# 452#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc4_rmk1H = I# 28#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
$dIP2_rmk1I
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      loc3_rmk1G
      loc4_rmk1H
      loc3_rmk1G
      loc2_rmk1F

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
$dIP3_rmk1J = PushCallStack lvl1_rmk0n $dIP2_rmk1I EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
lvl77_rmk1K = __IMPOSSIBLE__ ($dIP3_rmk1J `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl78_rmk1L = I# 494#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl79_rmk1M
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl78_rmk1L
      lvl7_rmk0t
      lvl78_rmk1L
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl80_rmk1N = PushCallStack lvl1_rmk0n lvl79_rmk1M EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyExtLamInfo2 = __IMPOSSIBLE__ (lvl80_rmk1N `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl81_rmk1O = I# 511#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl82_rmk1P
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl81_rmk1O
      lvl7_rmk0t
      lvl81_rmk1O
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl83_rmk1Q = PushCallStack lvl1_rmk0n lvl82_rmk1P EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplySystem1 = __IMPOSSIBLE__ (lvl83_rmk1Q `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl84_rmk1R = I# 500#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl85_rmk1S = I# 30#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl86_rmk1T = I# 44#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl87_rmk1U
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl84_rmk1R
      lvl85_rmk1S
      lvl84_rmk1R
      lvl86_rmk1T

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl88_rmk1V = PushCallStack lvl1_rmk0n lvl87_rmk1U EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
$fApplyExtLamInfo1 = __IMPOSSIBLE__ (lvl88_rmk1V `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl89_rmk1W = I# 256#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl90_rmk1X
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl89_rmk1W
      lvl7_rmk0t
      lvl89_rmk1W
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl91_rmk1Y = PushCallStack lvl1_rmk0n lvl90_rmk1X EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyRewriteRule1 = __IMPOSSIBLE__ (lvl91_rmk1Y `cast` <Co:4>)

-- RHS size: {terms: 6, types: 6, coercions: 0, joins: 0/0}
$fApplyRewriteRule9
  = \ x_X2h0 ->
      PTerm (case x_X2h0 of { Arg ds1_d3o6D ds2_d3o6E -> ds2_d3o6E })

-- RHS size: {terms: 2, types: 5, coercions: 0, joins: 0/0}
lvl92_rmk1Z = Just []

-- RHS size: {terms: 15, types: 8, coercions: 6, joins: 0/0}
mkPi2
  = \ ds1_a9NT ->
      case ds1_a9NT of {
        Nothing -> False `cast` <Co:2>;
        Just x1_a9NW ->
          case x1_a9NW of { I# y_a1WQ ->
          case y_a1WQ of {
            __DEFAULT -> False `cast` <Co:2>;
            0# -> True `cast` <Co:2>
          }
          }
      }

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
mkPi1 = FreeEnv IgnoreNot Unguarded runFreeM2 mkPi2

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
telView'1 = I# -1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl93_rmk20 = I# 606#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl94_rmk21 = I# 78#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl95_rmk22 = I# 92#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl96_rmk23
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl93_rmk20
      lvl94_rmk21
      lvl93_rmk20
      lvl95_rmk22

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl97_rmk24 = PushCallStack lvl1_rmk0n lvl96_rmk23 EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl98_rmk25 = __IMPOSSIBLE__ (lvl97_rmk24 `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl99_rmk26 = I# 1380#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl100_rmk27 = I# 26#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl101_rmk28 = I# 40#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl102_rmk29
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl99_rmk26
      lvl100_rmk27
      lvl99_rmk26
      lvl101_rmk28

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl103_rmk2a = PushCallStack lvl1_rmk0n lvl102_rmk29 EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
compiledClauseBody1 = __IMPOSSIBLE__ (lvl103_rmk2a `cast` <Co:4>)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
projDropParsApply1 = Var 0# []

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl104_rmk2b = I# 1211#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl105_rmk2c = I# 59#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl106_rmk2d = I# 73#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl107_rmk2e
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl104_rmk2b
      lvl105_rmk2c
      lvl104_rmk2b
      lvl106_rmk2d

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl108_rmk2f = PushCallStack lvl1_rmk0n lvl107_rmk2e EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
projDropParsApply2 = __IMPOSSIBLE__ (lvl108_rmk2f `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl109_rmk2g = I# 87#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl110_rmk2h
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl109_rmk2g
      lvl100_rmk27
      lvl109_rmk2g
      lvl101_rmk28

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl111_rmk2i = PushCallStack lvl1_rmk0n lvl110_rmk2h EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl112_rmk2j = __IMPOSSIBLE__ (lvl111_rmk2i `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl113_rmk2k = I# 88#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl114_rmk2l
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl113_rmk2k
      lvl100_rmk27
      lvl113_rmk2k
      lvl101_rmk28

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl115_rmk2m = PushCallStack lvl1_rmk0n lvl114_rmk2l EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl116_rmk2n = __IMPOSSIBLE__ (lvl115_rmk2m `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl117_rmk2o = I# 86#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl118_rmk2p
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl117_rmk2o
      lvl100_rmk27
      lvl117_rmk2o
      lvl101_rmk28

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl119_rmk2q = PushCallStack lvl1_rmk0n lvl118_rmk2p EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl120_rmk2r = __IMPOSSIBLE__ (lvl119_rmk2q `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl121_rmk2s = I# 84#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl122_rmk2t
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl121_rmk2s
      lvl7_rmk0t
      lvl121_rmk2s
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl123_rmk2u = PushCallStack lvl1_rmk0n lvl122_rmk2t EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl124_rmk2v = __IMPOSSIBLE__ (lvl123_rmk2u `cast` <Co:4>)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$bSmallSort1 = -1

-- RHS size: {terms: 12, types: 8, coercions: 0, joins: 0/0}
univSort'10
  = \ ds_d8POO ->
      case ds_d8POO of { Plus n1_a8KUh l_a8KUi ->
      case plusInteger levelSuc1 n1_a8KUh of dt1_X8L3D { __DEFAULT ->
      Plus dt1_X8L3D l_a8KUi
      }
      }

-- RHS size: {terms: 21, types: 16, coercions: 0, joins: 0/0}
ssort
  = \ w_smdPx ->
      El
        (Univ
           USSet
           (case w_smdPx of { Max ww1_s92eA ww2_s92eB ->
            case plusInteger levelSuc1 ww1_s92eA of dt_X8L3Y { __DEFAULT ->
            Max dt_X8L3Y (map univSort'10 ww2_s92eB)
            }
            }))
        (Sort (Univ USSet w_smdPx))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl125_rmk2w = I# 260#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl126_rmk2x
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl125_rmk2w
      lvl7_rmk0t
      lvl125_rmk2w
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl127_rmk2y = PushCallStack lvl1_rmk0n lvl126_rmk2x EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApply[]7 = __IMPOSSIBLE__ (lvl127_rmk2y `cast` <Co:4>)

-- RHS size: {terms: 17, types: 8, coercions: 0, joins: 0/0}
$fApplyDefinition_$capply3
  = \ occ_alXkM args_alXkN ->
      case $wlenAcc args_alXkN 0# of ww2_axAc { __DEFAULT ->
      case <=# ww2_axAc 0# of {
        __DEFAULT -> $wunsafeDrop ww2_axAc occ_alXkM;
        1# -> occ_alXkM
      }
      }

-- RHS size: {terms: 24, types: 19, coercions: 0, joins: 0/0}
$fApply[]2_$capplyE
  = \ t_alXkO es_alXkP ->
      case allApplyElims es_alXkP of {
        Nothing -> case $fApply[]7 of wild2_00 { };
        Just v_aaOy ->
          case $wlenAcc v_aaOy 0# of ww2_axAc { __DEFAULT ->
          case <=# ww2_axAc 0# of {
            __DEFAULT -> $wunsafeDrop ww2_axAc t_alXkO;
            1# -> t_alXkO
          }
          }
      }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$fApply[]2 = C:Apply $fApplyDefinition_$capply3 $fApply[]2_$capplyE

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl128_rmk2z = I# 264#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl129_rmk2A
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl128_rmk2z
      lvl7_rmk0t
      lvl128_rmk2z
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl130_rmk2B = PushCallStack lvl1_rmk0n lvl129_rmk2A EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApply[]6 = __IMPOSSIBLE__ (lvl130_rmk2B `cast` <Co:4>)

-- RHS size: {terms: 17, types: 8, coercions: 0, joins: 0/0}
$fApplyDefinition_$capply4
  = \ pol_alXkI args_alXkJ ->
      case $wlenAcc args_alXkJ 0# of ww2_axAc { __DEFAULT ->
      case <=# ww2_axAc 0# of {
        __DEFAULT -> $wunsafeDrop ww2_axAc pol_alXkI;
        1# -> pol_alXkI
      }
      }

-- RHS size: {terms: 24, types: 19, coercions: 0, joins: 0/0}
$fApply[]1_$capplyE
  = \ t_alXkK es_alXkL ->
      case allApplyElims es_alXkL of {
        Nothing -> case $fApply[]6 of wild2_00 { };
        Just v_aaOy ->
          case $wlenAcc v_aaOy 0# of ww2_axAc { __DEFAULT ->
          case <=# ww2_axAc 0# of {
            __DEFAULT -> $wunsafeDrop ww2_axAc t_alXkK;
            1# -> t_alXkK
          }
          }
      }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$fApply[]1 = C:Apply $fApplyDefinition_$capply4 $fApply[]1_$capplyE

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl131_rmk2C = I# 269#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl132_rmk2D
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl131_rmk2C
      lvl7_rmk0t
      lvl131_rmk2C
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl133_rmk2E = PushCallStack lvl1_rmk0n lvl132_rmk2D EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyNumGeneralizableArgs1
  = __IMPOSSIBLE__ (lvl133_rmk2E `cast` <Co:4>)

-- RHS size: {terms: 16, types: 7, coercions: 0, joins: 0/0}
$fApplyDefinition_$capply2
  = \ ds_dm2CF args_alXkD ->
      case ds_dm2CF of {
        NoGeneralizableArgs -> NoGeneralizableArgs;
        SomeGeneralizableArgs dt_dm2Iv ->
          case $wlenAcc args_alXkD 0# of ww2_axAc { __DEFAULT ->
          SomeGeneralizableArgs (-# dt_dm2Iv ww2_axAc)
          }
      }

-- RHS size: {terms: 23, types: 18, coercions: 0, joins: 0/0}
$fApplyNumGeneralizableArgs_$capplyE
  = \ t_alXkG es_alXkH ->
      case t_alXkG of {
        NoGeneralizableArgs -> NoGeneralizableArgs;
        SomeGeneralizableArgs dt_dm2Iv ->
          case allApplyElims es_alXkH of {
            Nothing -> case $fApplyNumGeneralizableArgs1 of wild3_00 { };
            Just v_aaOy ->
              case $wlenAcc v_aaOy 0# of ww2_axAc { __DEFAULT ->
              SomeGeneralizableArgs (-# dt_dm2Iv ww2_axAc)
              }
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyNumGeneralizableArgs
  = C:Apply
      $fApplyDefinition_$capply2 $fApplyNumGeneralizableArgs_$capplyE

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl134_rmk2F = I# 288#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl135_rmk2G
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl134_rmk2F
      lvl7_rmk0t
      lvl134_rmk2F
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl136_rmk2H = PushCallStack lvl1_rmk0n lvl135_rmk2G EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApply[]4 = __IMPOSSIBLE__ (lvl136_rmk2H `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl137_rmk2I = I# 276#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl138_rmk2J = I# 17#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl139_rmk2K
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl137_rmk2I
      lvl138_rmk2J
      lvl137_rmk2I
      lvl72_rmk1A

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl140_rmk2L = PushCallStack lvl1_rmk0n lvl139_rmk2K EmptyCallStack

-- RHS size: {terms: 3, types: 6, coercions: 4, joins: 0/0}
lvl141_rmk2M
  = \ @ a_alZwL -> __IMPOSSIBLE__ (lvl140_rmk2L `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl142_rmk2N = I# 281#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl143_rmk2O
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl142_rmk2N
      lvl41_rmk11
      lvl142_rmk2N
      lvl42_rmk12

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl144_rmk2P = PushCallStack lvl1_rmk0n lvl143_rmk2O EmptyCallStack

-- RHS size: {terms: 3, types: 6, coercions: 4, joins: 0/0}
lvl145_rmk2Q
  = \ @ a_alZwL -> __IMPOSSIBLE__ (lvl144_rmk2P `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl146_rmk2R = I# 283#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl147_rmk2S
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl146_rmk2R
      lvl41_rmk11
      lvl146_rmk2R
      lvl42_rmk12

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl148_rmk2T = PushCallStack lvl1_rmk0n lvl147_rmk2S EmptyCallStack

-- RHS size: {terms: 3, types: 6, coercions: 4, joins: 0/0}
lvl149_rmk2U
  = \ @ a_alZwL -> __IMPOSSIBLE__ (lvl148_rmk2T `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl150_rmk2V = I# 282#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl151_rmk2W
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl150_rmk2V
      lvl41_rmk11
      lvl150_rmk2V
      lvl42_rmk12

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl152_rmk2X = PushCallStack lvl1_rmk0n lvl151_rmk2W EmptyCallStack

-- RHS size: {terms: 3, types: 6, coercions: 4, joins: 0/0}
lvl153_rmk2Y
  = \ @ a_alZwL -> __IMPOSSIBLE__ (lvl152_rmk2X `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl154_rmk2Z = I# 285#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl155_rmk30
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl154_rmk2Z
      lvl41_rmk11
      lvl154_rmk2Z
      lvl42_rmk12

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl156_rmk31 = PushCallStack lvl1_rmk0n lvl155_rmk30 EmptyCallStack

-- RHS size: {terms: 3, types: 6, coercions: 4, joins: 0/0}
lvl157_rmk32
  = \ @ a_alZwL -> __IMPOSSIBLE__ (lvl156_rmk31 `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl158_rmk33 = I# 284#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl159_rmk34
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl158_rmk33
      lvl41_rmk11
      lvl158_rmk33
      lvl42_rmk12

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl160_rmk35 = PushCallStack lvl1_rmk0n lvl159_rmk34 EmptyCallStack

-- RHS size: {terms: 3, types: 6, coercions: 4, joins: 0/0}
lvl161_rmk36
  = \ @ a_alZwL -> __IMPOSSIBLE__ (lvl160_rmk35 `cast` <Co:4>)

Rec {
-- RHS size: {terms: 37, types: 64, coercions: 0, joins: 0/0}
$wpoly_loop
  = \ @ a_smdQ2 ww_smdQ7 w_smdQ4 ->
      case ww_smdQ7 of wild1_Xhg {
        __DEFAULT ->
          case w_smdQ4 of {
            [] -> lvl141_rmk2M;
            : p_alXky ps_alXkz ->
              case p_alXky of { Arg ds_d3o6D ds1_d3o6E ->
              case ds1_d3o6E of { Named ds2_d3o6x ds3_d3o6y ->
              case ds3_d3o6y of {
                __DEFAULT -> $wpoly_loop (-# wild1_Xhg 1#) ps_alXkz;
                DotP ds4_dm2Cd ds5_dm2Ce -> lvl145_rmk2Q;
                ConP ds4_dm2Ch ds5_dm2Ci ds6_dm2Cj -> lvl149_rmk2U;
                LitP ds4_dm2Cf ds5_dm2Cg -> lvl153_rmk2Y;
                ProjP ds4_dm2Cn ds5_dm2Co -> lvl157_rmk32;
                DefP ds4_dm2Ck ds5_dm2Cl ds6_dm2Cm -> lvl161_rmk36
              }
              }
              }
          };
        0# -> w_smdQ4
      }
end Rec }

-- RHS size: {terms: 9, types: 10, coercions: 0, joins: 0/0}
$fApply[]5
  = \ @ a_smdQ2 w_smdQ3 w1_smdQ4 ->
      case w_smdQ3 of { I# ww1_smdQ7 -> $wpoly_loop ww1_smdQ7 w1_smdQ4 }

-- RHS size: {terms: 11, types: 11, coercions: 0, joins: 0/0}
$fApply[]0_$capply
  = \ @ a_alZwL ps_alXks args_alXkt ->
      case $wlenAcc args_alXkt 0# of ww2_axAc { __DEFAULT ->
      $wpoly_loop ww2_axAc ps_alXks
      }

-- RHS size: {terms: 18, types: 22, coercions: 0, joins: 0/0}
$fApply[]0_$capplyE
  = \ @ a_alZwL t_XlXCE es_XlXCG ->
      case allApplyElims es_XlXCG of {
        Nothing -> case $fApply[]4 of wild2_00 { };
        Just v_aaOy ->
          case $wlenAcc v_aaOy 0# of ww2_axAc { __DEFAULT ->
          $wpoly_loop ww2_axAc t_XlXCE
          }
      }

-- RHS size: {terms: 4, types: 8, coercions: 0, joins: 0/0}
$fApply[]0
  = \ @ a_alZwL -> C:Apply $fApply[]0_$capply $fApply[]0_$capplyE

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl162_rmk37 = I# 295#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl163_rmk38
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl162_rmk37
      lvl7_rmk0t
      lvl162_rmk37
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl164_rmk39 = PushCallStack lvl1_rmk0n lvl163_rmk38 EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyProjection1 = __IMPOSSIBLE__ (lvl164_rmk39 `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl165_rmk3a = I# 299#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl166_rmk3b
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl165_rmk3a
      lvl7_rmk0t
      lvl165_rmk3a
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl167_rmk3c = PushCallStack lvl1_rmk0n lvl166_rmk3b EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyProjLams1 = __IMPOSSIBLE__ (lvl167_rmk3c `cast` <Co:4>)

-- RHS size: {terms: 17, types: 8, coercions: 3, joins: 0/0}
$fApplyProjLams_$capply
  = \ ds_dm2Ap args_alXkk ->
      case $wlenAcc args_alXkk 0# of ww2_axAc { __DEFAULT ->
      case <=# ww2_axAc 0# of {
        __DEFAULT ->
          ($wunsafeDrop ww2_axAc (ds_dm2Ap `cast` <Co:1>)) `cast` <Co:2>;
        1# -> ds_dm2Ap
      }
      }

-- RHS size: {terms: 24, types: 19, coercions: 3, joins: 0/0}
$fApplyProjLams_$capplyE
  = \ t_alXkl es_alXkm ->
      case allApplyElims es_alXkm of {
        Nothing -> case $fApplyProjLams1 of wild2_00 { };
        Just v_aaOy ->
          case $wlenAcc v_aaOy 0# of ww2_axAc { __DEFAULT ->
          case <=# ww2_axAc 0# of {
            __DEFAULT ->
              ($wunsafeDrop ww2_axAc (t_alXkl `cast` <Co:1>)) `cast` <Co:2>;
            1# -> t_alXkl
          }
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyProjLams
  = C:Apply $fApplyProjLams_$capply $fApplyProjLams_$capplyE

-- RHS size: {terms: 24, types: 15, coercions: 0, joins: 0/0}
$fApplyProjection_$capply
  = \ w_smdQp w1_smdQq ->
      case w_smdQp of
      { Projection ww1_smdQt ww2_smdQu ww3_smdQv ww4_smdQw ww5_smdQx ->
      Projection
        ww1_smdQt
        ww2_smdQu
        ww3_smdQv
        (case ww4_smdQw of { I# x_aALc ->
         case $wlenAcc w1_smdQq 0# of ww6_axAc { __DEFAULT ->
         I# (-# x_aALc ww6_axAc)
         }
         })
        ($fApplyProjLams_$capply ww5_smdQx w1_smdQq)
      }

-- RHS size: {terms: 32, types: 24, coercions: 0, joins: 0/1}
$fApplyProjection_$capplyE
  = \ t_alXkp es_alXkq ->
      case t_alXkp of
      { Projection ww1_smdQt ww2_smdQu ww3_smdQv ww4_smdQw ww5_smdQx ->
      let {
        w_smdQq
          = case allApplyElims es_alXkq of {
              Nothing -> $fApplyProjection1;
              Just v_aaOy -> v_aaOy
            } } in
      Projection
        ww1_smdQt
        ww2_smdQu
        ww3_smdQv
        (case ww4_smdQw of { I# x_aALc ->
         case $wlenAcc w_smdQq 0# of ww6_axAc { __DEFAULT ->
         I# (-# x_aALc ww6_axAc)
         }
         })
        ($fApplyProjLams_$capply ww5_smdQx w_smdQq)
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyProjection
  = C:Apply $fApplyProjection_$capply $fApplyProjection_$capplyE

-- RHS size: {terms: 23, types: 52, coercions: 0, joins: 0/1}
$fTeleNoAbs[]_$cteleNoAbs
  = \ tel_alX8Y t_alX8Z ->
      letrec {
        go1_a1Ry
          = \ ds_a1Rz ->
              case ds_a1Rz of {
                [] -> t_alX8Z;
                : y_a1RC ys_a1RD ->
                  case y_a1RC of
                  { Dom ds1_dm0SV ds2_dm0SW ds3_dm0SX ds4_dm0SY ds5_dm0SZ ->
                  case ds5_dm0SZ of { (x_alX91, ds6_dm0T0) ->
                  Lam ds1_dm0SV (NoAbs x_alX91 (go1_a1Ry ys_a1RD))
                  }
                  }
              }; } in
      go1_a1Ry tel_alX8Y

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fTeleNoAbs[] = $fTeleNoAbs[]_$cteleNoAbs `cast` <Co:3>

-- RHS size: {terms: 26, types: 54, coercions: 0, joins: 0/2}
$fTeleNoAbsTele_$cteleNoAbs
  = \ tel_alX8X ->
      let { tel1_alX8Y = telToList tel_alX8X } in
      \ t_alX8Z ->
        letrec {
          go1_a1Ry
            = \ ds_a1Rz ->
                case ds_a1Rz of {
                  [] -> t_alX8Z;
                  : y_a1RC ys_a1RD ->
                    case y_a1RC of
                    { Dom ds1_dm0SV ds2_dm0SW ds3_dm0SX ds4_dm0SY ds5_dm0SZ ->
                    case ds5_dm0SZ of { (x_alX91, ds6_dm0T0) ->
                    Lam ds1_dm0SV (NoAbs x_alX91 (go1_a1Ry ys_a1RD))
                    }
                    }
                }; } in
        go1_a1Ry tel1_alX8Y

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fTeleNoAbsTele = $fTeleNoAbsTele_$cteleNoAbs `cast` <Co:3>

Rec {
-- RHS size: {terms: 18, types: 8, coercions: 0, joins: 0/0}
abstractArgs_go1
  = \ x_a50PP ->
      case ># x_a50PP 122# of {
        __DEFAULT ->
          : (: (C# (chr# x_a50PP)) []) (abstractArgs_go1 (+# x_a50PP 1#));
        1# -> []
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
abstractArgs1 = abstractArgs_go1 97#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl168_rmk3d = "__DUMMY_TYPE__"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl169_rmk3e = unpackCString# lvl168_rmk3d

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl170_rmk3f = I# 781#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl171_rmk3g = I# 56#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl172_rmk3h = I# 70#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl173_rmk3i
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl170_rmk3f
      lvl171_rmk3g
      lvl170_rmk3f
      lvl172_rmk3h

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl174_rmk3j
  = PushCallStack lvl169_rmk3e lvl173_rmk3i EmptyCallStack

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl175_rmk3k
  = PushCallStack __DUMMY_DOM__13 __DUMMY_TYPE__1 lvl174_rmk3j

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
cs_rmk3l = $wpopnCallStack 1## lvl175_rmk3k

-- RHS size: {terms: 12, types: 17, coercions: 0, joins: 0/0}
f_rmk3m
  = case getCallStack cs_rmk3l of {
      [] -> __DUMMY_DOM__3;
      : y_a1RC ys_a1RD ->
        case y_a1RC of { (ww1_s9Uh, ww2_s9Ui) ->
        $wprettyCallSite ww1_s9Uh ww2_s9Ui
        }
    }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
f1_rmk3n = DummyS f_rmk3m

-- RHS size: {terms: 8, types: 7, coercions: 0, joins: 0/0}
f2_rmk3o
  = case $wdummyTermWith __DUMMY_DOM__1 cs_rmk3l of
    { (# ww1_s92OF, ww2_s92OG #) ->
    Dummy ww1_s92OF ww2_s92OG
    }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
f3_rmk3p = El f1_rmk3n f2_rmk3o

Rec {
-- RHS size: {terms: 27, types: 43, coercions: 0, joins: 0/0}
abstractArgs_go
  = \ ds_a1afD _ys_a1afE ->
      case ds_a1afD of {
        [] -> EmptyTel;
        : ipv_a1afH ipv1_a1afI ->
          case _ys_a1afE of {
            [] -> EmptyTel;
            : ipv2_a1afM ipv3_a1afN ->
              case ipv2_a1afM of { Arg a1_a3gXr a2_a3gXs ->
              ExtendTel
                (Dom a1_a3gXr Nothing False Nothing f3_rmk3p)
                (Abs ipv_a1afH (abstractArgs_go ipv1_a1afI ipv3_a1afN))
              }
          }
      }
end Rec }

-- RHS size: {terms: 20, types: 18, coercions: 2, joins: 0/1}
abstractArgs
  = \ @ a_alYbz $dAbstract2_alYbB args_alXnm x_alXnn ->
      ($dAbstract2_alYbB `cast` <Co:2>)
        (case abstractArgs1 of {
           [] -> case cycle1 of wild2_00 { };
           : ipv_am0qH ipv1_am0qI ->
             letrec { xs'_sm4OL = ++_$s++ xs'_sm4OL ipv_am0qH ipv1_am0qI; } in
             abstractArgs_go xs'_sm4OL args_alXnm
         })
        x_alXnn

-- RHS size: {terms: 14, types: 13, coercions: 0, joins: 0/0}
$fApplyCase_$capplyE1
  = \ @ t_alZfe $dApply_alZff x_alXgT es_alXgU ->
      case x_alXgT of {
        Nothing -> Nothing;
        Just a1_anJk -> Just (applyE $dApply_alZff a1_anJk es_alXgU)
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl176_rmk3q = I# 694#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl177_rmk3r = I# 50#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl178_rmk3s = I# 64#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl179_rmk3t
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl176_rmk3q
      lvl177_rmk3r
      lvl176_rmk3q
      lvl178_rmk3s

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl180_rmk3u = PushCallStack lvl1_rmk0n lvl179_rmk3t EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl181_rmk3v = __IMPOSSIBLE__ (lvl180_rmk3u `cast` <Co:4>)

-- RHS size: {terms: 10, types: 25, coercions: 0, joins: 0/0}
lvl182_rmk3w
  = \ x_X24n ->
      case x_X24n of
      { Dom a1_a8M7x a2_a8M7y a3_a8M7z a4_a8M7A a5_a8M7B ->
      Arg
        a1_a8M7x (case a5_a8M7B of { (x1_a19Vf, ds1_a19Vg) -> x1_a19Vf })
      }

-- RHS size: {terms: 13, types: 12, coercions: 2, joins: 0/0}
$fAbstractCase_$cabstract1
  = \ @ t_alZ40 $dAbstract2_alZ41 tel_alXdV x_alXdW ->
      case x_alXdW of {
        Nothing -> Nothing;
        Just a1_anJk ->
          Just (($dAbstract2_alZ41 `cast` <Co:2>) tel_alXdV a1_anJk)
      }

-- RHS size: {terms: 1, types: 0, coercions: 10, joins: 0/0}
$fAbstractMaybe = $fAbstractCase_$cabstract1 `cast` <Co:10>

Rec {
-- RHS size: {terms: 23, types: 29, coercions: 0, joins: 0/0}
$fAbstractClause_$cabstract1
  = \ ds_dm27e tel_alXfS ->
      case ds_dm27e of {
        EmptyTel -> tel_alXfS;
        ExtendTel arg_alXfT xtel_alXfU ->
          ExtendTel
            arg_alXfT
            (case xtel_alXfU of {
               Abs a1_a8M6g a2_a8M6h ->
                 Abs a1_a8M6g ($fAbstractClause_$cabstract1 a2_a8M6h tel_alXfS);
               NoAbs a1_a8M6k a2_a8M6l ->
                 NoAbs a1_a8M6k ($fAbstractClause_$cabstract1 a2_a8M6l tel_alXfS)
             })
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractTele = $fAbstractClause_$cabstract1 `cast` <Co:3>

-- RHS size: {terms: 10, types: 8, coercions: 0, joins: 0/0}
$fAbstractSystem_$cabstract
  = \ tel_alXf9 ds_dm25E ->
      case ds_dm25E of { System tel1_alXfa sys_alXfb ->
      System
        ($fAbstractClause_$cabstract1 tel_alXf9 tel1_alXfa) sys_alXfb
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractSystem = $fAbstractSystem_$cabstract `cast` <Co:3>

-- RHS size: {terms: 15, types: 10, coercions: 0, joins: 0/0}
$fAbstractRewriteRule_$cabstract
  = \ tel_alXfq ds_dm26Y ->
      case ds_dm26Y of
      { RewriteRule q_alXfr gamma_alXfs f4_alXft ps_alXfu rhs_alXfv
                    t_alXfw c_alXfx ->
      RewriteRule
        q_alXfr
        ($fAbstractClause_$cabstract1 tel_alXfq gamma_alXfs)
        f4_alXft
        ps_alXfu
        rhs_alXfv
        t_alXfw
        c_alXfx
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractRewriteRule
  = $fAbstractRewriteRule_$cabstract `cast` <Co:3>

Rec {
-- RHS size: {terms: 26, types: 31, coercions: 0, joins: 0/0}
teleLam
  = \ ds_dm0fP t_alXpQ ->
      case ds_dm0fP of {
        EmptyTel -> t_alXpQ;
        ExtendTel u_alXpR tel_alXpS ->
          Lam
            (case u_alXpR of
             { Dom ds1_d8Q3i ds2_d8Q3j ds3_d8Q3k ds4_d8Q3l ds5_d8Q3m ->
             ds1_d8Q3i
             })
            (case tel_alXpS of {
               Abs a1_a8M6g a2_a8M6h -> Abs a1_a8M6g (teleLam a2_a8M6h t_alXpQ);
               NoAbs a1_a8M6k a2_a8M6l ->
                 NoAbs a1_a8M6k (teleLam a2_a8M6l t_alXpQ)
             })
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractTerm = teleLam `cast` <Co:3>

-- RHS size: {terms: 25, types: 33, coercions: 0, joins: 0/0}
domFromNamedArgName
  = \ w_smdR1 ->
      case w_smdR1 of { Arg ww1_smdR4 ww2_smdR5 ->
      Dom
        ww1_smdR4
        (case ww2_smdR5 of { Named ds_dm0hU x_alXpg ->
         case ds_dm0hU of wild2_X49 {
           Nothing ->
             Just
               (WithOrigin
                  Inserted
                  (Ranged
                     ($fHasRangeAmbiguousQName_$cgetRange2 x_alXpg)
                     (nameToArgName x_alXpg)));
           Just ipv_sm2TQ -> wild2_X49
         }
         })
        False
        Nothing
        ()
      }

-- RHS size: {terms: 24, types: 57, coercions: 1, joins: 0/1}
$fAbstractProjLams1
  = \ tel_alXfc ds_dm25L ->
      letrec {
        go1_a1Ry
          = \ ds1_a1Rz ->
              case ds1_a1Rz of {
                [] -> ds_dm25L `cast` <Co:1>;
                : y_a1RC ys_a1RD ->
                  : (case y_a1RC of
                     { Dom ipv_sm2Tv ipv1_sm2Tw ipv2_sm2Tx ipv3_sm2Ty ipv4_sm2Tz ->
                     Arg
                       ipv_sm2Tv (case ipv4_sm2Tz of { (x_a19Vf, ds2_a19Vg) -> x_a19Vf })
                     })
                    (go1_a1Ry ys_a1RD)
              }; } in
      go1_a1Ry (telToList tel_alXfc)

-- RHS size: {terms: 1, types: 0, coercions: 10, joins: 0/0}
$fAbstractProjLams = $fAbstractProjLams1 `cast` <Co:10>

-- RHS size: {terms: 23, types: 16, coercions: 8, joins: 0/0}
$fAbstractProjection_$cabstract
  = \ w_smdRe w1_smdRf ->
      case w1_smdRf of
      { Projection ww1_smdRi ww2_smdRj ww3_smdRk ww4_smdRl ww5_smdRm ->
      Projection
        ww1_smdRi
        ww2_smdRj
        ww3_smdRk
        (case $w$csize w_smdRe of ww6_s92fc { __DEFAULT ->
         case ww4_smdRl of { I# y_a1WZ -> I# (+# ww6_s92fc y_a1WZ) }
         })
        (($fAbstractProjLams1 w_smdRe ww5_smdRm) `cast` <Co:8>)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractProjection
  = $fAbstractProjection_$cabstract `cast` <Co:3>

-- RHS size: {terms: 21, types: 35, coercions: 0, joins: 0/0}
$fFunctorTelV_$c<$
  = \ @ a_alYB1 @ b_alYB2 z_alXKh ds_dm0Sx ->
      case ds_dm0Sx of { TelV a1_alXKi a2_alXKj ->
      TelV
        ($fFunctorTele_$cfmap
           (\ ds1_d8QeQ ->
              case ds1_d8QeQ of
              { Dom a4_a8M7H a5_a8M7I a3_a8M7J a6_a8M7K a7_a8M7L ->
              Dom a4_a8M7H a5_a8M7I a3_a8M7J a6_a8M7K z_alXKh
              })
           a1_alXKi)
        z_alXKh
      }

-- RHS size: {terms: 14, types: 24, coercions: 0, joins: 0/0}
$fFunctorTelV_$cfmap
  = \ @ a_alYAL @ b_alYAM f4_alXKe ds_dm0Sw ->
      case ds_dm0Sw of { TelV a1_alXKf a2_alXKg ->
      TelV
        ($fFunctorTele_$cfmap ($fFunctorDom'_$cfmap f4_alXKe) a1_alXKf)
        (f4_alXKe a2_alXKg)
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fFunctorTelV = C:Functor $fFunctorTelV_$cfmap $fFunctorTelV_$c<$

-- RHS size: {terms: 10, types: 19, coercions: 0, joins: 0/0}
telVars1
  = \ ds_d3oqv ->
      case ds_d3oqv of { Arg a1_a3gXn a2_a3gXo ->
      Arg
        a1_a3gXn
        (case a2_a3gXo of { Named ds1_d3o6x ds2_d3o6y -> ds2_d3o6y })
      }

-- RHS size: {terms: 28, types: 23, coercions: 0, joins: 0/0}
$fApplyDisplayTerm1
  = \ ds_d8Auq ->
      case ds_d8Auq of {
        Apply a1_a8AgM ->
          Apply
            (case a1_a8AgM of { Arg a2_a3gXn a3_a3gXo ->
             Arg a2_a3gXn (DTerm' a3_a3gXo [])
             });
        Proj a1_a8AgO a2_a8AgP -> Proj a1_a8AgO a2_a8AgP;
        IApply a1_a8AgT a2_a8AgU a3_a8AgV ->
          IApply
            (DTerm' a1_a8AgT []) (DTerm' a2_a8AgU []) (DTerm' a3_a8AgV [])
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl183_rmk3x = I# 539#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl184_rmk3y
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl183_rmk3x
      lvl100_rmk27
      lvl183_rmk3x
      lvl101_rmk28

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl185_rmk3z = PushCallStack lvl1_rmk0n lvl184_rmk3y EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyDisplayTerm3 = __IMPOSSIBLE__ (lvl185_rmk3z `cast` <Co:4>)

-- RHS size: {terms: 9, types: 8, coercions: 0, joins: 0/0}
$fApplyDisplayTerm2
  = \ ds_d3oqv ->
      case ds_d3oqv of { Arg a1_a3gXn a2_a3gXo ->
      Arg a1_a3gXn (DTerm' a2_a3gXo [])
      }

-- RHS size: {terms: 47, types: 49, coercions: 0, joins: 0/0}
$fApplyDisplayTerm_$capplyE
  = \ ds_dm2ae es_alXho ->
      case ds_dm2ae of {
        DWithApp v_alXhA ws_alXhB es'_alXhC ->
          DWithApp v_alXhA ws_alXhB (++ es'_alXhC es_alXho);
        DCon c_alXhs ci_alXht vs_alXhu ->
          DCon
            c_alXhs
            ci_alXht
            (++
               vs_alXhu
               (case allApplyElims es_alXho of {
                  Nothing -> case $fApplyDisplayTerm3 of wild3_00 { };
                  Just v_aaOy -> map $fApplyDisplayTerm2 v_aaOy
                }));
        DDef c_alXhx es'_alXhy ->
          DDef c_alXhx (++ es'_alXhy (map $fApplyDisplayTerm1 es_alXho));
        DDot' v_alXhp es'_alXhq -> DDot' v_alXhp (++ es'_alXhq es_alXho);
        DTerm' v_alXhm es'_alXhn -> DTerm' v_alXhm (++ es'_alXhn es_alXho)
      }

-- RHS size: {terms: 10, types: 9, coercions: 0, joins: 0/0}
$fApplyDisplayTerm4
  = \ x_X23l ->
      Apply
        (case x_X23l of { Arg a1_a3gXn a2_a3gXo ->
         Arg a1_a3gXn (DTerm' a2_a3gXo [])
         })

-- RHS size: {terms: 46, types: 53, coercions: 0, joins: 0/0}
$fApplyDisplayTerm_$capply
  = \ ds_dm29N args_alXh7 ->
      case ds_dm29N of {
        DWithApp v_alXhi ws_alXhj es_alXhk ->
          DWithApp v_alXhi ws_alXhj (++ es_alXhk (map Apply args_alXh7));
        DCon c_alXhb ci_alXhc vs_alXhd ->
          DCon
            c_alXhb
            ci_alXhc
            (++ vs_alXhd (map $fApplyDisplayTerm2 args_alXh7));
        DDef c_alXhf es_alXhg ->
          DDef c_alXhf (++ es_alXhg (map $fApplyDisplayTerm4 args_alXh7));
        DDot' v_alXh8 es_alXh9 ->
          DDot' v_alXh8 (++ es_alXh9 (map Apply args_alXh7));
        DTerm' v_alXh5 es_alXh6 ->
          DTerm' v_alXh5 (++ es_alXh6 (map Apply args_alXh7))
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyDisplayTerm
  = C:Apply $fApplyDisplayTerm_$capply $fApplyDisplayTerm_$capplyE

Rec {
-- RHS size: {terms: 72, types: 78, coercions: 0, joins: 0/2}
namedTelVars
  = \ m_alXni ds_dm0qM ->
      case ds_dm0qM of {
        EmptyTel -> [];
        ExtendTel dom_alXnk tel_alXnl ->
          case dom_alXnk of
          { Dom ipv_sm2RH ipv1_sm2RI ipv2_sm2RJ ipv3_sm2RK ipv4_sm2RL ->
          : (Arg
               ipv_sm2RH
               (let {
                  w1_s92mX
                    = case tel_alXnl of {
                        Abs ds1_d8Q2O ds2_d8Q2P -> ds1_d8Q2O;
                        NoAbs ds1_d8Q2Q ds2_d8Q2R -> ds1_d8Q2Q
                      } } in
                Named
                  (case eqString w1_s92mX $fUnderscoreDoc_$cunderscore1 of {
                     False -> Just (WithOrigin Inserted (Ranged NoRange w1_s92mX));
                     True -> Nothing
                   })
                  (let {
                     w_s92mW = case m_alXni of { I# x_aALc -> I# (-# x_aALc 1#) } } in
                   $fFunctorPattern'_$cfmap
                     (\ x_a8KTG -> $WDBPatVar x_a8KTG w_s92mW)
                     (VarP defaultPatternInfo w1_s92mX))))
            (case tel_alXnl of {
               Abs ds1_d8Q2T ds2_d8Q2U ->
                 namedTelVars
                   (case m_alXni of { I# x_aALc -> I# (-# x_aALc 1#) }) ds2_d8Q2U;
               NoAbs ds1_d8Q2V ds2_d8Q2W ->
                 namedTelVars
                   (case m_alXni of { I# x_aALc -> I# (-# x_aALc 1#) }) ds2_d8Q2W
             })
          }
      }
end Rec }

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
telVars
  = \ m_alXnh eta1_B1 -> map telVars1 (namedTelVars m_alXnh eta1_B1)

-- RHS size: {terms: 35, types: 33, coercions: 0, joins: 0/0}
$fAbstractClause_$cabstract
  = \ tel_alXeo ds_dm1RE ->
      case ds_dm1RE of
      { Clause rl_alXep rf_alXeq tel'_alXer ps_alXes b_alXet t_alXeu
               catchall_alXev exact_alXew recursive_alXex unreachable_alXey
               ell_alXez wm_alXeA ->
      Clause
        rl_alXep
        rf_alXeq
        ($fAbstractClause_$cabstract1 tel_alXeo tel'_alXer)
        (++
           (namedTelVars
              (case $w$csize tel_alXeo of ww_s92fc { __DEFAULT ->
               case $w$csize tel'_alXer of ww1_X93dF { __DEFAULT ->
               I# (+# ww_s92fc ww1_X93dF)
               }
               })
              tel_alXeo)
           ps_alXes)
        b_alXet
        t_alXeu
        catchall_alXev
        exact_alXew
        recursive_alXex
        unreachable_alXey
        ell_alXez
        wm_alXeA
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractClause = $fAbstractClause_$cabstract `cast` <Co:3>

-- RHS size: {terms: 36, types: 55, coercions: 0, joins: 0/2}
$fAbstractFunctionInverse'_$cabstract
  = \ tel_alXdZ ds_dm1QT ->
      case ds_dm1QT of {
        NotInjective -> NotInjective;
        Inverse inv_alXe1 ->
          Inverse
            (let { lvl328_sm5au = $fAbstractClause_$cabstract tel_alXdZ } in
             letrec {
               go15_a15wV
                 = \ ds1_a15wW ->
                     case ds1_a15wW of {
                       Bin dt_a15wY kx_a15wZ x_a15x0 l_a15x1 r_a15x2 ->
                         case go15_a15wV l_a15x1 of dt1_a15x4 { __DEFAULT ->
                         case go15_a15wV r_a15x2 of dt2_a15x5 { __DEFAULT ->
                         Bin
                           dt_a15wY kx_a15wZ (map lvl328_sm5au x_a15x0) dt1_a15x4 dt2_a15x5
                         }
                         };
                       Tip -> Tip
                     }; } in
             go15_a15wV inv_alXe1)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractFunctionInverse'
  = $fAbstractFunctionInverse'_$cabstract `cast` <Co:3>

-- RHS size: {terms: 6, types: 5, coercions: 0, joins: 0/0}
$dAbstract_rmk3A
  = \ tel_XlXum eta1_B1 ->
      map ($fAbstractClause_$cabstract tel_XlXum) eta1_B1

-- RHS size: {terms: 11, types: 8, coercions: 0, joins: 0/0}
$dAbstract1_rmk3B
  = \ tel_alXdV x_alXdW ->
      case x_alXdW of {
        Nothing -> Nothing;
        Just a1_anJk ->
          Just ($fAbstractClause_$cabstract tel_alXdV a1_anJk)
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl186_rmk3C = I# 363#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl187_rmk3D
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl186_rmk3C
      lvl7_rmk0t
      lvl186_rmk3C
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl188_rmk3E = PushCallStack lvl1_rmk0n lvl187_rmk3D EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyPrimFun1 = __IMPOSSIBLE__ (lvl188_rmk3E `cast` <Co:4>)

-- RHS size: {terms: 26, types: 25, coercions: 0, joins: 0/1}
$fApplyPrimFun_$capply
  = \ w_smdRT w1_smdRU ->
      case w_smdRT of
      { PrimFun ww1_smdRX ww2_smdRY ww3_smdRZ ww4_smdS0 ->
      let {
        n_sm4QX
          = case $wlenAcc w1_smdRU 0# of ww5_axAc { __DEFAULT ->
            I# ww5_axAc
            } } in
      PrimFun
        ww1_smdRX
        ($fNumInt_$c- ww2_smdRY n_sm4QX)
        (drop n_sm4QX ww3_smdRZ)
        (\ vs_alXjK -> ww4_smdS0 (++ w1_smdRU vs_alXjK))
      }

-- RHS size: {terms: 44, types: 51, coercions: 0, joins: 0/3}
$fApplyPrimFun_$capplyE
  = \ t_alXjL es_alXjM ->
      case t_alXjL of
      { PrimFun ww1_smdRX ww2_smdRY ww3_smdRZ ww4_smdS0 ->
      let {
        w_smdRU
          = case allApplyElims es_alXjM of {
              Nothing -> $fApplyPrimFun1;
              Just v_aaOy -> v_aaOy
            } } in
      let {
        n_sm4QX
          = case $wlenAcc w_smdRU 0# of ww5_axAc { __DEFAULT ->
            I# ww5_axAc
            } } in
      PrimFun
        ww1_smdRX
        ($fNumInt_$c- ww2_smdRY n_sm4QX)
        (drop n_sm4QX ww3_smdRZ)
        (\ vs_alXjK ->
           ww4_smdS0
             (letrec {
                go1_a1Ry
                  = \ ds_a1Rz ->
                      case ds_a1Rz of {
                        [] -> vs_alXjK;
                        : y_a1RC ys_a1RD -> : y_a1RC (go1_a1Ry ys_a1RD)
                      }; } in
              go1_a1Ry w_smdRU))
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyPrimFun
  = C:Apply $fApplyPrimFun_$capply $fApplyPrimFun_$capplyE

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl189_rmk3F = I# 589#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl190_rmk3G
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl189_rmk3F
      lvl7_rmk0t
      lvl189_rmk3F
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl191_rmk3H = PushCallStack lvl1_rmk0n lvl190_rmk3G EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyPermutation1 = __IMPOSSIBLE__ (lvl191_rmk3H `cast` <Co:4>)

-- RHS size: {terms: 46, types: 27, coercions: 0, joins: 0/1}
$w$capply2
  = \ ww_smdSi ww1_smdSj w_smdSf ->
      let {
        m_sm4R1
          = case $wlenAcc w_smdSf 0# of ww2_axAc { __DEFAULT ->
            I# ww2_axAc
            } } in
      (# $fNumInt_$c- ww_smdSi m_sm4R1,
         case m_sm4R1 of { I# x_a1SZ ->
         case <=# x_a1SZ 0# of {
           __DEFAULT ->
             map
               (\ y_a1O8 ->
                  case y_a1O8 of { I# x1_aALc -> I# (-# x1_aALc x_a1SZ) })
               ($wunsafeDrop x_a1SZ ww1_smdSj);
           1# ->
             map
               (\ y_a1O8 ->
                  case y_a1O8 of { I# x1_aALc -> I# (-# x1_aALc x_a1SZ) })
               ww1_smdSj
         }
         } #)

-- RHS size: {terms: 14, types: 15, coercions: 0, joins: 0/0}
$fApplyPermutation_$capply
  = \ w_smdSe w1_smdSf ->
      case w_smdSe of { Perm ww1_smdSi ww2_smdSj ->
      case $w$capply2 ww1_smdSi ww2_smdSj w1_smdSf of
      { (# ww4_smenE, ww5_smenF #) ->
      Perm ww4_smenE ww5_smenF
      }
      }

-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
$fApplyPermutation_$capplyE
  = \ t_alXg6 es_alXg7 ->
      case t_alXg6 of { Perm ww1_smdSi ww2_smdSj ->
      case $w$capply2
             ww1_smdSi
             ww2_smdSj
             (case allApplyElims es_alXg7 of {
                Nothing -> $fApplyPermutation1;
                Just v_aaOy -> v_aaOy
              })
      of
      { (# ww4_smenE, ww5_smenF #) ->
      Perm ww4_smenE ww5_smenF
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyPermutation
  = C:Apply $fApplyPermutation_$capply $fApplyPermutation_$capplyE

-- RHS size: {terms: 57, types: 31, coercions: 0, joins: 0/4}
$w$cabstract1
  = \ w_smdSq ww_smdSu ww1_smdSv ->
      let {
        m_sm4R3
          = case $w$csize w_smdSq of ww2_s92fc { __DEFAULT ->
            I# ww2_s92fc
            } } in
      (# $fNumInt_$c+ ww_smdSu m_sm4R3,
         case m_sm4R3 of { I# x_aALc ->
         let { y_a1Vk = -# x_aALc 1# } in
         let {
           n_a1Vi
             = map
                 (\ ds_dm27F ->
                    case ds_dm27F of { I# x1_a1WW -> I# (+# x1_a1WW x_aALc) })
                 ww1_smdSv } in
         case ># 0# y_a1Vk of {
           __DEFAULT ->
             letrec {
               go_a1Vm
                 = \ x1_a1Vn ->
                     : (I# x1_a1Vn)
                       (case ==# x1_a1Vn y_a1Vk of {
                          __DEFAULT -> go_a1Vm (+# x1_a1Vn 1#);
                          1# -> n_a1Vi
                        }); } in
             go_a1Vm 0#;
           1# -> n_a1Vi
         }
         } #)

-- RHS size: {terms: 14, types: 15, coercions: 0, joins: 0/0}
$fAbstractPermutation_$cabstract
  = \ w_smdSq w1_smdSr ->
      case w1_smdSr of { Perm ww1_smdSu ww2_smdSv ->
      case $w$cabstract1 w_smdSq ww1_smdSu ww2_smdSv of
      { (# ww4_smenH, ww5_smenI #) ->
      Perm ww4_smenH ww5_smenI
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractPermutation
  = $fAbstractPermutation_$cabstract `cast` <Co:3>

-- RHS size: {terms: 15, types: 8, coercions: 0, joins: 0/0}
$fAbstractDefinition_$cabstract2
  = \ tel_alXfh ds_dm26l ->
      case ds_dm26l of {
        NoGeneralizableArgs -> NoGeneralizableArgs;
        SomeGeneralizableArgs dt_dm2Ip ->
          case $w$csize tel_alXfh of ww_s92fc { __DEFAULT ->
          SomeGeneralizableArgs (+# ww_s92fc dt_dm2Ip)
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractNumGeneralizableArgs
  = $fAbstractDefinition_$cabstract2 `cast` <Co:3>

-- RHS size: {terms: 51, types: 51, coercions: 0, joins: 0/3}
$w$cabstract2
  = \ w_smdSH ww_smdSL ww1_smdSM ww2_smdSN ww3_smdSO ->
      let {
        n_sm4R5
          = case $w$csize w_smdSH of ww4_s92fc { __DEFAULT ->
            I# ww4_s92fc
            } } in
      (# ww_smdSL, $fNumInt_$c+ ww1_smdSM n_sm4R5,
         case n_sm4R5 of { I# y_a3Zv ->
         case <# 0# y_a3Zv of {
           __DEFAULT -> ww2_smdSN;
           1# ->
             let { lvl328_smhwB = : Mixed ww2_smdSN } in
             letrec {
               $wxs_smdSG
                 = \ ww4_smdSE ->
                     case ww4_smdSE of ds1_a1f59 {
                       __DEFAULT -> : Mixed ($wxs_smdSG (-# ds1_a1f59 1#));
                       1# -> lvl328_smhwB
                     }; } in
             $wxs_smdSG y_a3Zv
         }
         },
         \ ts_alXeI -> ww3_smdSO (drop n_sm4R5 ts_alXeI) #)

-- RHS size: {terms: 18, types: 44, coercions: 0, joins: 0/0}
$fAbstractPrimFun_$cabstract
  = \ w_smdSH w1_smdSI ->
      case w1_smdSI of
      { PrimFun ww1_smdSL ww2_smdSM ww3_smdSN ww4_smdSO ->
      case $w$cabstract2 w_smdSH ww1_smdSL ww2_smdSM ww3_smdSN ww4_smdSO
      of
      { (# ww6_smenK, ww7_smenL, ww8_smenM, ww9_smenN #) ->
      PrimFun ww6_smenK ww7_smenL ww8_smenM ww9_smenN
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractPrimFun = $fAbstractPrimFun_$cabstract `cast` <Co:3>

-- RHS size: {terms: 51, types: 35, coercions: 0, joins: 1/3}
$w$srenamingR
  = \ ww_smdT1 ww1_smdT3 ->
      join {
        $j_smeuj rho_sm4Re
          = letrec {
              go1_sm4Rd
                = \ ds_a1Rz ->
                    case ds_a1Rz of {
                      [] -> rho_sm4Re;
                      : y_a1RC ys_a1RD -> consS $fDeBruijnTerm y_a1RC (go1_sm4Rd ys_a1RD)
                    }; } in
            go1_sm4Rd
              (map
                 (\ i_alXnA ->
                    case i_alXnA of { I# y_aALf ->
                    let { x_a1SQ = -# (-# ww_smdT1 1#) y_aALf } in
                    case >=# x_a1SQ 0# of {
                      __DEFAULT -> var1;
                      1# -> Var x_a1SQ []
                    }
                    })
                 (reverse1 ww1_smdT3 [])) } in
      case ww_smdT1 of ds1_XddGG {
        __DEFAULT -> jump $j_smeuj (Wk ds1_XddGG IdS);
        0# -> jump $j_smeuj IdS
      }

-- RHS size: {terms: 45, types: 37, coercions: 0, joins: 1/2}
$wrenamingR
  = \ @ a_smdT7 w_smdT8 ww_smdTf ww1_smdTh ->
      join {
        $j_smeur rho_sm4R9
          = letrec {
              go1_sm4R8
                = \ ds_a1Rz ->
                    case ds_a1Rz of {
                      [] -> rho_sm4R9;
                      : y_a1RC ys_a1RD -> consS w_smdT8 y_a1RC (go1_sm4R8 ys_a1RD)
                    }; } in
            go1_sm4R8
              (map
                 (\ i_alXnA ->
                    deBruijnVar
                      w_smdT8
                      (case i_alXnA of { I# y_aALf -> I# (-# (-# ww_smdTf 1#) y_aALf) }))
                 (reverse1 ww1_smdTh [])) } in
      case ww_smdTf of ds1_XddGG {
        __DEFAULT -> jump $j_smeur (Wk ds1_XddGG IdS);
        0# -> jump $j_smeur IdS
      }

-- RHS size: {terms: 13, types: 12, coercions: 0, joins: 0/0}
renamingR
  = \ @ a_smdT7 w_smdT8 w1_smdT9 ->
      case w1_smdT9 of { Perm ww1_smdTc ww2_smdTh ->
      case ww1_smdTc of { I# ww4_smdTf ->
      $wrenamingR w_smdT8 ww4_smdTf ww2_smdTh
      }
      }

-- RHS size: {terms: 8, types: 18, coercions: 4, joins: 0/0}
$wapplyPatSubst
  = \ @ a_smdTk ww_smdTt ww1_smdTy w_smdTm ->
      ww_smdTt
        (($fFunctorSubstitution'_$cfmap patternToTerm w_smdTm)
         `cast` <Co:4>)

-- RHS size: {terms: 15, types: 40, coercions: 1, joins: 0/0}
applyPatSubst
  = \ @ a_smdTk w_smdTl w1_smdTm ->
      case w_smdTl of { (ww1_smdTp, ww2_smdTv) ->
      case ww1_smdTp of { C:Subst ww4_smdTs ww5_smdTt ->
      case ww2_smdTv of { Eq# ww7_smdTy ->
      $wapplyPatSubst ww5_smdTt @~ <Co:1> w1_smdTm
      }
      }
      }

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
fromPatternSubstitution
  = $fFunctorSubstitution'_$cfmap patternToTerm

-- RHS size: {terms: 50, types: 36, coercions: 0, joins: 0/0}
$fEqCandidateKind_$c/=
  = \ eta1_B2 eta2_B1 ->
      case eta1_B2 of {
        LocalCandidate ->
          case eta2_B1 of {
            LocalCandidate -> False;
            GlobalCandidate ipv_sm2PW -> True
          };
        GlobalCandidate a1_alXHn ->
          case eta2_B1 of {
            LocalCandidate -> True;
            GlobalCandidate b1_alXHo ->
              case a1_alXHn of { QName ds_d6aXk ds1_d6aXl ->
              case ds1_d6aXl of
              { Name ds2_d6aXp ds3_d6aXq ds4_d6aXr ds5_d6aXs ds6_d6aXt
                     ds7_d6aXu ->
              case ds2_d6aXp of { NameId dt_smhwE dt1_smhwF ->
              case b1_alXHo of { QName ds8_X6baj ds9_X6bal ->
              case ds9_X6bal of
              { Name ds10_X6bau ds11_X6baw ds12_X6bay ds13_X6baA ds14_X6baC
                     ds15_X6baE ->
              case ds10_X6bau of { NameId dt2_smhwI dt3_smhwJ ->
              case eqWord# dt_smhwE dt2_smhwI of {
                __DEFAULT -> True;
                1# ->
                  case eqWord# dt1_smhwF dt3_smhwJ of {
                    __DEFAULT -> True;
                    1# -> False
                  }
              }
              }
              }
              }
              }
              }
              }
          }
      }

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$fEqCandidateKind_$c==
  = \ ds_dm0NZ ds1_dm0O0 ->
      case ds_dm0NZ of {
        LocalCandidate ->
          case ds1_dm0O0 of {
            LocalCandidate -> True;
            GlobalCandidate ipv_sm2PW -> False
          };
        GlobalCandidate a1_alXHn ->
          case ds1_dm0O0 of {
            LocalCandidate -> False;
            GlobalCandidate b1_alXHo -> $fEqQName_$c== a1_alXHn b1_alXHo
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fEqCandidateKind
  = C:Eq $fEqCandidateKind_$c== $fEqCandidateKind_$c/=

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'SizeOfSort3 = "'SizeOfSort"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'SizeOfSort2 = TrNameS $tc'SizeOfSort3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcSizeOfSort2 = "SizeOfSort"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcSizeOfSort1 = TrNameS $tcSizeOfSort2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'C:TeleNoAbs3 = "'C:TeleNoAbs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'C:TeleNoAbs2 = TrNameS $tc'C:TeleNoAbs3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTeleNoAbs3 = "TeleNoAbs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTeleNoAbs2 = TrNameS $tcTeleNoAbs3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'TelV3 = "'TelV"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'TelV2 = TrNameS $tc'TelV3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTelV2 = "TelV"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTelV1 = TrNameS $tcTelV2

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_rmk3I = KindRepVar 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep1_rmk3J = : $krep_rmk3I []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_rmk3K = KindRepTyConApp $tcUniv []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_rmk3L = KindRepTyConApp $tcInteger []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_rmk3M = KindRepTyConApp $tcConstraint []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcTeleNoAbs1 = KindRepFun krep$* $krep4_rmk3M

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep5_rmk3N = KindRepTyConApp $tcTerm []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_rmk3O = KindRepFun $krep5_rmk3N $krep5_rmk3N

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_rmk3P = KindRepFun $krep_rmk3I $krep6_rmk3O

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep8_rmk3Q = : $krep5_rmk3N $krep1_rmk3J

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_rmk3R = KindRepTyConApp $tcDom' $krep8_rmk3Q

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep10_rmk3S = : $krep9_rmk3R []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_rmk3T = KindRepTyConApp $tcTele $krep10_rmk3S

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcTelV
  = TyCon
      9035955001179687644##
      2574428044088936190##
      $trModule
      $tcTelV1
      0#
      krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_rmk3U = KindRepTyConApp $tcTelV $krep1_rmk3J

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_rmk3V = KindRepFun $krep_rmk3I $krep12_rmk3U

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'TelV1 = KindRepFun $krep11_rmk3T $krep13_rmk3V

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'TelV
  = TyCon
      3046596140811995891##
      10300205434780769837##
      $trModule
      $tc'TelV2
      1#
      $tc'TelV1

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcTeleNoAbs
  = TyCon
      5167306956600549124##
      1862911818518100570##
      $trModule
      $tcTeleNoAbs2
      0#
      $tcTeleNoAbs1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_rmk3W = KindRepTyConApp $tcTeleNoAbs $krep1_rmk3J

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'C:TeleNoAbs1 = KindRepFun $krep7_rmk3P $krep14_rmk3W

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'C:TeleNoAbs
  = TyCon
      1992222655075049119##
      11048002202699853717##
      $trModule
      $tc'C:TeleNoAbs2
      1#
      $tc'C:TeleNoAbs1

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcSizeOfSort
  = TyCon
      17020628877078758450##
      6293575420666348854##
      $trModule
      $tcSizeOfSort1
      0#
      krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep15_rmk3X = KindRepTyConApp $tcSizeOfSort []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_rmk3Y = KindRepFun $krep3_rmk3L $krep15_rmk3X

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'SizeOfSort1 = KindRepFun $krep2_rmk3K $krep16_rmk3Y

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'SizeOfSort
  = TyCon
      9630141311634317090##
      7812711575908784424##
      $trModule
      $tc'SizeOfSort2
      0#
      $tc'SizeOfSort1

-- RHS size: {terms: 18, types: 12, coercions: 0, joins: 0/0}
$mSmallSort
  = \ @ rep_alXX7 @ r_alXX8 scrut_alXXa cont_alXXb fail_alXXc ->
      case scrut_alXXa of { SizeOfSort u_alXq8 ds_dlZV9 ->
      case eqInteger# ds_dlZV9 $bSmallSort1 of {
        __DEFAULT -> fail_alXXc void#;
        1# -> cont_alXXb u_alXq8
      }
      }

-- RHS size: {terms: 13, types: 12, coercions: 0, joins: 0/0}
mkLam
  = \ a_alXpp v_alXpq ->
      Lam
        (case a_alXpp of { Arg ds1_d3o6A ds2_d3o6B -> ds1_d3o6A })
        (Abs
           (case a_alXpp of { Arg ds1_d3o6D ds2_d3o6E -> ds2_d3o6E }) v_alXpq)

-- RHS size: {terms: 23, types: 28, coercions: 0, joins: 0/1}
unlamView
  = \ xs_alXpy b_alXpz ->
      letrec {
        go1_a1Ry
          = \ ds_a1Rz ->
              case ds_a1Rz of {
                [] -> b_alXpz;
                : y_a1RC ys_a1RD ->
                  Lam
                    (case y_a1RC of { Arg ds1_d3o6A ds2_d3o6B -> ds1_d3o6A })
                    (Abs
                       (case y_a1RC of { Arg ds1_d3o6D ds2_d3o6E -> ds2_d3o6E })
                       (go1_a1Ry ys_a1RD))
              }; } in
      go1_a1Ry xs_alXpy

-- RHS size: {terms: 14, types: 19, coercions: 0, joins: 0/0}
absV
  = \ @ a_alY6K a1_alXoZ x_alXp0 ds_dm0ik ->
      case ds_dm0ik of { TelV tel_alXp1 t_alXp2 ->
      TelV (ExtendTel a1_alXoZ (Abs x_alXp0 tel_alXp1)) t_alXp2
      }

-- RHS size: {terms: 23, types: 16, coercions: 0, joins: 0/0}
$wrenaming
  = \ @ a_smdTF w_smdTG w1_smdTH ww_smdTO ww1_smdTQ ->
      prependS
        w_smdTG
        w1_smdTH
        ($w$cinversePermute ww_smdTO ww1_smdTQ (deBruijnVar w_smdTG))
        (case $wlenAcc ww1_smdTQ 0# of ww2_axAc {
           __DEFAULT -> Wk ww2_axAc IdS;
           0# -> IdS
         })

-- RHS size: {terms: 15, types: 13, coercions: 0, joins: 0/0}
renaming
  = \ @ a_smdTF w_smdTG w1_smdTH w2_smdTI ->
      case w2_smdTI of { Perm ww1_smdTL ww2_smdTQ ->
      case ww1_smdTL of { I# ww4_smdTO ->
      $wrenaming w_smdTG w1_smdTH ww4_smdTO ww2_smdTQ
      }
      }

-- RHS size: {terms: 18, types: 16, coercions: 0, joins: 0/0}
renameP
  = \ @ a_alYbq $dSubst1_alYbs eta1_B2 eta2_B1 ->
      applySubst
        $dSubst1_alYbs
        (case eta2_B1 of { Perm ww1_smdTL ww2_smdTQ ->
         case ww1_smdTL of { I# ww4_smdTO ->
         $wrenaming ($p1Subst $dSubst1_alYbs) eta1_B2 ww4_smdTO ww2_smdTQ
         }
         })

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
relToDontCare
  = \ @ a_alYdn $dLensRelevance_alYdp ai_alXn9 v_alXna ->
      case getRelevance $dLensRelevance_alYdp ai_alXn9 of {
        __DEFAULT -> v_alXna;
        Irrelevant -> dontCare v_alXna
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$bLargeSort = SizeOfSort

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
szSortUniv
  = \ ds_dm0Lv ->
      case ds_dm0Lv of { SizeOfSort ds1_dm0Lw ds2_dm0Lx -> ds1_dm0Lw }

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
szSortSize
  = \ ds_dm0Ly ->
      case ds_dm0Ly of { SizeOfSort ds1_dm0Lz ds2_dm0LA -> ds2_dm0LA }

-- RHS size: {terms: 6, types: 10, coercions: 0, joins: 0/0}
theTel
  = \ @ a_alXD8 ds_dm0LB ->
      case ds_dm0LB of { TelV ds1_dm0LC ds2_dm0LD -> ds1_dm0LC }

-- RHS size: {terms: 6, types: 10, coercions: 0, joins: 0/0}
theCore
  = \ @ a_alXDa ds_dm0LE ->
      case ds_dm0LE of { TelV ds1_dm0LF ds2_dm0LG -> ds2_dm0LG }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowTelV5 = "TelV {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowTelV4 = "theTel = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowTelV3 = "theCore = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowTelV2 = "}"#

-- RHS size: {terms: 64, types: 42, coercions: 0, joins: 0/4}
$fShowTelV_$cshowsPrec
  = \ @ a_alYA0 $dShow_alYA1 ->
      let { $dShow1_sm4RP = $fShowDom' $fShowTerm $dShow_alYA1 } in
      let { lvl328_smhwK = $fShowTele_$cshowsPrec $dShow1_sm4RP } in
      \ a1_alXKb ds_dm0Sr ->
        case ds_dm0Sr of { TelV b1_alXKc b2_alXKd ->
        case a1_alXKb of { I# x_a1SQ ->
        let { f4_sm4RM = lvl328_smhwK $fShowTelV1 b1_alXKc } in
        let { f5_sm4RK = showsPrec $dShow_alYA1 $fShowTelV1 b2_alXKd } in
        case >=# x_a1SQ 11# of {
          __DEFAULT ->
            \ x1_X20l ->
              unpackAppendCString#
                $fShowTelV5
                (unpackAppendCString#
                   $fShowTelV4
                   (f4_sm4RM
                      (++
                         showCommaSpace1
                         (unpackAppendCString#
                            $fShowTelV3
                            (f5_sm4RK (unpackAppendCString# $fShowTelV2 x1_X20l))))));
          1# ->
            \ x1_aaP2 ->
              : $fShow(,)4
                (unpackAppendCString#
                   $fShowTelV5
                   (unpackAppendCString#
                      $fShowTelV4
                      (f4_sm4RM
                         (++
                            showCommaSpace1
                            (unpackAppendCString#
                               $fShowTelV3
                               (f5_sm4RK
                                  (unpackAppendCString# $fShowTelV2 (: $fShow(,)2 x1_aaP2))))))))
        }
        }
        }

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$fShowTelV_$cshow
  = \ @ a_alYA0 $dShow_alYA1 x_a1Qo ->
      $fShowTelV_$cshowsPrec $dShow_alYA1 $fShowTelV1 x_a1Qo []

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
$fShowTelV_$cshowList
  = \ @ a_alYA0 $dShow_alYA1 ls_a1Qr s_a1Qs ->
      showList__
        ($fShowTelV_$cshowsPrec $dShow_alYA1 $fShowTelV1) ls_a1Qr s_a1Qs

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
$fShowTelV
  = \ @ a_alYA0 $dShow_alYA1 ->
      C:Show
        ($fShowTelV_$cshowsPrec $dShow_alYA1)
        ($fShowTelV_$cshow $dShow_alYA1)
        ($fShowTelV_$cshowList $dShow_alYA1)

-- RHS size: {terms: 2, types: 4, coercions: 0, joins: 0/0}
$fSubstRange'_$capplySubst = \ _ -> id

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstRange'
  = C:Subst ($fDeBruijnTerm `cast` <Co:3>) $fSubstRange'_$capplySubst

-- RHS size: {terms: 25, types: 83, coercions: 7, joins: 0/0}
$fSubst(,,,)_$cp1Subst
  = \ @ a_alYM5
      @ b_alYM6
      @ c_alYM7
      @ d_alYM8
      $dSubst1_alYM9
      _
      _
      _
      $d~1_alYMd
      $d~2_alYMe
      $d~3_alYMf ->
      case eq_sel $d~3_alYMf of co_alZIN { __DEFAULT ->
      case eq_sel $d~2_alYMe of co1_alZIK { __DEFAULT ->
      case eq_sel $d~1_alYMd of co2_alZIF { __DEFAULT ->
      ($p1Subst $dSubst1_alYM9) `cast` <Co:7>
      }
      }
      }

-- RHS size: {terms: 45, types: 111, coercions: 46, joins: 0/0}
$fSubst(,,,)_$capplySubst
  = \ @ a_alYM5
      @ b_alYM6
      @ c_alYM7
      @ d_alYM8
      $dSubst1_alYM9
      $dSubst2_alYMa
      $dSubst3_alYMb
      $dSubst4_alYMc
      $d~1_alYMd
      $d~2_alYMe
      $d~3_alYMf
      eta1_B2
      eta2_B1 ->
      case eq_sel $d~3_alYMf of co_alZIN { __DEFAULT ->
      case eq_sel $d~2_alYMe of co1_alZIK { __DEFAULT ->
      case eq_sel $d~1_alYMd of co2_alZIF { __DEFAULT ->
      case eta2_B1 of { (x_alX9O, y_alX9P, z_alX9Q, u_alX9R) ->
      (applySubst $dSubst1_alYM9 (eta1_B2 `cast` <Co:7>) x_alX9O,
       applySubst $dSubst2_alYMa (eta1_B2 `cast` <Co:10>) y_alX9P,
       applySubst $dSubst3_alYMb (eta1_B2 `cast` <Co:13>) z_alX9Q,
       applySubst $dSubst4_alYMc (eta1_B2 `cast` <Co:16>) u_alX9R)
      }
      }
      }
      }

-- RHS size: {terms: 28, types: 50, coercions: 0, joins: 0/0}
$fSubst(,,,)
  = \ @ a_alYM5
      @ b_alYM6
      @ c_alYM7
      @ d_alYM8
      $dSubst1_alYM9
      $dSubst2_alYMa
      $dSubst3_alYMb
      $dSubst4_alYMc
      $d~1_alYMd
      $d~2_alYMe
      $d~3_alYMf ->
      C:Subst
        ($fSubst(,,,)_$cp1Subst
           $dSubst1_alYM9
           $dSubst2_alYMa
           $dSubst3_alYMb
           $dSubst4_alYMc
           $d~1_alYMd
           $d~2_alYMe
           $d~3_alYMf)
        ($fSubst(,,,)_$capplySubst
           $dSubst1_alYM9
           $dSubst2_alYMa
           $dSubst3_alYMb
           $dSubst4_alYMc
           $d~1_alYMd
           $d~2_alYMe
           $d~3_alYMf)

-- RHS size: {terms: 18, types: 57, coercions: 6, joins: 0/0}
$fSubst(,,)_$cp1Subst
  = \ @ a_alYMC
      @ b_alYMD
      @ c_alYME
      $dSubst1_alYMF
      _
      _
      $d~1_alYMI
      $d~2_alYMJ ->
      case eq_sel $d~2_alYMJ of co_alZJf { __DEFAULT ->
      case eq_sel $d~1_alYMI of co1_alZJa { __DEFAULT ->
      ($p1Subst $dSubst1_alYMF) `cast` <Co:6>
      }
      }

-- RHS size: {terms: 32, types: 81, coercions: 27, joins: 0/0}
$fSubst(,,)_$capplySubst
  = \ @ a_smdUu
      @ b_smdUv
      @ c_smdUw
      w_smdUx
      w1_smdUy
      w2_smdUz
      w3_smdUA
      w4_smdUB
      w5_smdUC
      w6_smdUD ->
      case w3_smdUA of { Eq# ww1_smdUG ->
      case w4_smdUB of { Eq# ww3_smdUK ->
      case w6_smdUD of { (ww5_smdUO, ww6_smdUP, ww7_smdUQ) ->
      (applySubst w_smdUx (w5_smdUC `cast` <Co:6>) ww5_smdUO,
       applySubst w1_smdUy (w5_smdUC `cast` <Co:9>) ww6_smdUP,
       applySubst w2_smdUz (w5_smdUC `cast` <Co:12>) ww7_smdUQ)
      }
      }
      }

-- RHS size: {terms: 21, types: 36, coercions: 0, joins: 0/0}
$fSubst(,,)
  = \ @ a_alYMC
      @ b_alYMD
      @ c_alYME
      $dSubst1_alYMF
      $dSubst2_alYMG
      $dSubst3_alYMH
      $d~1_alYMI
      $d~2_alYMJ ->
      C:Subst
        ($fSubst(,,)_$cp1Subst
           $dSubst1_alYMF $dSubst2_alYMG $dSubst3_alYMH $d~1_alYMI $d~2_alYMJ)
        ($fSubst(,,)_$capplySubst
           $dSubst1_alYMF $dSubst2_alYMG $dSubst3_alYMH $d~1_alYMI $d~2_alYMJ)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl192_rmk3Z = I# 233#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl193_rmk40
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl192_rmk3Z
      lvl7_rmk0t
      lvl192_rmk3Z
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl194_rmk41 = PushCallStack lvl1_rmk0n lvl193_rmk40 EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyTele1 = __IMPOSSIBLE__ (lvl194_rmk41 `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl195_rmk42 = I# 230#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl196_rmk43 = I# 52#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl197_rmk44
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl195_rmk42
      lvl42_rmk12
      lvl195_rmk42
      lvl196_rmk43

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl198_rmk45 = PushCallStack lvl1_rmk0n lvl197_rmk44 EmptyCallStack

-- RHS size: {terms: 2, types: 4, coercions: 4, joins: 0/0}
lvl199_rmk46 = __IMPOSSIBLE__ (lvl198_rmk45 `cast` <Co:4>)

-- RHS size: {terms: 3, types: 4, coercions: 4, joins: 0/0}
lvl200_rmk47
  = \ @ a_alZAZ -> __IMPOSSIBLE__ (lvl198_rmk45 `cast` <Co:4>)

-- RHS size: {terms: 11, types: 31, coercions: 5, joins: 0/0}
$fSubst(,)_$cp1Subst
  = \ @ a_alYN3 @ b_alYN4 $dSubst1_alYN5 _ $d~1_alYN7 ->
      case eq_sel $d~1_alYN7 of co_alZJw { __DEFAULT ->
      ($p1Subst $dSubst1_alYN5) `cast` <Co:5>
      }

-- RHS size: {terms: 22, types: 48, coercions: 13, joins: 0/0}
$fSubst(,)_$capplySubst
  = \ @ a_smdUW
      @ b_smdUX
      w_smdUY
      w1_smdUZ
      w2_smdV0
      w3_smdV1
      w4_smdV2 ->
      case w2_smdV0 of { Eq# ww1_smdV5 ->
      case w4_smdV2 of { (ww3_smdV9, ww4_smdVa) ->
      (applySubst w_smdUY (w3_smdV1 `cast` <Co:5>) ww3_smdV9,
       applySubst w1_smdUZ (w3_smdV1 `cast` <Co:8>) ww4_smdVa)
      }
      }

-- RHS size: {terms: 14, types: 22, coercions: 0, joins: 0/0}
$fSubst(,)
  = \ @ a_alYN3 @ b_alYN4 $dSubst1_alYN5 $dSubst2_alYN6 $d~1_alYN7 ->
      C:Subst
        ($fSubst(,)_$cp1Subst $dSubst1_alYN5 $dSubst2_alYN6 $d~1_alYN7)
        ($fSubst(,)_$capplySubst $dSubst1_alYN5 $dSubst2_alYN6 $d~1_alYN7)

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
$fSubst()_$capplySubst = \ _ _ -> ()

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubst()
  = C:Subst ($fDeBruijnTerm `cast` <Co:3>) $fSubst()_$capplySubst

-- RHS size: {terms: 15, types: 18, coercions: 4, joins: 0/1}
$fSubstWithHiding_$capplySubst
  = \ @ a_alYNy $dSubst1_alYNz rho_add8H ->
      let {
        f4_sm4Ta = applySubst $dSubst1_alYNz (rho_add8H `cast` <Co:4>) } in
      \ ds_d3oAM ->
        case ds_d3oAM of { WithHiding a1_a3h5i a2_a3h5j ->
        WithHiding a1_a3h5i (f4_sm4Ta a2_a3h5j)
        }

-- RHS size: {terms: 7, types: 8, coercions: 4, joins: 0/0}
$fSubstWithHiding
  = \ @ a_alYNy $dSubst1_alYNz ->
      C:Subst
        (($p1Subst $dSubst1_alYNz) `cast` <Co:4>)
        ($fSubstWithHiding_$capplySubst $dSubst1_alYNz)

-- RHS size: {terms: 13, types: 22, coercions: 5, joins: 0/1}
$fSubstMap_$capplySubst
  = \ @ k_XlYYm @ a_XlYYo _ $dSubst1_XlYYs rho_add8H ->
      let {
        f4_sm4Tc = applySubst $dSubst1_XlYYs (rho_add8H `cast` <Co:5>) } in
      \ m_a15wM -> map f4_sm4Tc m_a15wM

-- RHS size: {terms: 10, types: 14, coercions: 5, joins: 0/0}
$fSubstMap
  = \ @ k_XlYYl @ a_XlYYn $dOrd_XlYYp $dSubst1_XlYYr ->
      C:Subst
        (($p1Subst $dSubst1_XlYYr) `cast` <Co:5>)
        ($fSubstMap_$capplySubst $dOrd_XlYYp $dSubst1_XlYYr)

-- RHS size: {terms: 7, types: 11, coercions: 4, joins: 0/0}
$fSubst[]_$capplySubst
  = \ @ a_alYOe $dSubst1_alYOf rho_add8H ->
      map (applySubst $dSubst1_alYOf (rho_add8H `cast` <Co:4>))

-- RHS size: {terms: 7, types: 8, coercions: 4, joins: 0/0}
$fSubst[]
  = \ @ a_alYOe $dSubst1_alYOf ->
      C:Subst
        (($p1Subst $dSubst1_alYOf) `cast` <Co:4>)
        ($fSubst[]_$capplySubst $dSubst1_alYOf)

-- RHS size: {terms: 16, types: 25, coercions: 5, joins: 0/1}
$fSubstNamed_$capplySubst
  = \ @ a_alYPI @ name_alYPJ $dSubst1_alYPK rho_alXak ->
      let {
        f4_sm4Te = applySubst $dSubst1_alYPK (rho_alXak `cast` <Co:5>) } in
      \ ds_d3op0 ->
        case ds_d3op0 of { Named a1_a3gWE a2_a3gWF ->
        Named a1_a3gWE (f4_sm4Te a2_a3gWF)
        }

-- RHS size: {terms: 8, types: 12, coercions: 5, joins: 0/0}
$fSubstNamed
  = \ @ a_XlYZX @ name_XlYZZ $dSubst1_XlZ01 ->
      C:Subst
        (($p1Subst $dSubst1_XlZ01) `cast` <Co:5>)
        ($fSubstNamed_$capplySubst $dSubst1_XlZ01)

-- RHS size: {terms: 33, types: 33, coercions: 8, joins: 0/0}
$fSubstAbs_$capplySubst
  = \ @ a_alYQp $dSubst1_alYQq rho_alXaq ds_dm1zP ->
      case ds_dm1zP of {
        Abs x_alXar a1_alXas ->
          Abs
            x_alXar
            (applySubst
               $dSubst1_alYQq
               (case rho_alXaq `cast` <Co:4> of wild2_Xj {
                  __DEFAULT -> Lift 1# wild2_Xj;
                  IdS -> IdS;
                  Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v 1#) rho1_add9T
                })
               a1_alXas);
        NoAbs x_alXau a1_alXav ->
          NoAbs
            x_alXau
            (applySubst $dSubst1_alYQq (rho_alXaq `cast` <Co:4>) a1_alXav)
      }

-- RHS size: {terms: 7, types: 8, coercions: 4, joins: 0/0}
$fSubstAbs
  = \ @ a_alYQp $dSubst1_alYQq ->
      C:Subst
        (($p1Subst $dSubst1_alYQq) `cast` <Co:4>)
        ($fSubstAbs_$capplySubst $dSubst1_alYQq)

-- RHS size: {terms: 20, types: 24, coercions: 8, joins: 0/0}
$fSubstBlocked'_$capplySubst
  = \ @ a_alYUJ $dSubst1_alYUK rho_alXbW b_alXbX ->
      case b_alXbX of {
        Blocked a1_a8Cal a2_a8Cam ->
          Blocked
            a1_a8Cal
            (applySubst $dSubst1_alYUK (rho_alXbW `cast` <Co:4>) a2_a8Cam);
        NotBlocked a1_a8Cap a2_a8Caq ->
          NotBlocked
            a1_a8Cap
            (applySubst $dSubst1_alYUK (rho_alXbW `cast` <Co:4>) a2_a8Caq)
      }

-- RHS size: {terms: 7, types: 8, coercions: 4, joins: 0/0}
$fSubstBlocked'
  = \ @ a_alYUJ $dSubst1_alYUK ->
      C:Subst
        (($p1Subst $dSubst1_alYUK) `cast` <Co:4>)
        ($fSubstBlocked'_$capplySubst $dSubst1_alYUK)

-- RHS size: {terms: 2, types: 4, coercions: 0, joins: 0/0}
$fSubstName_$capplySubst = \ _ -> id

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstName
  = C:Subst ($fDeBruijnTerm `cast` <Co:3>) $fSubstName_$capplySubst

-- RHS size: {terms: 9, types: 21, coercions: 4, joins: 0/0}
$fSubstSort'_$cp1Subst
  = \ @ a_alZ03 $dCoercible_alZ04 $dSubst1_alZ05 ->
      case coercible_sel $dCoercible_alZ04 of co_alZNs { __DEFAULT ->
      ($p1Subst $dSubst1_alZ05) `cast` <Co:4>
      }

-- RHS size: {terms: 15, types: 52, coercions: 5, joins: 0/0}
$fSubstSubstitution'_$cp1Subst
  = \ @ a_smdVo w_smdVp ->
      case w_smdVp of { (ww1_smdVs, ww2_smdVE) ->
      case ww1_smdVs of { C:Subst ww4_smdVv ww5_smdVC ->
      case ww4_smdVv of ww6_smdVx
      { C:DeBruijn ww7_smdVy ww8_smdVz ww9_smdVA ->
      case ww2_smdVE of { Eq# ww11_smdVH -> ww6_smdVx `cast` <Co:5> }
      }
      }
      }

-- RHS size: {terms: 13, types: 32, coercions: 4, joins: 0/0}
$fSubstSubstitution'_$capplySubst
  = \ @ a_alZ3h $d(%,%)_alZ3i eta1_B2 eta2_B1 ->
      case eq_sel ($p2(%,%) $d(%,%)_alZ3i) of co_alZOS { __DEFAULT ->
      composeS $d(%,%)_alZ3i (eta1_B2 `cast` <Co:4>) eta2_B1
      }

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fSubstSubstitution'
  = \ @ a_alZ3h $d(%,%)_alZ3i ->
      C:Subst
        ($fSubstSubstitution'_$cp1Subst $d(%,%)_alZ3i)
        ($fSubstSubstitution'_$capplySubst $d(%,%)_alZ3i)

-- RHS size: {terms: 278, types: 770, coercions: 2, joins: 0/8}
$fAbstractHashMap_$cabstract
  = \ @ v_alZ3w @ k_alZ3x $dAbstract2_alZ3y tel_alXdO m_alXdP ->
      let { f4_sm4Tm = ($dAbstract2_alZ3y `cast` <Co:2>) tel_alXdO } in
      letrec {
        $wgo2_smdVZ
          = \ @ s_smdVL w_smdVM w1_smdVN ww_smdVT ww1_smdVX w2_smdVQ ->
              case >=# ww_smdVT ww1_smdVX of {
                __DEFAULT ->
                  case w_smdVM of wild3_aji0d { Array ds1_aji0e ->
                  case indexSmallArray# ds1_aji0e ww_smdVT of { (# ipv_aji0h #) ->
                  case ipv_aji0h of { L k1_aji0k v1_aji0l ->
                  case w1_smdVN of wild5_aji0n { MArray ds3_aji0o ->
                  case writeSmallArray#
                         ds3_aji0o ww_smdVT (L k1_aji0k (f4_sm4Tm v1_aji0l)) w2_smdVQ
                  of s'_aji0q
                  { __DEFAULT ->
                  $wgo2_smdVZ
                    wild3_aji0d wild5_aji0n (+# ww_smdVT 1#) ww1_smdVX s'_aji0q
                  }
                  }
                  }
                  }
                  };
                1# -> (# w2_smdVQ, w1_smdVN #)
              }; } in
      letrec {
        go1_sm4Th
          = \ ds_ajhYi ->
              case ds_ajhYi of {
                Empty -> Empty;
                BitmapIndexed dt_ajhYr dt1_ajhYs ->
                  case runRW#
                         (\ s1_ajhYN ->
                            let { ipv_sm4Tl = sizeofSmallArray# dt1_ajhYs } in
                            case newSmallArray# ipv_sm4Tl undefinedElem s1_ajhYN of
                            { (# ipv1_ajhYP, ipv2_ajhYQ #) ->
                            case $wgo3_smdWu
                                   (Array dt1_ajhYs) (MArray ipv2_ajhYQ) 0# ipv_sm4Tl ipv1_ajhYP
                            of
                            { (# ipv3_ajhYT, ipv4_ajhYU #) ->
                            case ipv4_ajhYU of { MArray ds3_ajhYX ->
                            case unsafeFreezeSmallArray# ds3_ajhYX ipv3_ajhYT of
                            { (# ipv5_ajhZ0, ipv6_ajhZ1 #) ->
                            (# ipv5_ajhZ0, Array ipv6_ajhZ1 #)
                            }
                            }
                            }
                            })
                  of
                  { (# ipv1_ajhZ4, ipv2_ajhZ5 #) ->
                  case ipv2_ajhZ5 of { Array dt3_aOGW ->
                  BitmapIndexed dt_ajhYr dt3_aOGW
                  }
                  };
                Leaf dt_ajhZ7 dt1_ajhZ8 dt2_ajhZ9 ->
                  Leaf dt_ajhZ7 dt1_ajhZ8 (f4_sm4Tm dt2_ajhZ9);
                Full dt_ajhZi ->
                  case runRW#
                         (\ s1_ajhZD ->
                            let { ipv_sm4Tq = sizeofSmallArray# dt_ajhZi } in
                            case newSmallArray# ipv_sm4Tq undefinedElem s1_ajhZD of
                            { (# ipv1_ajhZF, ipv2_ajhZG #) ->
                            case $wgo1_smdWf
                                   (Array dt_ajhZi) (MArray ipv2_ajhZG) 0# ipv_sm4Tq ipv1_ajhZF
                            of
                            { (# ipv3_ajhZJ, ipv4_ajhZK #) ->
                            case ipv4_ajhZK of { MArray ds3_ajhZN ->
                            case unsafeFreezeSmallArray# ds3_ajhZN ipv3_ajhZJ of
                            { (# ipv5_ajhZQ, ipv6_ajhZR #) ->
                            (# ipv5_ajhZQ, Array ipv6_ajhZR #)
                            }
                            }
                            }
                            })
                  of
                  { (# ipv1_ajhZU, ipv2_ajhZV #) ->
                  $WFull ipv2_ajhZV
                  };
                Collision dt_aji04 dt1_aji05 ->
                  case runRW#
                         (\ s1_aji0u ->
                            let { ipv_sm4Tu = sizeofSmallArray# dt1_aji05 } in
                            case newSmallArray# ipv_sm4Tu undefinedElem s1_aji0u of
                            { (# ipv1_aji0w, ipv2_aji0x #) ->
                            case $wgo2_smdVZ
                                   (Array dt1_aji05) (MArray ipv2_aji0x) 0# ipv_sm4Tu ipv1_aji0w
                            of
                            { (# ipv3_aji0A, ipv4_aji0B #) ->
                            case ipv4_aji0B of { MArray ds3_aji0E ->
                            case unsafeFreezeSmallArray# ds3_aji0E ipv3_aji0A of
                            { (# ipv5_aji0H, ipv6_aji0I #) ->
                            (# ipv5_aji0H, Array ipv6_aji0I #)
                            }
                            }
                            }
                            })
                  of
                  { (# ipv1_aji0L, ipv2_aji0M #) ->
                  case ipv2_aji0M of { Array dt3_aOH9 ->
                  Collision dt_aji04 dt3_aOH9
                  }
                  }
              };
        $wgo1_smdWf
          = \ @ s_smdW1 w_smdW2 w1_smdW3 ww_smdW9 ww1_smdWd w2_smdW6 ->
              case >=# ww_smdW9 ww1_smdWd of {
                __DEFAULT ->
                  case w_smdW2 of wild3_ajhZq { Array ds1_ajhZr ->
                  case indexSmallArray# ds1_ajhZr ww_smdW9 of { (# ipv_ajhZu #) ->
                  case w1_smdW3 of wild4_ajhZw { MArray ds3_ajhZx ->
                  case writeSmallArray#
                         ds3_ajhZx ww_smdW9 (go1_sm4Th ipv_ajhZu) w2_smdW6
                  of s'_ajhZz
                  { __DEFAULT ->
                  $wgo1_smdWf
                    wild3_ajhZq wild4_ajhZw (+# ww_smdW9 1#) ww1_smdWd s'_ajhZz
                  }
                  }
                  }
                  };
                1# -> (# w2_smdW6, w1_smdW3 #)
              };
        $wgo3_smdWu
          = \ @ s_smdWg w_smdWh w1_smdWi ww_smdWo ww1_smdWs w2_smdWl ->
              case >=# ww_smdWo ww1_smdWs of {
                __DEFAULT ->
                  case w_smdWh of wild3_ajhYA { Array ds1_ajhYB ->
                  case indexSmallArray# ds1_ajhYB ww_smdWo of { (# ipv_ajhYE #) ->
                  case w1_smdWi of wild4_ajhYG { MArray ds3_ajhYH ->
                  case writeSmallArray#
                         ds3_ajhYH ww_smdWo (go1_sm4Th ipv_ajhYE) w2_smdWl
                  of s'_ajhYJ
                  { __DEFAULT ->
                  $wgo3_smdWu
                    wild3_ajhYA wild4_ajhYG (+# ww_smdWo 1#) ww1_smdWs s'_ajhYJ
                  }
                  }
                  }
                  };
                1# -> (# w2_smdWl, w1_smdWi #)
              }; } in
      go1_sm4Th m_alXdP

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
$fAbstractHashMap = $fAbstractHashMap_$cabstract `cast` <Co:14>

-- RHS size: {terms: 9, types: 13, coercions: 2, joins: 0/0}
$fAbstractCase_$cabstract2
  = \ @ v_alZ3L @ k_alZ3M $dAbstract2_alZ3N tel_alXdS m_alXdT ->
      map (($dAbstract2_alZ3N `cast` <Co:2>) tel_alXdS) m_alXdT

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
$fAbstractMap = $fAbstractCase_$cabstract2 `cast` <Co:14>

-- RHS size: {terms: 6, types: 7, coercions: 2, joins: 0/0}
$fAbstract[]_$cabstract
  = \ @ t_alZ4e $dAbstract2_alZ4f tel_alXdY ->
      map (($dAbstract2_alZ4f `cast` <Co:2>) tel_alXdY)

-- RHS size: {terms: 1, types: 0, coercions: 10, joins: 0/0}
$fAbstract[] = $fAbstract[]_$cabstract `cast` <Co:10>

-- RHS size: {terms: 12, types: 12, coercions: 2, joins: 0/0}
$fAbstractCase_$cabstract3
  = \ @ a_alZ55 $dAbstract2_alZ56 tel_alXec ds_dm1Ri ->
      case ds_dm1Ri of { WithArity n_alXed a1_alXee ->
      WithArity
        n_alXed (($dAbstract2_alZ56 `cast` <Co:2>) tel_alXec a1_alXee)
      }

-- RHS size: {terms: 1, types: 0, coercions: 10, joins: 0/0}
$fAbstractWithArity = $fAbstractCase_$cabstract3 `cast` <Co:10>

-- RHS size: {terms: 70, types: 133, coercions: 2, joins: 0/1}
$w$cabstract
  = \ @ a_smdWB
      w_smdWC
      w1_smdWD
      ww_smdWH
      ww1_smdWI
      ww2_smdWJ
      ww3_smdWK
      ww4_smdWL
      ww5_smdWM
      ww6_smdWN ->
      (# ww_smdWH,
         letrec {
           go15_a15wV
             = \ ds_a15wW ->
                 case ds_a15wW of {
                   Bin dt_a15wY kx_a15wZ x_a15x0 l_a15x1 r_a15x2 ->
                     case go15_a15wV l_a15x1 of dt1_a15x4 { __DEFAULT ->
                     case go15_a15wV r_a15x2 of dt2_a15x5 { __DEFAULT ->
                     Bin
                       dt_a15wY
                       kx_a15wZ
                       ($fAbstractCase_$cabstract3 w_smdWC w1_smdWD x_a15x0)
                       dt1_a15x4
                       dt2_a15x5
                     }
                     };
                   Tip -> Tip
                 }; } in
         go15_a15wV ww1_smdWI,
         case ww2_smdWJ of {
           Nothing -> Nothing;
           Just a1_anJk ->
             Just
               (case a1_anJk of { (x_a6yUa, y_a6yUb) -> x_a6yUa },
                case a1_anJk of { (x_a6yUe, y_a6yUf) ->
                case y_a6yUf of { WithArity n_alXed a2_alXee ->
                WithArity n_alXed ((w_smdWC `cast` <Co:2>) w1_smdWD a2_alXee)
                }
                })
         },
         $fAbstractCase_$cabstract2 w_smdWC w1_smdWD ww3_smdWK,
         $fAbstractCase_$cabstract1 w_smdWC w1_smdWD ww4_smdWL, ww5_smdWM,
         ww6_smdWN #)

-- RHS size: {terms: 27, types: 73, coercions: 0, joins: 0/0}
$fAbstractCase_$cabstract
  = \ @ a_smdWB w_smdWC w1_smdWD w2_smdWE ->
      case w2_smdWE of
      { Branches ww1_smdWH ww2_smdWI ww3_smdWJ ww4_smdWK ww5_smdWL
                 ww6_smdWM ww7_smdWN ->
      case $w$cabstract
             w_smdWC
             w1_smdWD
             ww1_smdWH
             ww2_smdWI
             ww3_smdWJ
             ww4_smdWK
             ww5_smdWL
             ww6_smdWM
             ww7_smdWN
      of
      { (# ww9_smenW, ww10_smenX, ww11_smenY, ww12_smenZ, ww13_smeo0,
           ww14_smeo1, ww15_smeo2 #) ->
      Branches
        ww9_smenW
        ww10_smenX
        ww11_smenY
        ww12_smenZ
        ww13_smeo0
        ww14_smeo1
        ww15_smeo2
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 10, joins: 0/0}
$fAbstractCase = $fAbstractCase_$cabstract `cast` <Co:10>

Rec {
-- RHS size: {terms: 132, types: 240, coercions: 0, joins: 0/2}
$fAbstractCompiledClauses'_$cabstract
  = \ tel_alXef cc_alXeg ->
      case cc_alXeg of {
        Case n_alXel bs_alXem ->
          Case
            (case n_alXel of { Arg a1_a3gXn a2_a3gXo ->
             Arg
               a1_a3gXn
               (case a2_a3gXo of { I# x_a1WW ->
                case $w$csize tel_alXef of ww_s92fc { __DEFAULT ->
                I# (+# x_a1WW ww_s92fc)
                }
                })
             })
            (case bs_alXem of
             { Branches ww1_smdWH ww2_smdWI ww3_smdWJ ww4_smdWK ww5_smdWL
                        ww6_smdWM ww7_smdWN ->
             Branches
               ww1_smdWH
               (letrec {
                  go15_a15wV
                    = \ ds_a15wW ->
                        case ds_a15wW of {
                          Bin dt_a15wY kx_a15wZ x_a15x0 l_a15x1 r_a15x2 ->
                            case go15_a15wV l_a15x1 of dt1_a15x4 { __DEFAULT ->
                            case go15_a15wV r_a15x2 of dt2_a15x5 { __DEFAULT ->
                            Bin
                              dt_a15wY
                              kx_a15wZ
                              (case x_a15x0 of { WithArity n1_alXed a_alXee ->
                               WithArity
                                 n1_alXed ($fAbstractCompiledClauses'_$cabstract tel_alXef a_alXee)
                               })
                              dt1_a15x4
                              dt2_a15x5
                            }
                            };
                          Tip -> Tip
                        }; } in
                go15_a15wV ww2_smdWI)
               (case ww3_smdWJ of {
                  Nothing -> Nothing;
                  Just a1_anJk ->
                    Just
                      (case a1_anJk of { (x_a6yUa, y_a6yUb) -> x_a6yUa },
                       case a1_anJk of { (x_a6yUe, y_a6yUf) ->
                       case y_a6yUf of { WithArity n1_alXed a_alXee ->
                       WithArity
                         n1_alXed ($fAbstractCompiledClauses'_$cabstract tel_alXef a_alXee)
                       }
                       })
                })
               (letrec {
                  go15_a15wV
                    = \ ds_a15wW ->
                        case ds_a15wW of {
                          Bin dt_a15wY kx_a15wZ x_a15x0 l_a15x1 r_a15x2 ->
                            case go15_a15wV l_a15x1 of dt1_a15x4 { __DEFAULT ->
                            case go15_a15wV r_a15x2 of dt2_a15x5 { __DEFAULT ->
                            Bin
                              dt_a15wY
                              kx_a15wZ
                              ($fAbstractCompiledClauses'_$cabstract tel_alXef x_a15x0)
                              dt1_a15x4
                              dt2_a15x5
                            }
                            };
                          Tip -> Tip
                        }; } in
                go15_a15wV ww4_smdWK)
               (case ww5_smdWL of {
                  Nothing -> Nothing;
                  Just a1_anJk ->
                    Just ($fAbstractCompiledClauses'_$cabstract tel_alXef a1_anJk)
                })
               ww6_smdWM
               ww7_smdWN
             });
        Done xs_alXej t_alXek ->
          Done
            (++ (map lvl182_rmk3w (telToList tel_alXef)) xs_alXej) t_alXek;
        Fail xs_alXei ->
          Fail (++ (map lvl182_rmk3w (telToList tel_alXef)) xs_alXei)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractCompiledClauses'
  = $fAbstractCompiledClauses'_$cabstract `cast` <Co:3>

-- RHS size: {terms: 6, types: 6, coercions: 0, joins: 0/0}
lvl201_rmk48
  = case $w$csize EmptyTel of v_B2 { __DEFAULT -> I# v_B2 }

Rec {
-- RHS size: {terms: 414, types: 305, coercions: 16, joins: 0/3}
$fAbstractDefinition_$cabstract1
  = \ tel_alXeJ d_alXeK ->
      case d_alXeK of wild1_im25y {
        AxiomDefn ds_im25z ->
          case ds_im25z of { AxiomData axiomConstTransp2_im25C ->
          wild1_im25y
          };
        DataOrRecSigDefn ds_im25k ->
          case ds_im25k of { DataOrRecSigData datarecPars2_im25n ->
          DataOrRecSigDefn
            (DataOrRecSigData
               (case $w$csize tel_alXeJ of ww_s92fc { __DEFAULT ->
                case datarecPars2_im25n of { I# y_a1WZ -> I# (+# ww_s92fc y_a1WZ) }
                }))
          };
        GeneralizableVar -> GeneralizableVar;
        AbstractDefn d1_alXeM ->
          AbstractDefn ($fAbstractDefinition_$cabstract1 tel_alXeJ d1_alXeM);
        FunctionDefn ds_im1Tq ->
          case ds_im1Tq of
          { FunctionData funClauses2_im1TJ funCompiled2_im1TK
                         funSplitTree2_im1TL funTreeless2_im1TM funCovering2_im1TN
                         funInv2_im1TO funMutual2_im1TP funAbstr2_im1TQ funProjection2_im1TR
                         funErasure2_im1TS funFlags2_im1TT funTerminates2_im1TU
                         funExtLam2_im1TV funWith2_im1TW funIsKanOp2_im1TX
                         funOpaque2_im1TY ->
          case funProjection2_im1TR of wild3_X4U {
            Left ds1_dm23H ->
              FunctionDefn
                (FunctionData
                   ($dAbstract_rmk3A tel_alXeJ funClauses2_im1TJ)
                   (case funCompiled2_im1TK of {
                      Nothing -> Nothing;
                      Just a1_anJk ->
                        Just ($fAbstractCompiledClauses'_$cabstract tel_alXeJ a1_anJk)
                    })
                   funSplitTree2_im1TL
                   funTreeless2_im1TM
                   ($dAbstract_rmk3A tel_alXeJ funCovering2_im1TN)
                   ($fAbstractFunctionInverse'_$cabstract tel_alXeJ funInv2_im1TO)
                   funMutual2_im1TP
                   funAbstr2_im1TQ
                   wild3_X4U
                   funErasure2_im1TS
                   funFlags2_im1TT
                   funTerminates2_im1TU
                   (case funExtLam2_im1TV of {
                      Nothing -> Nothing;
                      Just a1_anJk ->
                        Just
                          (case a1_anJk of { ExtLamInfo ds2_im1Sp ds3_im1Sq ds4_im1Sr ->
                           case ds4_im1Sr of {
                             Nothing -> ExtLamInfo ds2_im1Sp ds3_im1Sq Nothing;
                             Just x_im1Sv ->
                               case x_im1Sv of { System tel1_smhxB sys_smhxC ->
                               ExtLamInfo
                                 ds2_im1Sp
                                 ds3_im1Sq
                                 (Just
                                    (System
                                       ($fAbstractClause_$cabstract1 tel_alXeJ tel1_smhxB)
                                       sys_smhxC))
                               }
                           }
                           })
                    })
                   funWith2_im1TW
                   funIsKanOp2_im1TX
                   funOpaque2_im1TY);
            Right p_alXeX ->
              case p_alXeX of
              { Projection ds1_im1Uh ds2_im1Ui ds3_im1Uj ds4_im1Uk ds5_im1Ul ->
              case ds4_im1Uk of { I# x_a1W1 ->
              case ># x_a1W1 0# of {
                __DEFAULT ->
                  let {
                    tel1_sm4P5
                      = case $w$csize tel_alXeJ of ww_s92fc { __DEFAULT ->
                        let { x1_a1SZ = -# ww_s92fc 1# } in
                        case <=# x1_a1SZ 0# of {
                          __DEFAULT ->
                            telFromList_go1 ($wunsafeDrop x1_a1SZ (telToList tel_alXeJ));
                          1# -> telFromList_go1 (telToList tel_alXeJ)
                        }
                        } } in
                  let {
                    lvl328_smhxD
                      = case $w$csize tel1_sm4P5 of v_B2 { __DEFAULT -> I# v_B2 } } in
                  FunctionDefn
                    (FunctionData
                       (map
                          (\ c_alXf1 ->
                             case c_alXf1 of
                             { Clause rl_alXep rf_alXeq tel'_alXer ps_alXes b_alXet t_alXeu
                                      catchall_alXev exact_alXew recursive_alXex unreachable_alXey
                                      ell_alXez wm_alXeA ->
                             Clause
                               rl_alXep
                               rf_alXeq
                               ($fAbstractClause_$cabstract1 tel_alXeJ tel'_alXer)
                               (++
                                  (namedTelVars
                                     (case lvl328_smhxD of { I# v1_B2 ->
                                      case $w$csize tel'_alXer of ww_X93dF { __DEFAULT ->
                                      I# (+# v1_B2 ww_X93dF)
                                      }
                                      })
                                     tel1_sm4P5)
                                  ps_alXes)
                               b_alXet
                               t_alXeu
                               catchall_alXev
                               exact_alXew
                               recursive_alXex
                               unreachable_alXey
                               ell_alXez
                               wm_alXeA
                             })
                          funClauses2_im1TJ)
                       (case funCompiled2_im1TK of {
                          Nothing -> Nothing;
                          Just a1_anJk ->
                            Just ($fAbstractCompiledClauses'_$cabstract tel1_sm4P5 a1_anJk)
                        })
                       funSplitTree2_im1TL
                       funTreeless2_im1TM
                       ($dAbstract_rmk3A tel1_sm4P5 funCovering2_im1TN)
                       ($fAbstractFunctionInverse'_$cabstract tel1_sm4P5 funInv2_im1TO)
                       funMutual2_im1TP
                       funAbstr2_im1TQ
                       (Right
                          (Projection
                             ds1_im1Uh
                             ds2_im1Ui
                             ds3_im1Uj
                             (case $w$csize tel_alXeJ of ww_s92fc { __DEFAULT ->
                              I# (+# ww_s92fc x_a1W1)
                              })
                             (($fAbstractProjLams1 tel_alXeJ ds5_im1Ul) `cast` <Co:8>)))
                       funErasure2_im1TS
                       funFlags2_im1TT
                       funTerminates2_im1TU
                       (case funExtLam2_im1TV of {
                          Nothing -> Nothing;
                          Just a1_anJk ->
                            Just
                              (case a1_anJk of { ExtLamInfo ds7_im1Sp ds8_im1Sq ds9_im1Sr ->
                               case ds9_im1Sr of {
                                 Nothing -> ExtLamInfo ds7_im1Sp ds8_im1Sq Nothing;
                                 Just x1_im1Sv -> case lvl181_rmk3v of wild9_00 { }
                               }
                               })
                        })
                       funWith2_im1TW
                       funIsKanOp2_im1TX
                       funOpaque2_im1TY);
                1# ->
                  FunctionDefn
                    (FunctionData
                       (map
                          (\ c_alXf1 ->
                             case c_alXf1 of
                             { Clause rl_alXep rf_alXeq tel'_alXer ps_alXes b_alXet t_alXeu
                                      catchall_alXev exact_alXew recursive_alXex unreachable_alXey
                                      ell_alXez wm_alXeA ->
                             Clause
                               rl_alXep
                               rf_alXeq
                               ($fAbstractClause_$cabstract1 tel_alXeJ tel'_alXer)
                               (++
                                  (namedTelVars
                                     (case lvl201_rmk48 of { I# v1_B2 ->
                                      case $w$csize tel'_alXer of ww_X93dF { __DEFAULT ->
                                      I# (+# v1_B2 ww_X93dF)
                                      }
                                      })
                                     EmptyTel)
                                  ps_alXes)
                               b_alXet
                               t_alXeu
                               catchall_alXev
                               exact_alXew
                               recursive_alXex
                               unreachable_alXey
                               ell_alXez
                               wm_alXeA
                             })
                          funClauses2_im1TJ)
                       funCompiled2_im1TK
                       funSplitTree2_im1TL
                       funTreeless2_im1TM
                       funCovering2_im1TN
                       funInv2_im1TO
                       funMutual2_im1TP
                       funAbstr2_im1TQ
                       (Right
                          (Projection
                             ds1_im1Uh
                             ds2_im1Ui
                             ds3_im1Uj
                             (case $w$csize tel_alXeJ of ww_s92fc { __DEFAULT ->
                              I# (+# ww_s92fc x_a1W1)
                              })
                             (($fAbstractProjLams1 tel_alXeJ ds5_im1Ul) `cast` <Co:8>)))
                       funErasure2_im1TS
                       funFlags2_im1TT
                       funTerminates2_im1TU
                       funExtLam2_im1TV
                       funWith2_im1TW
                       funIsKanOp2_im1TX
                       funOpaque2_im1TY)
              }
              }
              }
          }
          };
        DatatypeDefn ds_im1WS ->
          case ds_im1WS of
          { DatatypeData dataPars2_im1WV dataIxs2_im1WW dataClause2_im1WX
                         dataCons2_im1WY dataSort2_im1WZ dataMutual2_im1X0 dataAbstr2_im1X1
                         dataPathCons2_im1X2 dataTranspIx2_im1X3 dataTransp2_im1X4 ->
          DatatypeDefn
            (DatatypeData
               (case dataPars2_im1WV of { I# x_a1WW ->
                case $w$csize tel_alXeJ of ww_s92fc { __DEFAULT ->
                I# (+# x_a1WW ww_s92fc)
                }
                })
               dataIxs2_im1WW
               ($dAbstract1_rmk3B tel_alXeJ dataClause2_im1WX)
               dataCons2_im1WY
               dataSort2_im1WZ
               dataMutual2_im1X0
               dataAbstr2_im1X1
               dataPathCons2_im1X2
               dataTranspIx2_im1X3
               dataTransp2_im1X4)
          };
        RecordDefn ds_im1Yc ->
          case ds_im1Yc of
          { RecordData recPars2_im1Yf recClause2_im1Yg recConHead2_im1Yh
                       recNamedCon2_im1Yi recFields2_im1Yj recTel2_im1Yk recMutual2_im1Yl
                       recEtaEquality'1_im1Ym recPatternMatching2_im1Yn
                       recInduction2_im1Yo recTerminates2_im1Yp recAbstr2_im1Yq
                       recComp2_im1Yr ->
          RecordDefn
            (RecordData
               (case recPars2_im1Yf of { I# x_a1WW ->
                case $w$csize tel_alXeJ of ww_s92fc { __DEFAULT ->
                I# (+# x_a1WW ww_s92fc)
                }
                })
               ($dAbstract1_rmk3B tel_alXeJ recClause2_im1Yg)
               recConHead2_im1Yh
               recNamedCon2_im1Yi
               recFields2_im1Yj
               ($fAbstractClause_$cabstract1 tel_alXeJ recTel2_im1Yk)
               recMutual2_im1Yl
               recEtaEquality'1_im1Ym
               recPatternMatching2_im1Yn
               recInduction2_im1Yo
               recTerminates2_im1Yp
               recAbstr2_im1Yq
               recComp2_im1Yr)
          };
        ConstructorDefn ds_im1Zv ->
          case ds_im1Zv of
          { ConstructorData conPars2_im1ZJ conArity2_im1ZK conSrcCon2_im1ZL
                            conData2_im1ZM conAbstr2_im1ZN conComp2_im1ZO conProj2_im1ZP
                            conForced2_im1ZQ conErased2_im1ZR conErasure2_im1ZS
                            conInline2_im1ZT ->
          ConstructorDefn
            (ConstructorData
               (case conPars2_im1ZJ of { I# x_a1WW ->
                case $w$csize tel_alXeJ of ww_s92fc { __DEFAULT ->
                I# (+# x_a1WW ww_s92fc)
                }
                })
               conArity2_im1ZK
               conSrcCon2_im1ZL
               conData2_im1ZM
               conAbstr2_im1ZN
               conComp2_im1ZO
               conProj2_im1ZP
               conForced2_im1ZQ
               conErased2_im1ZR
               conErasure2_im1ZS
               conInline2_im1ZT)
          };
        PrimitiveDefn ds_im20N ->
          case ds_im20N of
          { PrimitiveData primAbstr2_im20Q primName2_im20R primClauses2_im20S
                          primInv2_im20T primCompiled2_im20U primOpaque2_im20V ->
          PrimitiveDefn
            (PrimitiveData
               primAbstr2_im20Q
               primName2_im20R
               ($dAbstract_rmk3A tel_alXeJ primClauses2_im20S)
               primInv2_im20T
               primCompiled2_im20U
               primOpaque2_im20V)
          };
        PrimitiveSortDefn ipv_sm3ta ->
          case ipv_sm3ta of
          { PrimitiveSortData primSortName2_im24B primSortSort2_im24C ->
          wild1_im25y
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractDefn = $fAbstractDefinition_$cabstract1 `cast` <Co:3>

-- RHS size: {terms: 37, types: 23, coercions: 0, joins: 0/2}
$fAbstractDefinition_$cabstract4
  = \ tel_alXfk ds_dm26C ->
      case ds_dm26C of wild1_X9E {
        [] -> [];
        : ipv_sm2Lv ipv1_sm2Lw ->
          case $w$csize tel_alXfk of ww_s92fc { __DEFAULT ->
          case <# 0# ww_s92fc of {
            __DEFAULT -> wild1_X9E;
            1# ->
              let { lvl328_smhxF = : Invariant wild1_X9E } in
              letrec {
                $wxs_smdX2
                  = \ ww1_smdX0 ->
                      case ww1_smdX0 of ds1_a1f59 {
                        __DEFAULT -> : Invariant ($wxs_smdX2 (-# ds1_a1f59 1#));
                        1# -> lvl328_smhxF
                      }; } in
              $wxs_smdX2 ww_s92fc
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 4, joins: 0/0}
$fAbstract[]0 = $fAbstractDefinition_$cabstract4 `cast` <Co:4>

-- RHS size: {terms: 37, types: 23, coercions: 0, joins: 0/2}
$fAbstractDefinition_$cabstract3
  = \ tel_alXfn ds_dm26N ->
      case ds_dm26N of wild1_X9C {
        [] -> [];
        : ipv_sm2Lo ipv1_sm2Lp ->
          case $w$csize tel_alXfn of ww_s92fc { __DEFAULT ->
          case <# 0# ww_s92fc of {
            __DEFAULT -> wild1_X9C;
            1# ->
              let { lvl328_smhxG = : Mixed wild1_X9C } in
              letrec {
                $wxs_smdXa
                  = \ ww1_smdX8 ->
                      case ww1_smdX8 of ds1_a1f59 {
                        __DEFAULT -> : Mixed ($wxs_smdXa (-# ds1_a1f59 1#));
                        1# -> lvl328_smhxG
                      }; } in
              $wxs_smdXa ww_s92fc
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 4, joins: 0/0}
$fAbstract[]1 = $fAbstractDefinition_$cabstract3 `cast` <Co:4>

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl202_rmk49 = I# 620#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl203_rmk4a
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl202_rmk49
      loc1_rmk1f
      lvl202_rmk49
      lvl30_rmk0Q

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl204_rmk4b = PushCallStack lvl1_rmk0n lvl203_rmk4a EmptyCallStack

-- RHS size: {terms: 2, types: 2, coercions: 4, joins: 0/0}
$fAbstractSort'1 = __IMPOSSIBLE__ (lvl204_rmk4b `cast` <Co:4>)

-- RHS size: {terms: 8, types: 13, coercions: 0, joins: 0/0}
$fAbstractSort'_$cabstract
  = \ ds_dm27r s_alXfW ->
      case ds_dm27r of {
        EmptyTel -> s_alXfW;
        ExtendTel ipv_sm2Lk ipv1_sm2Ll -> $fAbstractSort'1
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractSort' = $fAbstractSort'_$cabstract `cast` <Co:3>

-- RHS size: {terms: 13, types: 12, coercions: 0, joins: 0/0}
$fAbstractDrop_$cabstract
  = \ @ a_alZcC $dDoDrop_alZcD tel_alXg9 x_alXga ->
      unDrop
        $dDoDrop_alZcD
        (case $w$csize tel_alXg9 of ww_s92fc { __DEFAULT -> I# ww_s92fc })
        x_alXga

-- RHS size: {terms: 1, types: 0, coercions: 10, joins: 0/0}
$fAbstractDrop = $fAbstractDrop_$cabstract `cast` <Co:10>

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl205_rmk4c = I# 577#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl206_rmk4d
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl205_rmk4c
      lvl7_rmk0t
      lvl205_rmk4c
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl207_rmk4e = PushCallStack lvl1_rmk0n lvl206_rmk4d EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyDrop1 = __IMPOSSIBLE__ (lvl207_rmk4e `cast` <Co:4>)

-- RHS size: {terms: 20, types: 24, coercions: 0, joins: 0/0}
$w$capplyE1
  = \ @ a_smdXd ww_smdXk w_smdXf w1_smdXg ->
      ww_smdXk
        (case allApplyElims w1_smdXg of {
           Nothing -> case $fApplyDrop1 of wild2_00 { };
           Just v_aaOy ->
             case $wlenAcc v_aaOy 0# of ww2_axAc { __DEFAULT -> I# ww2_axAc }
         })
        w_smdXf

-- RHS size: {terms: 11, types: 23, coercions: 0, joins: 0/0}
$fApplyDrop_$capplyE
  = \ @ a_smdXd w_smdXe w1_smdXf w2_smdXg ->
      case w_smdXe of { C:DoDrop ww1_smdXj ww2_smdXk ww3_smdXl ->
      $w$capplyE1 ww2_smdXk w1_smdXf w2_smdXg
      }

-- RHS size: {terms: 14, types: 11, coercions: 0, joins: 0/0}
$fApplyDrop_$capply
  = \ @ a_alZcO $dDoDrop_alZcP x_alXgc args_alXgd ->
      dropMore
        $dDoDrop_alZcP
        (case $wlenAcc args_alXgd 0# of ww2_axAc { __DEFAULT ->
         I# ww2_axAc
         })
        x_alXgc

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fApplyDrop
  = \ @ a_alZcO $dDoDrop_alZcP ->
      C:Apply
        ($fApplyDrop_$capply $dDoDrop_alZcP)
        ($fApplyDrop_$capplyE $dDoDrop_alZcP)

-- RHS size: {terms: 24, types: 30, coercions: 0, joins: 0/0}
$fApply(,,)_$capply
  = \ @ a_smdXo
      @ b_smdXp
      @ c_smdXq
      w_smdXr
      w1_smdXs
      w2_smdXt
      w3_smdXu
      w4_smdXv ->
      case w3_smdXu of { (ww1_smdXy, ww2_smdXz, ww3_smdXA) ->
      (apply w_smdXr ww1_smdXy w4_smdXv,
       apply w1_smdXs ww2_smdXz w4_smdXv,
       apply w2_smdXt ww3_smdXA w4_smdXv)
      }

-- RHS size: {terms: 24, types: 30, coercions: 0, joins: 0/0}
$fApply(,,)_$capplyE
  = \ @ a_smdXG
      @ b_smdXH
      @ c_smdXI
      w_smdXJ
      w1_smdXK
      w2_smdXL
      w3_smdXM
      w4_smdXN ->
      case w3_smdXM of { (ww1_smdXQ, ww2_smdXR, ww3_smdXS) ->
      (applyE w_smdXJ ww1_smdXQ w4_smdXN,
       applyE w1_smdXK ww2_smdXR w4_smdXN,
       applyE w2_smdXL ww3_smdXS w4_smdXN)
      }

-- RHS size: {terms: 15, types: 22, coercions: 0, joins: 0/0}
$fApply(,,)
  = \ @ a_alZde
      @ b_alZdf
      @ c_alZdg
      $dApply_alZdh
      $dApply1_alZdi
      $dApply2_alZdj ->
      C:Apply
        ($fApply(,,)_$capply $dApply_alZdh $dApply1_alZdi $dApply2_alZdj)
        ($fApply(,,)_$capplyE $dApply_alZdh $dApply1_alZdi $dApply2_alZdj)

-- RHS size: {terms: 18, types: 21, coercions: 0, joins: 0/0}
$fApply(,)_$capply
  = \ @ a_alZdG
      @ b_alZdH
      $dApply_alZdI
      $dApply1_alZdJ
      ds_dm28y
      args_alXgv ->
      case ds_dm28y of { (x_alXgt, y_alXgu) ->
      (apply $dApply_alZdI x_alXgt args_alXgv,
       apply $dApply1_alZdJ y_alXgu args_alXgv)
      }

-- RHS size: {terms: 18, types: 21, coercions: 0, joins: 0/0}
$fApply(,)_$capplyE
  = \ @ a_alZdG
      @ b_alZdH
      $dApply_alZdI
      $dApply1_alZdJ
      ds_dm28I
      es_alXgy ->
      case ds_dm28I of { (x_alXgw, y_alXgx) ->
      (applyE $dApply_alZdI x_alXgw es_alXgy,
       applyE $dApply1_alZdJ y_alXgx es_alXgy)
      }

-- RHS size: {terms: 11, types: 15, coercions: 0, joins: 0/0}
$fApply(,)
  = \ @ a_alZdG @ b_alZdH $dApply_alZdI $dApply1_alZdJ ->
      C:Apply
        ($fApply(,)_$capply $dApply_alZdI $dApply1_alZdJ)
        ($fApply(,)_$capplyE $dApply_alZdI $dApply1_alZdJ)

-- RHS size: {terms: 279, types: 770, coercions: 0, joins: 0/7}
$fApplyHashMap_$capply
  = \ @ v_alZe2 @ k_alZe3 $dApply_alZe4 x_alXgB args_alXgC ->
      letrec {
        $wgo2_smdYc
          = \ @ s_smdXY w_smdXZ w1_smdY0 ww_smdY6 ww1_smdYa w2_smdY3 ->
              case >=# ww_smdY6 ww1_smdYa of {
                __DEFAULT ->
                  case w_smdXZ of wild3_aji0d { Array ds1_aji0e ->
                  case indexSmallArray# ds1_aji0e ww_smdY6 of { (# ipv_aji0h #) ->
                  case ipv_aji0h of { L k1_aji0k v1_aji0l ->
                  case w1_smdY0 of wild5_aji0n { MArray ds3_aji0o ->
                  case writeSmallArray#
                         ds3_aji0o
                         ww_smdY6
                         (L k1_aji0k (apply $dApply_alZe4 v1_aji0l args_alXgC))
                         w2_smdY3
                  of s'_aji0q
                  { __DEFAULT ->
                  $wgo2_smdYc
                    wild3_aji0d wild5_aji0n (+# ww_smdY6 1#) ww1_smdYa s'_aji0q
                  }
                  }
                  }
                  }
                  };
                1# -> (# w2_smdY3, w1_smdY0 #)
              }; } in
      letrec {
        go1_sm4TU
          = \ ds_ajhYi ->
              case ds_ajhYi of {
                Empty -> Empty;
                BitmapIndexed dt_ajhYr dt1_ajhYs ->
                  case runRW#
                         (\ s1_ajhYN ->
                            let { ipv_sm4TY = sizeofSmallArray# dt1_ajhYs } in
                            case newSmallArray# ipv_sm4TY undefinedElem s1_ajhYN of
                            { (# ipv1_ajhYP, ipv2_ajhYQ #) ->
                            case $wgo3_smdYH
                                   (Array dt1_ajhYs) (MArray ipv2_ajhYQ) 0# ipv_sm4TY ipv1_ajhYP
                            of
                            { (# ipv3_ajhYT, ipv4_ajhYU #) ->
                            case ipv4_ajhYU of { MArray ds3_ajhYX ->
                            case unsafeFreezeSmallArray# ds3_ajhYX ipv3_ajhYT of
                            { (# ipv5_ajhZ0, ipv6_ajhZ1 #) ->
                            (# ipv5_ajhZ0, Array ipv6_ajhZ1 #)
                            }
                            }
                            }
                            })
                  of
                  { (# ipv1_ajhZ4, ipv2_ajhZ5 #) ->
                  case ipv2_ajhZ5 of { Array dt3_aOGW ->
                  BitmapIndexed dt_ajhYr dt3_aOGW
                  }
                  };
                Leaf dt_ajhZ7 dt1_ajhZ8 dt2_ajhZ9 ->
                  Leaf dt_ajhZ7 dt1_ajhZ8 (apply $dApply_alZe4 dt2_ajhZ9 args_alXgC);
                Full dt_ajhZi ->
                  case runRW#
                         (\ s1_ajhZD ->
                            let { ipv_sm4U2 = sizeofSmallArray# dt_ajhZi } in
                            case newSmallArray# ipv_sm4U2 undefinedElem s1_ajhZD of
                            { (# ipv1_ajhZF, ipv2_ajhZG #) ->
                            case $wgo1_smdYs
                                   (Array dt_ajhZi) (MArray ipv2_ajhZG) 0# ipv_sm4U2 ipv1_ajhZF
                            of
                            { (# ipv3_ajhZJ, ipv4_ajhZK #) ->
                            case ipv4_ajhZK of { MArray ds3_ajhZN ->
                            case unsafeFreezeSmallArray# ds3_ajhZN ipv3_ajhZJ of
                            { (# ipv5_ajhZQ, ipv6_ajhZR #) ->
                            (# ipv5_ajhZQ, Array ipv6_ajhZR #)
                            }
                            }
                            }
                            })
                  of
                  { (# ipv1_ajhZU, ipv2_ajhZV #) ->
                  $WFull ipv2_ajhZV
                  };
                Collision dt_aji04 dt1_aji05 ->
                  case runRW#
                         (\ s1_aji0u ->
                            let { ipv_sm4U6 = sizeofSmallArray# dt1_aji05 } in
                            case newSmallArray# ipv_sm4U6 undefinedElem s1_aji0u of
                            { (# ipv1_aji0w, ipv2_aji0x #) ->
                            case $wgo2_smdYc
                                   (Array dt1_aji05) (MArray ipv2_aji0x) 0# ipv_sm4U6 ipv1_aji0w
                            of
                            { (# ipv3_aji0A, ipv4_aji0B #) ->
                            case ipv4_aji0B of { MArray ds3_aji0E ->
                            case unsafeFreezeSmallArray# ds3_aji0E ipv3_aji0A of
                            { (# ipv5_aji0H, ipv6_aji0I #) ->
                            (# ipv5_aji0H, Array ipv6_aji0I #)
                            }
                            }
                            }
                            })
                  of
                  { (# ipv1_aji0L, ipv2_aji0M #) ->
                  case ipv2_aji0M of { Array dt3_aOH9 ->
                  Collision dt_aji04 dt3_aOH9
                  }
                  }
              };
        $wgo1_smdYs
          = \ @ s_smdYe w_smdYf w1_smdYg ww_smdYm ww1_smdYq w2_smdYj ->
              case >=# ww_smdYm ww1_smdYq of {
                __DEFAULT ->
                  case w_smdYf of wild3_ajhZq { Array ds1_ajhZr ->
                  case indexSmallArray# ds1_ajhZr ww_smdYm of { (# ipv_ajhZu #) ->
                  case w1_smdYg of wild4_ajhZw { MArray ds3_ajhZx ->
                  case writeSmallArray#
                         ds3_ajhZx ww_smdYm (go1_sm4TU ipv_ajhZu) w2_smdYj
                  of s'_ajhZz
                  { __DEFAULT ->
                  $wgo1_smdYs
                    wild3_ajhZq wild4_ajhZw (+# ww_smdYm 1#) ww1_smdYq s'_ajhZz
                  }
                  }
                  }
                  };
                1# -> (# w2_smdYj, w1_smdYg #)
              };
        $wgo3_smdYH
          = \ @ s_smdYt w_smdYu w1_smdYv ww_smdYB ww1_smdYF w2_smdYy ->
              case >=# ww_smdYB ww1_smdYF of {
                __DEFAULT ->
                  case w_smdYu of wild3_ajhYA { Array ds1_ajhYB ->
                  case indexSmallArray# ds1_ajhYB ww_smdYB of { (# ipv_ajhYE #) ->
                  case w1_smdYv of wild4_ajhYG { MArray ds3_ajhYH ->
                  case writeSmallArray#
                         ds3_ajhYH ww_smdYB (go1_sm4TU ipv_ajhYE) w2_smdYy
                  of s'_ajhYJ
                  { __DEFAULT ->
                  $wgo3_smdYH
                    wild3_ajhYA wild4_ajhYG (+# ww_smdYB 1#) ww1_smdYF s'_ajhYJ
                  }
                  }
                  }
                  };
                1# -> (# w2_smdYy, w1_smdYv #)
              }; } in
      go1_sm4TU x_alXgB

-- RHS size: {terms: 279, types: 770, coercions: 0, joins: 0/7}
$fApplyHashMap_$capplyE
  = \ @ v_alZe2 @ k_alZe3 $dApply_alZe4 x_alXgD es_alXgE ->
      letrec {
        $wgo2_smdZ1
          = \ @ s_smdYN w_smdYO w1_smdYP ww_smdYV ww1_smdYZ w2_smdYS ->
              case >=# ww_smdYV ww1_smdYZ of {
                __DEFAULT ->
                  case w_smdYO of wild3_aji0d { Array ds1_aji0e ->
                  case indexSmallArray# ds1_aji0e ww_smdYV of { (# ipv_aji0h #) ->
                  case ipv_aji0h of { L k1_aji0k v1_aji0l ->
                  case w1_smdYP of wild5_aji0n { MArray ds3_aji0o ->
                  case writeSmallArray#
                         ds3_aji0o
                         ww_smdYV
                         (L k1_aji0k (applyE $dApply_alZe4 v1_aji0l es_alXgE))
                         w2_smdYS
                  of s'_aji0q
                  { __DEFAULT ->
                  $wgo2_smdZ1
                    wild3_aji0d wild5_aji0n (+# ww_smdYV 1#) ww1_smdYZ s'_aji0q
                  }
                  }
                  }
                  }
                  };
                1# -> (# w2_smdYS, w1_smdYP #)
              }; } in
      letrec {
        go1_sm4U8
          = \ ds_ajhYi ->
              case ds_ajhYi of {
                Empty -> Empty;
                BitmapIndexed dt_ajhYr dt1_ajhYs ->
                  case runRW#
                         (\ s1_ajhYN ->
                            let { ipv_sm4Uc = sizeofSmallArray# dt1_ajhYs } in
                            case newSmallArray# ipv_sm4Uc undefinedElem s1_ajhYN of
                            { (# ipv1_ajhYP, ipv2_ajhYQ #) ->
                            case $wgo3_smdZw
                                   (Array dt1_ajhYs) (MArray ipv2_ajhYQ) 0# ipv_sm4Uc ipv1_ajhYP
                            of
                            { (# ipv3_ajhYT, ipv4_ajhYU #) ->
                            case ipv4_ajhYU of { MArray ds3_ajhYX ->
                            case unsafeFreezeSmallArray# ds3_ajhYX ipv3_ajhYT of
                            { (# ipv5_ajhZ0, ipv6_ajhZ1 #) ->
                            (# ipv5_ajhZ0, Array ipv6_ajhZ1 #)
                            }
                            }
                            }
                            })
                  of
                  { (# ipv1_ajhZ4, ipv2_ajhZ5 #) ->
                  case ipv2_ajhZ5 of { Array dt3_aOGW ->
                  BitmapIndexed dt_ajhYr dt3_aOGW
                  }
                  };
                Leaf dt_ajhZ7 dt1_ajhZ8 dt2_ajhZ9 ->
                  Leaf dt_ajhZ7 dt1_ajhZ8 (applyE $dApply_alZe4 dt2_ajhZ9 es_alXgE);
                Full dt_ajhZi ->
                  case runRW#
                         (\ s1_ajhZD ->
                            let { ipv_sm4Ug = sizeofSmallArray# dt_ajhZi } in
                            case newSmallArray# ipv_sm4Ug undefinedElem s1_ajhZD of
                            { (# ipv1_ajhZF, ipv2_ajhZG #) ->
                            case $wgo1_smdZh
                                   (Array dt_ajhZi) (MArray ipv2_ajhZG) 0# ipv_sm4Ug ipv1_ajhZF
                            of
                            { (# ipv3_ajhZJ, ipv4_ajhZK #) ->
                            case ipv4_ajhZK of { MArray ds3_ajhZN ->
                            case unsafeFreezeSmallArray# ds3_ajhZN ipv3_ajhZJ of
                            { (# ipv5_ajhZQ, ipv6_ajhZR #) ->
                            (# ipv5_ajhZQ, Array ipv6_ajhZR #)
                            }
                            }
                            }
                            })
                  of
                  { (# ipv1_ajhZU, ipv2_ajhZV #) ->
                  $WFull ipv2_ajhZV
                  };
                Collision dt_aji04 dt1_aji05 ->
                  case runRW#
                         (\ s1_aji0u ->
                            let { ipv_sm4Uk = sizeofSmallArray# dt1_aji05 } in
                            case newSmallArray# ipv_sm4Uk undefinedElem s1_aji0u of
                            { (# ipv1_aji0w, ipv2_aji0x #) ->
                            case $wgo2_smdZ1
                                   (Array dt1_aji05) (MArray ipv2_aji0x) 0# ipv_sm4Uk ipv1_aji0w
                            of
                            { (# ipv3_aji0A, ipv4_aji0B #) ->
                            case ipv4_aji0B of { MArray ds3_aji0E ->
                            case unsafeFreezeSmallArray# ds3_aji0E ipv3_aji0A of
                            { (# ipv5_aji0H, ipv6_aji0I #) ->
                            (# ipv5_aji0H, Array ipv6_aji0I #)
                            }
                            }
                            }
                            })
                  of
                  { (# ipv1_aji0L, ipv2_aji0M #) ->
                  case ipv2_aji0M of { Array dt3_aOH9 ->
                  Collision dt_aji04 dt3_aOH9
                  }
                  }
              };
        $wgo1_smdZh
          = \ @ s_smdZ3 w_smdZ4 w1_smdZ5 ww_smdZb ww1_smdZf w2_smdZ8 ->
              case >=# ww_smdZb ww1_smdZf of {
                __DEFAULT ->
                  case w_smdZ4 of wild3_ajhZq { Array ds1_ajhZr ->
                  case indexSmallArray# ds1_ajhZr ww_smdZb of { (# ipv_ajhZu #) ->
                  case w1_smdZ5 of wild4_ajhZw { MArray ds3_ajhZx ->
                  case writeSmallArray#
                         ds3_ajhZx ww_smdZb (go1_sm4U8 ipv_ajhZu) w2_smdZ8
                  of s'_ajhZz
                  { __DEFAULT ->
                  $wgo1_smdZh
                    wild3_ajhZq wild4_ajhZw (+# ww_smdZb 1#) ww1_smdZf s'_ajhZz
                  }
                  }
                  }
                  };
                1# -> (# w2_smdZ8, w1_smdZ5 #)
              };
        $wgo3_smdZw
          = \ @ s_smdZi w_smdZj w1_smdZk ww_smdZq ww1_smdZu w2_smdZn ->
              case >=# ww_smdZq ww1_smdZu of {
                __DEFAULT ->
                  case w_smdZj of wild3_ajhYA { Array ds1_ajhYB ->
                  case indexSmallArray# ds1_ajhYB ww_smdZq of { (# ipv_ajhYE #) ->
                  case w1_smdZk of wild4_ajhYG { MArray ds3_ajhYH ->
                  case writeSmallArray#
                         ds3_ajhYH ww_smdZq (go1_sm4U8 ipv_ajhYE) w2_smdZn
                  of s'_ajhYJ
                  { __DEFAULT ->
                  $wgo3_smdZw
                    wild3_ajhYA wild4_ajhYG (+# ww_smdZq 1#) ww1_smdZu s'_ajhYJ
                  }
                  }
                  }
                  };
                1# -> (# w2_smdZn, w1_smdZk #)
              }; } in
      go1_sm4U8 x_alXgD

-- RHS size: {terms: 8, types: 13, coercions: 0, joins: 0/0}
$fApplyHashMap
  = \ @ v_alZe2 @ k_alZe3 $dApply_alZe4 ->
      C:Apply
        ($fApplyHashMap_$capply $dApply_alZe4)
        ($fApplyHashMap_$capplyE $dApply_alZe4)

-- RHS size: {terms: 31, types: 42, coercions: 0, joins: 0/1}
$fApplyCase_$capplyE2
  = \ @ v_alZer @ k_alZes $dApply_alZet x_alXgJ es_alXgK ->
      letrec {
        go15_a15wV
          = \ ds_a15wW ->
              case ds_a15wW of {
                Bin dt_a15wY kx_a15wZ x1_a15x0 l_a15x1 r_a15x2 ->
                  case go15_a15wV l_a15x1 of dt1_a15x4 { __DEFAULT ->
                  case go15_a15wV r_a15x2 of dt2_a15x5 { __DEFAULT ->
                  Bin
                    dt_a15wY
                    kx_a15wZ
                    (applyE $dApply_alZet x1_a15x0 es_alXgK)
                    dt1_a15x4
                    dt2_a15x5
                  }
                  };
                Tip -> Tip
              }; } in
      go15_a15wV x_alXgJ

-- RHS size: {terms: 17, types: 14, coercions: 0, joins: 0/0}
$fApplyMaybe_$capply
  = \ @ t_alZeQ $dApply_alZeR x_alXgM args_alXgN ->
      case x_alXgM of {
        Nothing -> Nothing;
        Just x1_aRy5 ->
          case apply $dApply_alZeR x1_aRy5 args_alXgN of dt_aRy7
          { __DEFAULT ->
          Just dt_aRy7
          }
      }

-- RHS size: {terms: 17, types: 14, coercions: 0, joins: 0/0}
$fApplyMaybe_$capplyE
  = \ @ t_alZeQ $dApply_alZeR x_alXgO es_alXgP ->
      case x_alXgO of {
        Nothing -> Nothing;
        Just x1_aRy5 ->
          case applyE $dApply_alZeR x1_aRy5 es_alXgP of dt_aRy7
          { __DEFAULT ->
          Just dt_aRy7
          }
      }

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fApplyMaybe
  = \ @ t_alZeQ $dApply_alZeR ->
      C:Apply
        ($fApplyMaybe_$capply $dApply_alZeR)
        ($fApplyMaybe_$capplyE $dApply_alZeR)

-- RHS size: {terms: 20, types: 21, coercions: 0, joins: 0/0}
$fApplyBlocked'_$capply
  = \ @ t_alZfC $dApply_alZfD b_alXgW args_alXgX ->
      case b_alXgW of {
        Blocked a1_a8Cal a2_a8Cam ->
          Blocked a1_a8Cal (apply $dApply_alZfD a2_a8Cam args_alXgX);
        NotBlocked a1_a8Cap a2_a8Caq ->
          NotBlocked a1_a8Cap (apply $dApply_alZfD a2_a8Caq args_alXgX)
      }

-- RHS size: {terms: 20, types: 21, coercions: 0, joins: 0/0}
$fApplyBlocked'_$capplyE
  = \ @ t_alZfC $dApply_alZfD b_alXgY es_alXgZ ->
      case b_alXgY of {
        Blocked a1_a8Cal a2_a8Cam ->
          Blocked a1_a8Cal (applyE $dApply_alZfD a2_a8Cam es_alXgZ);
        NotBlocked a1_a8Cap a2_a8Caq ->
          NotBlocked a1_a8Cap (applyE $dApply_alZfD a2_a8Caq es_alXgZ)
      }

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fApplyBlocked'
  = \ @ t_alZfC $dApply_alZfD ->
      C:Apply
        ($fApplyBlocked'_$capply $dApply_alZfD)
        ($fApplyBlocked'_$capplyE $dApply_alZfD)

-- RHS size: {terms: 11, types: 11, coercions: 0, joins: 0/0}
$fApply[]_$capply
  = \ @ t_alZg0 $dApply_alZg1 ts_alXh1 args_alXh2 ->
      map
        (\ ds_dm29H -> apply $dApply_alZg1 ds_dm29H args_alXh2) ts_alXh1

-- RHS size: {terms: 11, types: 11, coercions: 0, joins: 0/0}
$fApply[]_$capplyE
  = \ @ t_alZg0 $dApply_alZg1 ts_alXh3 es_alXh4 ->
      map (\ ds_dm29L -> applyE $dApply_alZg1 ds_dm29L es_alXh4) ts_alXh3

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fApply[]
  = \ @ t_alZg0 $dApply_alZg1 ->
      C:Apply
        ($fApply[]_$capply $dApply_alZg1)
        ($fApply[]_$capplyE $dApply_alZg1)

-- RHS size: {terms: 13, types: 13, coercions: 0, joins: 0/0}
$fApplyCase_$capplyE3
  = \ @ a_alZiZ $dApply_alZj0 ds_dm2bq es_alXi6 ->
      case ds_dm2bq of { WithArity n_alXi4 a1_alXi5 ->
      WithArity n_alXi4 (applyE $dApply_alZj0 a1_alXi5 es_alXi6)
      }

-- RHS size: {terms: 71, types: 134, coercions: 0, joins: 0/1}
$w$capplyE
  = \ @ a_smdZR
      w_smdZS
      ww_smdZX
      ww1_smdZY
      ww2_smdZZ
      ww3_sme00
      ww4_sme01
      ww5_sme02
      ww6_sme03
      w1_smdZU ->
      (# ww_smdZX,
         letrec {
           go15_a15wV
             = \ ds_a15wW ->
                 case ds_a15wW of {
                   Bin dt_a15wY kx_a15wZ x_a15x0 l_a15x1 r_a15x2 ->
                     case go15_a15wV l_a15x1 of dt1_a15x4 { __DEFAULT ->
                     case go15_a15wV r_a15x2 of dt2_a15x5 { __DEFAULT ->
                     Bin
                       dt_a15wY
                       kx_a15wZ
                       ($fApplyCase_$capplyE3 w_smdZS x_a15x0 w1_smdZU)
                       dt1_a15x4
                       dt2_a15x5
                     }
                     };
                   Tip -> Tip
                 }; } in
         go15_a15wV ww1_smdZY,
         case ww2_smdZZ of {
           Nothing -> Nothing;
           Just a1_anJk ->
             Just
               (case a1_anJk of { (x_a6yUa, y_a6yUb) -> x_a6yUa },
                case a1_anJk of { (x_a6yUe, y_a6yUf) ->
                case y_a6yUf of { WithArity n_alXi4 a2_alXi5 ->
                WithArity n_alXi4 (applyE w_smdZS a2_alXi5 w1_smdZU)
                }
                })
         },
         $fApplyCase_$capplyE2 w_smdZS ww3_sme00 w1_smdZU,
         $fApplyCase_$capplyE1 w_smdZS ww4_sme01 w1_smdZU, ww5_sme02,
         ww6_sme03 #)

-- RHS size: {terms: 27, types: 73, coercions: 0, joins: 0/0}
$fApplyCase_$capplyE
  = \ @ a_smdZR w_smdZS w1_smdZT w2_smdZU ->
      case w1_smdZT of
      { Branches ww1_smdZX ww2_smdZY ww3_smdZZ ww4_sme00 ww5_sme01
                 ww6_sme02 ww7_sme03 ->
      case $w$capplyE
             w_smdZS
             ww1_smdZX
             ww2_smdZY
             ww3_smdZZ
             ww4_sme00
             ww5_sme01
             ww6_sme02
             ww7_sme03
             w2_smdZU
      of
      { (# ww9_smeoc, ww10_smeod, ww11_smeoe, ww12_smeof, ww13_smeog,
           ww14_smeoh, ww15_smeoi #) ->
      Branches
        ww9_smeoc
        ww10_smeod
        ww11_smeoe
        ww12_smeof
        ww13_smeog
        ww14_smeoh
        ww15_smeoi
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl208_rmk4f = I# 490#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl209_rmk4g
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl208_rmk4f
      lvl7_rmk0t
      lvl208_rmk4f
      lvl8_rmk0u

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl210_rmk4h = PushCallStack lvl1_rmk0n lvl209_rmk4g EmptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
$fApplyCompiledClauses'1
  = __IMPOSSIBLE__ (lvl210_rmk4h `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl211_rmk4i = I# 487#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl212_rmk4j = I# 22#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl213_rmk4k = I# 36#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl214_rmk4l
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl211_rmk4i
      lvl212_rmk4j
      lvl211_rmk4i
      lvl213_rmk4k

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl215_rmk4m = PushCallStack lvl1_rmk0n lvl214_rmk4l EmptyCallStack

-- RHS size: {terms: 2, types: 2, coercions: 4, joins: 0/0}
lvl216_rmk4n = __IMPOSSIBLE__ (lvl215_rmk4m `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl217_rmk4o = I# 484#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl218_rmk4p
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl217_rmk4o
      lvl212_rmk4j
      lvl217_rmk4o
      lvl213_rmk4k

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl219_rmk4q = PushCallStack lvl1_rmk0n lvl218_rmk4p EmptyCallStack

-- RHS size: {terms: 2, types: 2, coercions: 4, joins: 0/0}
lvl220_rmk4r = __IMPOSSIBLE__ (lvl219_rmk4q `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl221_rmk4s = I# 1186#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl222_rmk4t = I# 14#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl223_rmk4u
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl221_rmk4s
      lvl222_rmk4t
      lvl221_rmk4s
      loc4_rmk1H

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl224_rmk4v = PushCallStack lvl1_rmk0n lvl223_rmk4u EmptyCallStack

-- RHS size: {terms: 2, types: 2, coercions: 4, joins: 0/0}
lvl225_rmk4w = __IMPOSSIBLE__ (lvl224_rmk4v `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl226_rmk4x = I# 969#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl227_rmk4y = I# 27#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl228_rmk4z = I# 41#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl229_rmk4A
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl226_rmk4x
      lvl227_rmk4y
      lvl226_rmk4x
      lvl228_rmk4z

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl230_rmk4B = PushCallStack lvl1_rmk0n lvl229_rmk4A EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl231_rmk4C = __IMPOSSIBLE__ (lvl230_rmk4B `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl232_rmk4D = I# 968#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl233_rmk4E
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl232_rmk4D
      lvl227_rmk4y
      lvl232_rmk4D
      lvl228_rmk4z

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl234_rmk4F = PushCallStack lvl1_rmk0n lvl233_rmk4E EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl235_rmk4G = __IMPOSSIBLE__ (lvl234_rmk4F `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl236_rmk4H = I# 967#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl237_rmk4I
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl236_rmk4H
      lvl227_rmk4y
      lvl236_rmk4H
      lvl228_rmk4z

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl238_rmk4J = PushCallStack lvl1_rmk0n lvl237_rmk4I EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl239_rmk4K = __IMPOSSIBLE__ (lvl238_rmk4J `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl240_rmk4L = I# 966#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl241_rmk4M
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl240_rmk4L
      lvl227_rmk4y
      lvl240_rmk4L
      lvl228_rmk4z

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl242_rmk4N = PushCallStack lvl1_rmk0n lvl241_rmk4M EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl243_rmk4O = __IMPOSSIBLE__ (lvl242_rmk4N `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl244_rmk4P = I# 965#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl245_rmk4Q
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl244_rmk4P
      lvl227_rmk4y
      lvl244_rmk4P
      lvl228_rmk4z

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl246_rmk4R = PushCallStack lvl1_rmk0n lvl245_rmk4Q EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl247_rmk4S = __IMPOSSIBLE__ (lvl246_rmk4R `cast` <Co:4>)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fApplyBraveTerm3 = "applyE"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fApplyBraveTerm2 = unpackCString# $fApplyBraveTerm3

-- RHS size: {terms: 11, types: 7, coercions: 0, joins: 0/0}
$fApplyBraveTerm1
  = \ _ t_alXlw es_alXlx ->
      Dummy
        $fApplyBraveTerm2 (: (Apply (Arg defaultArgInfo t_alXlw)) es_alXlx)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$mLargeSort1 = 0

-- RHS size: {terms: 42, types: 32, coercions: 0, joins: 0/0}
$wlevelTm
  = \ ww_sme0e ww1_sme0f ->
      case eqInteger# ww_sme0e $mLargeSort1 of {
        __DEFAULT -> Level (Max ww_sme0e ww1_sme0f);
        1# ->
          case ww1_sme0f of wild2_X5g {
            [] -> Level (Max ww_sme0e []);
            : ds_dlZSH ds1_dlZSI ->
              case ds_dlZSH of { Plus ds2_dlZSJ l_alXrH ->
              case eqInteger# ds2_dlZSJ $mLargeSort1 of {
                __DEFAULT -> Level (Max ww_sme0e wild2_X5g);
                1# ->
                  case ds1_dlZSI of {
                    [] -> l_alXrH;
                    : ipv_sm30V ipv1_sm30W -> Level (Max ww_sme0e wild2_X5g)
                  }
              }
              }
          }
      }

-- RHS size: {terms: 7, types: 6, coercions: 0, joins: 0/0}
levelTm
  = \ w_sme0b ->
      case w_sme0b of { Max ww1_sme0e ww2_sme0f ->
      $wlevelTm ww1_sme0e ww2_sme0f
      }

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
$bSmallSort = \ u_alXq8 -> SizeOfSort u_alXq8 $bSmallSort1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
sizeOfSort5 = SizeOfSort UType $bSmallSort1

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
sizeOfSort4 = Right sizeOfSort5

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
sizeOfSort3 = SizeOfSort USSet $bSmallSort1

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
sizeOfSort2 = Right sizeOfSort3

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
sizeOfSort1 = Left neverUnblock

-- RHS size: {terms: 37, types: 39, coercions: 0, joins: 0/0}
sizeOfSort
  = \ ds_dlZVc ->
      case ds_dlZVc of {
        Univ u_alXqg ds1_dlZXN -> Right (SizeOfSort u_alXqg $bSmallSort1);
        Inf u_alXqh n_alXqi -> Right (SizeOfSort u_alXqh n_alXqi);
        SizeUniv -> sizeOfSort4;
        LockUniv -> sizeOfSort4;
        LevelUniv -> sizeOfSort4;
        IntervalUniv -> sizeOfSort2;
        PiSort ds1_dlZXR ds2_dlZXS ds3_dlZXT -> sizeOfSort1;
        FunSort ds1_dlZXP ds2_dlZXQ -> sizeOfSort1;
        UnivSort ds1_dlZXU -> sizeOfSort1;
        MetaS dt_dm2Hq dt1_dm2Hr ds1_dlZXO ->
          Left (UnblockOnMeta (MetaId dt_dm2Hq dt1_dm2Hr));
        DefS ds1_dlZXV ds2_dlZXW -> sizeOfSort1;
        DummyS ds1_dlZXX -> sizeOfSort1
      }

-- RHS size: {terms: 17, types: 11, coercions: 0, joins: 0/0}
isSmallSort
  = \ s_alXqk ->
      case sizeOfSort s_alXqk of {
        Left ipv_sm30H -> False;
        Right ds_dlZYn ->
          case ds_dlZYn of { SizeOfSort u_alXq8 ds1_dlZV9 ->
          case eqInteger# ds1_dlZV9 $bSmallSort1 of wild3_aks4 { __DEFAULT ->
          tagToEnum# wild3_aks4
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
univSort'5 = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
univSort'9 = Inf UType $mLargeSort1

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
univSort'8 = Right univSort'9

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
univSort'4 = Max univSort'5 []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
univSort'7 = Univ UType univSort'4

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
univSort'6 = Right univSort'7

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
univSort'3 = Univ USSet univSort'4

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
univSort'2 = Right univSort'3

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
univSort'1 = Left neverUnblock

-- RHS size: {terms: 60, types: 55, coercions: 0, joins: 0/0}
univSort'
  = \ ds_dm0dk ->
      case ds_dm0dk of {
        Univ u_alXq0 l_alXq1 ->
          Right
            (Univ
               (case u_alXq0 of {
                  __DEFAULT -> UType;
                  USSet -> USSet
                })
               (case l_alXq1 of { Max ww1_s92eA ww2_s92eB ->
                case plusInteger levelSuc1 ww1_s92eA of dt_X8L3Y { __DEFAULT ->
                Max dt_X8L3Y (map univSort'10 ww2_s92eB)
                }
                }));
        Inf u_alXq2 n_alXq3 ->
          Right
            (case plusInteger univSort'5 n_alXq3 of dt_X8Lr4 { __DEFAULT ->
             Inf
               (case u_alXq2 of {
                  __DEFAULT -> UType;
                  USSet -> USSet
                })
               dt_X8Lr4
             });
        SizeUniv -> univSort'8;
        LockUniv -> univSort'6;
        LevelUniv -> univSort'6;
        IntervalUniv -> univSort'2;
        PiSort ds1_dm0fa ds2_dm0fb ds3_dm0fc -> univSort'1;
        FunSort ds1_dm0f8 ds2_dm0f9 -> univSort'1;
        UnivSort ds1_dm0fd -> univSort'1;
        MetaS dt_dm2Hw dt1_dm2Hx ds1_dm0f7 -> univSort'1;
        DefS ds1_dm0fe ds2_dm0ff -> univSort'1;
        DummyS ds1_dm0fg -> univSort'1
      }

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
univSort
  = \ s_alXq5 ->
      case univSort' s_alXq5 of {
        Left x_acvT -> UnivSort s_alXq5;
        Right y_acvV -> y_acvV
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
sort = \ s_alXq6 -> El (univSort s_alXq6) (Sort s_alXq6)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl248_rmk4T = I# 1674#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl249_rmk4U = I# 58#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl250_rmk4V
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl248_rmk4T
      lvl86_rmk1T
      lvl248_rmk4T
      lvl249_rmk4U

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl251_rmk4W = PushCallStack lvl1_rmk0n lvl250_rmk4V EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl252_rmk4X = __IMPOSSIBLE__ (lvl251_rmk4W `cast` <Co:4>)

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
lvl253_rmk4Y = Strengthen lvl252_rmk4X 1# IdS

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc5_rmk4Z = I# 1684#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc6_rmk50 = I# 8#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
$dIP4_rmk51
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      loc5_rmk4Z
      loc6_rmk50
      loc5_rmk4Z
      lvl212_rmk4j

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
$dIP5_rmk52 = PushCallStack lvl1_rmk0n $dIP4_rmk51 EmptyCallStack

-- RHS size: {terms: 138, types: 145, coercions: 0, joins: 3/5}
canProject
  = \ f4_alXmh v_alXmi ->
      case v_alXmi of {
        __DEFAULT -> Nothing;
        Con ds_dm0uU ds1_dm0uV vs_alXmk ->
          case ds_dm0uU of
          { ConHead ds2_dm0uW ds3_dm0uX ds4_dm0uY fs_alXmj ->
          join {
            exit_XfC ipv2_im2W4 ds5_d3o6D
              = case ds5_d3o6D of
                { ArgInfo ww1_sme0C ww2_sme0D ww3_sme0K ww4_sme0L ww5_sme0M ->
                case ww2_sme0D of { Modality ww7_sme0G ww8_sme0H ww9_sme0I ->
                case ww7_sme0G of wild3_X12X {
                  __DEFAULT ->
                    case ipv2_im2W4 of { I# x_a1SZ ->
                    let { fld_smeBa = Modality wild3_X12X ww8_sme0H ww9_sme0I } in
                    let {
                      fld1_smeBb
                        = ArgInfo ww1_sme0C fld_smeBa ww3_sme0K ww4_sme0L ww5_sme0M } in
                    join {
                      $j_sm5w8 x1_XHPH
                        = case x1_XHPH of {
                            Apply u_a8AdB ->
                              Just
                                (case u_a8AdB of { Arg ds6_d3pi4 ds7_d3pi5 ->
                                 Arg fld1_smeBb ds7_d3pi5
                                 });
                            Proj ds6_d8Aud ds7_d8Aue -> Nothing;
                            IApply ds6_d8Auf ds7_d8Aug r_a8AdC -> Just (Arg fld1_smeBb r_a8AdC)
                          } } in
                    case <=# x_a1SZ 0# of {
                      __DEFAULT ->
                        case $wunsafeDrop x_a1SZ vs_alXmk of {
                          [] -> Nothing;
                          : y_a1RC ys_a1RD -> jump $j_sm5w8 y_a1RC
                        };
                      1# ->
                        case vs_alXmk of {
                          [] -> Nothing;
                          : y_a1RC ys_a1RD -> jump $j_sm5w8 y_a1RC
                        }
                    }
                    };
                  Irrelevant -> Nothing
                }
                }
                } } in
          joinrec {
            go_sm4P1 ds5_im2VX _ys_im2VY
              = case ds5_im2VX of {
                  [] -> Nothing;
                  : ipv_im2W0 ipv1_im2W1 ->
                    case _ys_im2VY of {
                      [] -> Nothing;
                      : ipv2_im2W4 ipv3_im2W5 ->
                        case f4_alXmh of { QName ds6_d6aXk ds7_d6aXl ->
                        case ds7_d6aXl of
                        { Name ds8_d6aXp ds9_d6aXq ds10_d6aXr ds11_d6aXs ds12_d6aXt
                               ds13_d6aXu ->
                        case ds8_d6aXp of { NameId dt_smhCg dt1_smhCh ->
                        case ipv_im2W0 of { Arg ds14_d3o6D ds15_d3o6E ->
                        case ds15_d3o6E of { QName ds16_X6baj ds17_X6bal ->
                        case ds17_X6bal of
                        { Name ds18_X6bau ds19_X6baw ds20_X6bay ds21_X6baA ds22_X6baC
                               ds23_X6baE ->
                        case ds18_X6bau of { NameId dt2_smhCk dt3_smhCl ->
                        case eqWord# dt_smhCg dt2_smhCk of {
                          __DEFAULT -> jump go_sm4P1 ipv1_im2W1 ipv3_im2W5;
                          1# ->
                            case eqWord# dt1_smhCh dt3_smhCl of {
                              __DEFAULT -> jump go_sm4P1 ipv1_im2W1 ipv3_im2W5;
                              1# -> jump exit_XfC ipv2_im2W4 ds14_d3o6D
                            }
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                }; } in
          jump go_sm4P1 fs_alXmj findWithIndex2
          }
      }

-- RHS size: {terms: 14, types: 13, coercions: 0, joins: 0/0}
$fApplyCase_$capply1
  = \ @ t_alZfe $dApply_alZff x_alXgR args_alXgS ->
      case x_alXgR of {
        Nothing -> Nothing;
        Just a1_anJk -> Just (apply $dApply_alZff a1_anJk args_alXgS)
      }

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fApplyMaybe0
  = \ @ t_alZfe $dApply_alZff ->
      C:Apply
        ($fApplyCase_$capply1 $dApply_alZff)
        ($fApplyCase_$capplyE1 $dApply_alZff)

-- RHS size: {terms: 44, types: 69, coercions: 13, joins: 0/0}
$fSubstDom'_$capplySubst
  = \ @ a_sme0X
      @ b_sme0Y
      w_sme0Z
      w1_sme10
      w2_sme11
      w3_sme12
      w4_sme13 ->
      case w2_sme11 of { Eq# ww1_sme16 ->
      case w4_sme13 of ww2_sme19
      { Dom ww3_sme1a ww4_sme1b ww5_sme1c ww6_sme1d ww7_sme1e ->
      case w3_sme12 of wild1_Xg0 {
        __DEFAULT ->
          Dom
            (case ww3_sme1a of
             { ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U ds8_d3o7V ds9_d3o7W ->
             ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U UnknownFVs ds9_d3o7W
             })
            ww4_sme1b
            ww5_sme1c
            (case ww6_sme1d of {
               Nothing -> Nothing;
               Just a1_anJk ->
                 Just (applySubst w_sme0Z (wild1_Xg0 `cast` <Co:5>) a1_anJk)
             })
            (applySubst w1_sme10 (wild1_Xg0 `cast` <Co:8>) ww7_sme1e);
        IdS -> ww2_sme19
      }
      }
      }

-- RHS size: {terms: 16, types: 18, coercions: 4, joins: 0/1}
$fSubstMaybe_$capplySubst
  = \ @ a_alYOy $dSubst1_alYOz rho_add8H ->
      let {
        ds_sm4Pd = applySubst $dSubst1_alYOz (rho_add8H `cast` <Co:4>) } in
      \ ds1_anJi ->
        case ds1_anJi of {
          Nothing -> Nothing;
          Just a1_anJk -> Just (ds_sm4Pd a1_anJk)
        }

-- RHS size: {terms: 7, types: 8, coercions: 4, joins: 0/0}
$fSubstMaybe
  = \ @ a_alYOy $dSubst1_alYOz ->
      C:Subst
        (($p1Subst $dSubst1_alYOz) `cast` <Co:4>)
        ($fSubstMaybe_$capplySubst $dSubst1_alYOz)

-- RHS size: {terms: 1, types: 4, coercions: 1, joins: 0/0}
$d~_rmk53 = Eq# @~ <Co:1>

-- RHS size: {terms: 26, types: 26, coercions: 4, joins: 0/0}
$fSubstArg_$capplySubst
  = \ @ a_alYQ2 $dSubst1_alYQ3 ds_dm1zh arg_alXam ->
      case ds_dm1zh of wild1_XeQ {
        __DEFAULT ->
          case arg_alXam of { Arg a1_a3gXn a2_a3gXo ->
          Arg
            (case a1_a3gXn of
             { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
             ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
             })
            (applySubst $dSubst1_alYQ3 (wild1_XeQ `cast` <Co:4>) a2_a3gXo)
          };
        IdS -> arg_alXam
      }

-- RHS size: {terms: 28, types: 25, coercions: 21, joins: 0/0}
$fSubstElim'_$capplySubst
  = \ @ a_alYQP $dSubst1_alYQQ rho_alXax ds_dm1Ar ->
      case ds_dm1Ar of wild1_XeU {
        Apply v_alXay ->
          Apply
            ($fSubstArg_$capplySubst
               $dSubst1_alYQQ (rho_alXax `cast` <Co:9>) v_alXay);
        Proj ds1_dm1AZ ds2_dm1B0 -> wild1_XeU;
        IApply x_alXaz y_alXaA r_alXaB ->
          IApply
            (applySubst $dSubst1_alYQQ (rho_alXax `cast` <Co:4>) x_alXaz)
            (applySubst $dSubst1_alYQQ (rho_alXax `cast` <Co:4>) y_alXaA)
            (applySubst $dSubst1_alYQQ (rho_alXax `cast` <Co:4>) r_alXaB)
      }

-- RHS size: {terms: 7, types: 8, coercions: 4, joins: 0/0}
$fSubstElim'
  = \ @ a_alYQP $dSubst1_alYQQ ->
      C:Subst
        (($p1Subst $dSubst1_alYQQ) `cast` <Co:4>)
        ($fSubstElim'_$capplySubst $dSubst1_alYQQ)

-- RHS size: {terms: 7, types: 8, coercions: 4, joins: 0/0}
$fSubstArg
  = \ @ a_alYQ2 $dSubst1_alYQ3 ->
      C:Subst
        (($p1Subst $dSubst1_alYQ3) `cast` <Co:4>)
        ($fSubstArg_$capplySubst $dSubst1_alYQ3)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl254_rmk54 = I# 944#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl255_rmk55
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl254_rmk54
      loc1_rmk1f
      lvl254_rmk54
      lvl30_rmk0Q

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl256_rmk56 = PushCallStack lvl1_rmk0n lvl255_rmk55 EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
$fApplyRewriteRule3 = __IMPOSSIBLE__ (lvl256_rmk56 `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl257_rmk57 = I# 943#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl258_rmk58
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl257_rmk57
      loc1_rmk1f
      lvl257_rmk57
      lvl30_rmk0Q

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl259_rmk59 = PushCallStack lvl1_rmk0n lvl258_rmk58 EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
$fApplyRewriteRule4 = __IMPOSSIBLE__ (lvl259_rmk59 `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl260_rmk5a = I# 942#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl261_rmk5b
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl260_rmk5a
      loc1_rmk1f
      lvl260_rmk5a
      lvl30_rmk0Q

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl262_rmk5c = PushCallStack lvl1_rmk0n lvl261_rmk5b EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
$fApplyRewriteRule5 = __IMPOSSIBLE__ (lvl262_rmk5c `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl263_rmk5d = I# 941#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl264_rmk5e
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl263_rmk5d
      loc1_rmk1f
      lvl263_rmk5d
      lvl30_rmk0Q

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl265_rmk5f = PushCallStack lvl1_rmk0n lvl264_rmk5e EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
$fApplyRewriteRule6 = __IMPOSSIBLE__ (lvl265_rmk5f `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl266_rmk5g = I# 940#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl267_rmk5h
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl266_rmk5g
      loc1_rmk1f
      lvl266_rmk5g
      lvl30_rmk0Q

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl268_rmk5i = PushCallStack lvl1_rmk0n lvl267_rmk5h EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
$fApplyRewriteRule7 = __IMPOSSIBLE__ (lvl268_rmk5i `cast` <Co:4>)

-- RHS size: {terms: 9, types: 8, coercions: 0, joins: 0/0}
$fApplyRewriteRule8
  = \ x_X24w ->
      Apply
        (case x_X24w of { Arg a1_a3gXn a2_a3gXo ->
         Arg a1_a3gXn (var a2_a3gXo)
         })

-- RHS size: {terms: 21, types: 23, coercions: 0, joins: 0/0}
$fApplyRewriteRule2
  = \ ds_dm0mC ->
      case ds_dm0mC of {
        PVar dt_dm2Hy xs_alXo7 ->
          Var dt_dm2Hy (map $fApplyRewriteRule8 xs_alXo7);
        PDef f4_alXo9 es_alXoa -> $fApplyRewriteRule7;
        PLam i_alXob u_alXoc -> $fApplyRewriteRule6;
        PPi a_alXod b_alXoe -> $fApplyRewriteRule5;
        PSort s_alXof -> $fApplyRewriteRule4;
        PBoundVar dt_dm2Hz es_alXoh -> $fApplyRewriteRule3;
        PTerm u_alXo8 -> u_alXo8
      }

-- RHS size: {terms: 8, types: 19, coercions: 4, joins: 0/0}
$wapplyNLPatSubst
  = \ @ a_sme1s ww_sme1B ww1_sme1G w_sme1u ->
      ww_sme1B
        (($fFunctorSubstitution'_$cfmap $fApplyRewriteRule2 w_sme1u)
         `cast` <Co:4>)

-- RHS size: {terms: 15, types: 41, coercions: 1, joins: 0/0}
applyNLPatSubst
  = \ @ a_sme1s w_sme1t w1_sme1u ->
      case w_sme1t of { (ww1_sme1x, ww2_sme1D) ->
      case ww1_sme1x of { C:Subst ww4_sme1A ww5_sme1B ->
      case ww2_sme1D of { Eq# ww7_sme1G ->
      $wapplyNLPatSubst ww5_sme1B @~ <Co:1> w1_sme1u
      }
      }
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$fDeBruijnBraveTerm1 = \ _ -> var

-- RHS size: {terms: 17, types: 14, coercions: 1, joins: 0/0}
$fDeBruijnBraveTerm_$cdeBruijnView
  = \ x_X21N ->
      case x_X21N `cast` <Co:1> of {
        __DEFAULT -> Nothing;
        Var dt_d9raB ds_d9ray ->
          case ds_d9ray of {
            [] -> Just (I# dt_d9raB);
            : ipv_s9raH ipv1_s9raI -> Nothing
          };
        Level l_a9r4N -> $fDeBruijnLevel'_$cdeBruijnView l_a9r4N
      }

-- RHS size: {terms: 4, types: 1, coercions: 10, joins: 0/0}
$fDeBruijnBraveTerm
  = C:DeBruijn
      (var `cast` <Co:4>)
      ($fDeBruijnBraveTerm1 `cast` <Co:6>)
      $fDeBruijnBraveTerm_$cdeBruijnView

-- RHS size: {terms: 17, types: 17, coercions: 0, joins: 0/0}
argToDontCare
  = \ ds_dm0s4 ->
      case ds_dm0s4 of { Arg ai_alXn7 v_alXn8 ->
      case ai_alXn7 of
      { ArgInfo ds1_d3o6M ds2_d3o6N ds3_d3o6O ds4_d3o6P ds5_d3o6Q ->
      case ds2_d3o6N of { Modality ds6_d3o7g ds7_d3o7h ds8_d3o7i ->
      case ds6_d3o7g of {
        __DEFAULT -> v_alXn8;
        Irrelevant -> dontCare v_alXn8
      }
      }
      }
      }

-- RHS size: {terms: 51, types: 36, coercions: 0, joins: 0/0}
$w$c==1
  = \ @ a_sme1L w_sme1N w1_sme1O w2_sme1P ->
      case w1_sme1O of {
        Apply a1_alX7c ->
          case w2_sme1P of {
            __DEFAULT -> False;
            Apply b_alX7d -> $fEqArg_$c==5 w_sme1N a1_alX7c b_alX7d
          };
        Proj ds_dm0Yo x_alX7e ->
          case w2_sme1P of {
            __DEFAULT -> False;
            Proj ds1_dm0Yp y_alX7f -> $fEqQName_$c== x_alX7e y_alX7f
          };
        IApply x_alX7g y_alX7h r_alX7i ->
          case w2_sme1P of {
            __DEFAULT -> False;
            IApply x'_alX7j y'_alX7k r'_alX7l ->
              case == w_sme1N x_alX7g x'_alX7j of {
                False -> False;
                True ->
                  case == w_sme1N y_alX7h y'_alX7k of {
                    False -> False;
                    True -> == w_sme1N r_alX7i r'_alX7l
                  }
              }
          }
      }

-- RHS size: {terms: 9, types: 11, coercions: 0, joins: 0/0}
$fEqElim'_$c==
  = \ @ a_sme1L _ w1_sme1N w2_sme1O w3_sme1P ->
      $w$c==1 w1_sme1N w2_sme1O w3_sme1P

-- RHS size: {terms: 14, types: 12, coercions: 0, joins: 0/0}
$fEqElim'_$c/=
  = \ @ a_alYCR _ $dEq2_alYCT eta1_B2 eta2_B1 ->
      case $w$c==1 $dEq2_alYCT eta1_B2 eta2_B1 of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
$fEqElim'
  = \ @ a_alYCR $dSubst1_alYCS $dEq2_alYCT ->
      C:Eq
        (\ w_sme1O w1_sme1P -> $w$c==1 $dEq2_alYCT w_sme1O w1_sme1P)
        ($fEqElim'_$c/= $dSubst1_alYCS $dEq2_alYCT)

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fOrdElim'_$cp1Ord
  = \ @ a_alYBQ $dSubst1_alYBR $dOrd_alYBS ->
      $fEqElim' $dSubst1_alYBR ($p1Ord $dOrd_alYBS)

-- RHS size: {terms: 17, types: 11, coercions: 0, joins: 0/0}
$w$mLargeSort
  = \ @ rep_sme1R @ r_sme1S ww_sme1Y ww1_sme1Z w_sme1U w1_sme1V ->
      case geInteger# ww1_sme1Z $mLargeSort1 of {
        __DEFAULT -> w1_sme1V void#;
        1# -> w_sme1U ww_sme1Y ww1_sme1Z
      }

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
$mLargeSort
  = \ @ rep_sme1R @ r_sme1S w_sme1T w1_sme1U w2_sme1V ->
      case w_sme1T of { SizeOfSort ww1_sme1Y ww2_sme1Z ->
      $w$mLargeSort ww1_sme1Y ww2_sme1Z w1_sme1U w2_sme1V
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl269_rmk5j = I# 1166#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl270_rmk5k = I# 16#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl271_rmk5l
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl269_rmk5j
      lvl270_rmk5k
      lvl269_rmk5j
      lvl85_rmk1S

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl272_rmk5m = PushCallStack lvl1_rmk0n lvl271_rmk5l EmptyCallStack

-- RHS size: {terms: 3, types: 4, coercions: 4, joins: 0/0}
usePatternInfo1
  = \ @ a_alY8z -> __IMPOSSIBLE__ (lvl272_rmk5m `cast` <Co:4>)

-- RHS size: {terms: 95, types: 109, coercions: 0, joins: 1/1}
usePatternInfo
  = \ @ a_alY8z i_XlXAn p_XlXAp ->
      join {
        $j_sm5va ds_dm0lO
          = case ds_dm0lO of {
              __DEFAULT ->
                case p_XlXAp of {
                  VarP ds1_dm0ls x_alXop -> VarP i_XlXAn x_alXop;
                  DotP ds1_dm0lt u_alXoq -> DotP i_XlXAn u_alXoq;
                  ConP c_alXor ds1_dm0lu ps_alXow ->
                    case ds1_dm0lu of
                    { ConPatternInfo ds2_dm0lv r_alXos ft_alXot b_alXou l_alXov ->
                    ConP
                      c_alXor
                      (ConPatternInfo i_XlXAn r_alXos ft_alXot b_alXou l_alXov)
                      ps_alXow
                    };
                  LitP ds1_dm0lx l_alXoz -> LitP i_XlXAn l_alXoz;
                  ProjP ds1_dm0ly ds2_dm0lz -> usePatternInfo1;
                  IApplyP ds1_dm0lA t_alXoA u_alXoB x_alXoC ->
                    IApplyP i_XlXAn t_alXoA u_alXoB x_alXoC;
                  DefP ds1_dm0lw q_alXox ps_alXoy -> DefP i_XlXAn q_alXox ps_alXoy
                };
              PatOSplit -> p_XlXAp;
              PatOAbsurd -> p_XlXAp
            } } in
      case p_XlXAp of wild1_XJr {
        VarP i1_a8KTJ ds_d8PSK ->
          case i1_a8KTJ of { PatternInfo ds1_d8Q2A ds2_d8Q2B ->
          jump $j_sm5va ds1_d8Q2A
          };
        DotP i1_a8KTK ds_d8PSL ->
          case i1_a8KTK of { PatternInfo ds1_d8Q2A ds2_d8Q2B ->
          jump $j_sm5va ds1_d8Q2A
          };
        ConP ds_d8PSN ci_a8KTM ds1_d8PSO ->
          case ci_a8KTM of
          { ConPatternInfo ds2_d8Q20 ds3_d8Q21 ds4_d8Q22 ds5_d8Q23
                           ds6_d8Q24 ->
          case ds2_d8Q20 of { PatternInfo ds7_d8Q2A ds8_d8Q2B ->
          jump $j_sm5va ds7_d8Q2A
          }
          };
        LitP i1_a8KTL ds_d8PSM ->
          case i1_a8KTL of { PatternInfo ds1_d8Q2A ds2_d8Q2B ->
          jump $j_sm5va ds1_d8Q2A
          };
        ProjP ds_d8PSP ds1_d8PSQ -> wild1_XJr;
        IApplyP i1_a8KTN ds_d8PSR ds1_d8PSS ds2_d8PST ->
          case i1_a8KTN of { PatternInfo ds3_d8Q2A ds4_d8Q2B ->
          jump $j_sm5va ds3_d8Q2A
          };
        DefP i1_a8KTO ds_d8PSU ds1_d8PSV ->
          case i1_a8KTO of { PatternInfo ds2_d8Q2A ds3_d8Q2B ->
          jump $j_sm5va ds2_d8Q2A
          }
      }

-- RHS size: {terms: 115, types: 75, coercions: 0, joins: 0/0}
usePatOrigin
  = \ @ a_alY8P o_alXok p_alXol ->
      case p_alXol of wild1_XJr {
        VarP i_a8KTJ ds1_d8PSK ->
          case i_a8KTJ of { PatternInfo ds2_d8Q2A ds3_d8Q2B ->
          case ds2_d8Q2A of {
            __DEFAULT -> VarP (PatternInfo o_alXok ds3_d8Q2B) ds1_d8PSK;
            PatOSplit -> wild1_XJr;
            PatOAbsurd -> wild1_XJr
          }
          };
        DotP i_a8KTK ds1_d8PSL ->
          case i_a8KTK of { PatternInfo ds2_d8Q2A ds3_d8Q2B ->
          case ds2_d8Q2A of {
            __DEFAULT -> DotP (PatternInfo o_alXok ds3_d8Q2B) ds1_d8PSL;
            PatOSplit -> wild1_XJr;
            PatOAbsurd -> wild1_XJr
          }
          };
        ConP ds1_d8PSN ci_a8KTM ds2_d8PSO ->
          case ci_a8KTM of
          { ConPatternInfo ds4_d8Q20 ds3_d8Q21 ds5_d8Q22 ds6_d8Q23
                           ds7_d8Q24 ->
          case ds4_d8Q20 of { PatternInfo ds8_d8Q2A ds9_d8Q2B ->
          case ds8_d8Q2A of {
            __DEFAULT ->
              ConP
                ds1_d8PSN
                (ConPatternInfo
                   (PatternInfo o_alXok ds9_d8Q2B)
                   ds3_d8Q21
                   ds5_d8Q22
                   ds6_d8Q23
                   ds7_d8Q24)
                ds2_d8PSO;
            PatOSplit -> wild1_XJr;
            PatOAbsurd -> wild1_XJr
          }
          }
          };
        LitP i_a8KTL ds1_d8PSM ->
          case i_a8KTL of { PatternInfo ds2_d8Q2A ds3_d8Q2B ->
          case ds2_d8Q2A of {
            __DEFAULT -> LitP (PatternInfo o_alXok ds3_d8Q2B) ds1_d8PSM;
            PatOSplit -> wild1_XJr;
            PatOAbsurd -> wild1_XJr
          }
          };
        ProjP ds1_d8PSP ds2_d8PSQ -> wild1_XJr;
        IApplyP i_a8KTN ds1_d8PSR ds2_d8PSS ds3_d8PST ->
          case i_a8KTN of { PatternInfo ds4_d8Q2A ds5_d8Q2B ->
          case ds4_d8Q2A of {
            __DEFAULT ->
              IApplyP
                (PatternInfo o_alXok ds5_d8Q2B) ds1_d8PSR ds2_d8PSS ds3_d8PST;
            PatOSplit -> wild1_XJr;
            PatOAbsurd -> wild1_XJr
          }
          };
        DefP i_a8KTO ds1_d8PSU ds2_d8PSV ->
          case i_a8KTO of { PatternInfo ds4_d8Q2A ds3_d8Q2B ->
          case ds4_d8Q2A of {
            __DEFAULT ->
              DefP (PatternInfo o_alXok ds3_d8Q2B) ds1_d8PSU ds2_d8PSV;
            PatOSplit -> wild1_XJr;
            PatOAbsurd -> wild1_XJr
          }
          }
      }

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
$fOrdDom'_$cp1Ord
  = \ @ a_alYni $dOrd_alYnj -> $fEqDom' ($p1Ord $dOrd_alYnj)

-- RHS size: {terms: 57, types: 41, coercions: 0, joins: 0/0}
$w$ccompare1
  = \ @ a_sme29 w_sme2b w1_sme2c w2_sme2d ->
      case w1_sme2c of {
        Apply a1_alX71 ->
          case w2_sme2d of {
            __DEFAULT -> LT;
            Apply b_alX72 -> $fOrdArg_$ccompare w_sme2b a1_alX71 b_alX72
          };
        Proj ds_dm0VO x_alX73 ->
          case w2_sme2d of {
            Apply ds1_dm0VQ -> GT;
            Proj ds1_dm0VP y_alX74 ->
              $fOrdAmbiguousQName_$ccompare x_alX73 y_alX74;
            IApply ipv_sm6bP ipv1_sm6bQ ipv2_sm6bR -> LT
          };
        IApply x_alX75 y_alX76 r_alX77 ->
          case w2_sme2d of {
            __DEFAULT -> GT;
            IApply x'_alX78 y'_alX79 r'_alX7a ->
              case compare w_sme2b x_alX75 x'_alX78 of {
                LT -> LT;
                EQ ->
                  case compare w_sme2b y_alX76 y'_alX79 of {
                    LT -> LT;
                    EQ -> compare w_sme2b r_alX77 r'_alX7a;
                    GT -> GT
                  };
                GT -> GT
              }
          }
      }

-- RHS size: {terms: 9, types: 11, coercions: 0, joins: 0/0}
$fOrdElim'_$ccompare
  = \ @ a_sme29 _ w1_sme2b w2_sme2c w3_sme2d ->
      $w$ccompare1 w1_sme2b w2_sme2c w3_sme2d

-- RHS size: {terms: 14, types: 12, coercions: 0, joins: 0/0}
$fOrdElim'_$c<=
  = \ @ a_alYBQ _ $dOrd_alYBS x_atgJ y_atgK ->
      case $w$ccompare1 $dOrd_alYBS x_atgJ y_atgK of {
        __DEFAULT -> True;
        GT -> False
      }

-- RHS size: {terms: 14, types: 12, coercions: 0, joins: 0/0}
$fOrdElim'_$cmin
  = \ @ a_alYBQ _ $dOrd_alYBS x_a3Yw y_a3Yx ->
      case $w$ccompare1 $dOrd_alYBS x_a3Yw y_a3Yx of {
        __DEFAULT -> x_a3Yw;
        GT -> y_a3Yx
      }

-- RHS size: {terms: 14, types: 12, coercions: 0, joins: 0/0}
$fOrdElim'_$cmax
  = \ @ a_alYBQ _ $dOrd_alYBS x_a3Yp y_a3Yq ->
      case $w$ccompare1 $dOrd_alYBS x_a3Yp y_a3Yq of {
        __DEFAULT -> y_a3Yq;
        GT -> x_a3Yp
      }

-- RHS size: {terms: 14, types: 12, coercions: 0, joins: 0/0}
$fOrdElim'_$c>
  = \ @ a_alYBQ _ $dOrd_alYBS x_atgO y_atgP ->
      case $w$ccompare1 $dOrd_alYBS x_atgO y_atgP of {
        __DEFAULT -> False;
        GT -> True
      }

-- RHS size: {terms: 14, types: 12, coercions: 0, joins: 0/0}
$fOrdElim'_$c>=
  = \ @ a_alYBQ _ $dOrd_alYBS x_atgT y_atgU ->
      case $w$ccompare1 $dOrd_alYBS x_atgT y_atgU of {
        __DEFAULT -> True;
        LT -> False
      }

-- RHS size: {terms: 14, types: 12, coercions: 0, joins: 0/0}
$fOrdElim'_$c<
  = \ @ a_alYBQ _ $dOrd_alYBS x_atgE y_atgF ->
      case $w$ccompare1 $dOrd_alYBS x_atgE y_atgF of {
        __DEFAULT -> False;
        LT -> True
      }

-- RHS size: {terms: 31, types: 20, coercions: 0, joins: 0/0}
$fOrdElim'
  = \ @ a_alYBQ $dSubst1_alYBR $dOrd_alYBS ->
      C:Ord
        ($fOrdElim'_$cp1Ord $dSubst1_alYBR $dOrd_alYBS)
        (\ w_sme2c w1_sme2d -> $w$ccompare1 $dOrd_alYBS w_sme2c w1_sme2d)
        ($fOrdElim'_$c< $dSubst1_alYBR $dOrd_alYBS)
        ($fOrdElim'_$c<= $dSubst1_alYBR $dOrd_alYBS)
        ($fOrdElim'_$c> $dSubst1_alYBR $dOrd_alYBS)
        ($fOrdElim'_$c>= $dSubst1_alYBR $dOrd_alYBS)
        ($fOrdElim'_$cmax $dSubst1_alYBR $dOrd_alYBS)
        ($fOrdElim'_$cmin $dSubst1_alYBR $dOrd_alYBS)

-- RHS size: {terms: 41, types: 42, coercions: 0, joins: 1/1}
$w$ccompare
  = \ @ a_sme2g w_sme2h ww_sme2o w1_sme2j w2_sme2k ->
      join {
        fail_sm4RT _
          = ww_sme2o
              (case w1_sme2j of {
                 Abs ds1_dddYL v_addbG -> v_addbG;
                 NoAbs ds1_dddYM v_addbH -> applySubst w_sme2h absBody1 v_addbH
               })
              (case w2_sme2k of {
                 Abs ds1_dddYL v_addbG -> v_addbG;
                 NoAbs ds1_dddYM v_addbH -> applySubst w_sme2h absBody1 v_addbH
               }) } in
      case w1_sme2j of {
        Abs ipv_sm2NH ipv1_sm2NI -> jump fail_sm4RT void#;
        NoAbs ds_dm0ZD a1_alX7n ->
          case w2_sme2k of {
            Abs ipv_sm2NL ipv1_sm2NM -> jump fail_sm4RT void#;
            NoAbs ds1_dm0ZE b_alX7o -> ww_sme2o a1_alX7n b_alX7o
          }
      }

-- RHS size: {terms: 13, types: 36, coercions: 0, joins: 0/0}
$fOrdAbs_$ccompare
  = \ @ a_sme2g w_sme2h w1_sme2i w2_sme2j w3_sme2k ->
      case w1_sme2i of
      { C:Ord ww1_sme2n ww2_sme2o ww3_sme2p ww4_sme2q ww5_sme2r ww6_sme2s
              ww7_sme2t ww8_sme2u ->
      $w$ccompare w_sme2h ww2_sme2o w2_sme2j w3_sme2k
      }

-- RHS size: {terms: 18, types: 37, coercions: 0, joins: 0/0}
$fOrdAbs_$c<=
  = \ @ a_alYDg $dSubst1_alYDh $dOrd_alYDi x_atgJ y_atgK ->
      case $dOrd_alYDi of
      { C:Ord ww1_sme2n ww2_sme2o ww3_sme2p ww4_sme2q ww5_sme2r ww6_sme2s
              ww7_sme2t ww8_sme2u ->
      case $w$ccompare $dSubst1_alYDh ww2_sme2o x_atgJ y_atgK of {
        __DEFAULT -> True;
        GT -> False
      }
      }

-- RHS size: {terms: 18, types: 37, coercions: 0, joins: 0/0}
$fOrdAbs_$cmin
  = \ @ a_alYDg $dSubst1_alYDh $dOrd_alYDi x_a3Yw y_a3Yx ->
      case $dOrd_alYDi of
      { C:Ord ww1_sme2n ww2_sme2o ww3_sme2p ww4_sme2q ww5_sme2r ww6_sme2s
              ww7_sme2t ww8_sme2u ->
      case $w$ccompare $dSubst1_alYDh ww2_sme2o x_a3Yw y_a3Yx of {
        __DEFAULT -> x_a3Yw;
        GT -> y_a3Yx
      }
      }

-- RHS size: {terms: 18, types: 37, coercions: 0, joins: 0/0}
$fOrdAbs_$cmax
  = \ @ a_alYDg $dSubst1_alYDh $dOrd_alYDi x_a3Yp y_a3Yq ->
      case $dOrd_alYDi of
      { C:Ord ww1_sme2n ww2_sme2o ww3_sme2p ww4_sme2q ww5_sme2r ww6_sme2s
              ww7_sme2t ww8_sme2u ->
      case $w$ccompare $dSubst1_alYDh ww2_sme2o x_a3Yp y_a3Yq of {
        __DEFAULT -> y_a3Yq;
        GT -> x_a3Yp
      }
      }

-- RHS size: {terms: 18, types: 37, coercions: 0, joins: 0/0}
$fOrdAbs_$c>
  = \ @ a_alYDg $dSubst1_alYDh $dOrd_alYDi x_atgO y_atgP ->
      case $dOrd_alYDi of
      { C:Ord ww1_sme2n ww2_sme2o ww3_sme2p ww4_sme2q ww5_sme2r ww6_sme2s
              ww7_sme2t ww8_sme2u ->
      case $w$ccompare $dSubst1_alYDh ww2_sme2o x_atgO y_atgP of {
        __DEFAULT -> False;
        GT -> True
      }
      }

-- RHS size: {terms: 18, types: 37, coercions: 0, joins: 0/0}
$fOrdAbs_$c>=
  = \ @ a_alYDg $dSubst1_alYDh $dOrd_alYDi x_atgT y_atgU ->
      case $dOrd_alYDi of
      { C:Ord ww1_sme2n ww2_sme2o ww3_sme2p ww4_sme2q ww5_sme2r ww6_sme2s
              ww7_sme2t ww8_sme2u ->
      case $w$ccompare $dSubst1_alYDh ww2_sme2o x_atgT y_atgU of {
        __DEFAULT -> True;
        LT -> False
      }
      }

-- RHS size: {terms: 18, types: 37, coercions: 0, joins: 0/0}
$fOrdAbs_$c<
  = \ @ a_alYDg $dSubst1_alYDh $dOrd_alYDi x_atgE y_atgF ->
      case $dOrd_alYDi of
      { C:Ord ww1_sme2n ww2_sme2o ww3_sme2p ww4_sme2q ww5_sme2r ww6_sme2s
              ww7_sme2t ww8_sme2u ->
      case $w$ccompare $dSubst1_alYDh ww2_sme2o x_atgE y_atgF of {
        __DEFAULT -> False;
        LT -> True
      }
      }

-- RHS size: {terms: 41, types: 42, coercions: 0, joins: 1/1}
$w$c==
  = \ @ a_sme2y w_sme2z ww_sme2F w1_sme2B w2_sme2C ->
      join {
        fail_sm4RV _
          = ww_sme2F
              (case w1_sme2B of {
                 Abs ds1_dddYL v_addbG -> v_addbG;
                 NoAbs ds1_dddYM v_addbH -> applySubst w_sme2z absBody1 v_addbH
               })
              (case w2_sme2C of {
                 Abs ds1_dddYL v_addbG -> v_addbG;
                 NoAbs ds1_dddYM v_addbH -> applySubst w_sme2z absBody1 v_addbH
               }) } in
      case w1_sme2B of {
        Abs ipv_sm2Nv ipv1_sm2Nw -> jump fail_sm4RV void#;
        NoAbs ds_dm11d a1_alX7s ->
          case w2_sme2C of {
            Abs ipv_sm2Nz ipv1_sm2NA -> jump fail_sm4RV void#;
            NoAbs ds1_dm11e b_alX7t -> ww_sme2F a1_alX7s b_alX7t
          }
      }

-- RHS size: {terms: 13, types: 19, coercions: 0, joins: 0/0}
$fEqAbs_$c==
  = \ @ a_sme2y w_sme2z w1_sme2A w2_sme2B w3_sme2C ->
      case w1_sme2A of { C:Eq ww1_sme2F ww2_sme2G ->
      $w$c== w_sme2z ww1_sme2F w2_sme2B w3_sme2C
      }

-- RHS size: {terms: 18, types: 20, coercions: 0, joins: 0/0}
$fEqAbs_$c/=
  = \ @ a_alYEb $dSubst1_alYEc $dEq2_alYEd eta1_B2 eta2_B1 ->
      case $dEq2_alYEd of { C:Eq ww1_sme2F ww2_sme2G ->
      case $w$c== $dSubst1_alYEc ww1_sme2F eta1_B2 eta2_B1 of {
        False -> True;
        True -> False
      }
      }

-- RHS size: {terms: 10, types: 10, coercions: 0, joins: 0/0}
$fEqAbs
  = \ @ a_alYEb $dSubst1_alYEc $dEq2_alYEd ->
      C:Eq
        ($fEqAbs_$c== $dSubst1_alYEc $dEq2_alYEd)
        ($fEqAbs_$c/= $dSubst1_alYEc $dEq2_alYEd)

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fOrdAbs_$cp1Ord
  = \ @ a_alYDg $dSubst1_alYDh $dOrd_alYDi ->
      $fEqAbs $dSubst1_alYDh ($p1Ord $dOrd_alYDi)

-- RHS size: {terms: 28, types: 16, coercions: 0, joins: 0/0}
$fOrdAbs
  = \ @ a_alYDg $dSubst1_alYDh $dOrd_alYDi ->
      C:Ord
        ($fOrdAbs_$cp1Ord $dSubst1_alYDh $dOrd_alYDi)
        ($fOrdAbs_$ccompare $dSubst1_alYDh $dOrd_alYDi)
        ($fOrdAbs_$c< $dSubst1_alYDh $dOrd_alYDi)
        ($fOrdAbs_$c<= $dSubst1_alYDh $dOrd_alYDi)
        ($fOrdAbs_$c> $dSubst1_alYDh $dOrd_alYDi)
        ($fOrdAbs_$c>= $dSubst1_alYDh $dOrd_alYDi)
        ($fOrdAbs_$cmax $dSubst1_alYDh $dOrd_alYDi)
        ($fOrdAbs_$cmin $dSubst1_alYDh $dOrd_alYDi)

-- RHS size: {terms: 19, types: 22, coercions: 0, joins: 0/0}
$fOrdType''_$c<
  = \ @ a_alYH2 $dOrd_alYH3 x_atgE y_atgF ->
      case compare
             $dOrd_alYH3
             (case x_atgE of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
             (case y_atgF of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
      of {
        __DEFAULT -> False;
        LT -> True
      }

-- RHS size: {terms: 19, types: 22, coercions: 0, joins: 0/0}
$fOrdType''_$c>=
  = \ @ a_alYH2 $dOrd_alYH3 x_atgT y_atgU ->
      case compare
             $dOrd_alYH3
             (case x_atgT of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
             (case y_atgU of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
      of {
        __DEFAULT -> True;
        LT -> False
      }

-- RHS size: {terms: 19, types: 22, coercions: 0, joins: 0/0}
$fOrdType''_$c>
  = \ @ a_alYH2 $dOrd_alYH3 x_atgO y_atgP ->
      case compare
             $dOrd_alYH3
             (case x_atgO of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
             (case y_atgP of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
      of {
        __DEFAULT -> False;
        GT -> True
      }

-- RHS size: {terms: 19, types: 22, coercions: 0, joins: 0/0}
$fOrdType''_$cmax
  = \ @ a_alYH2 $dOrd_alYH3 x_a3Yp y_a3Yq ->
      case compare
             $dOrd_alYH3
             (case x_a3Yp of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
             (case y_a3Yq of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
      of {
        __DEFAULT -> y_a3Yq;
        GT -> x_a3Yp
      }

-- RHS size: {terms: 19, types: 22, coercions: 0, joins: 0/0}
$fOrdType''_$cmin
  = \ @ a_alYH2 $dOrd_alYH3 x_a3Yw y_a3Yx ->
      case compare
             $dOrd_alYH3
             (case x_a3Yw of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
             (case y_a3Yx of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
      of {
        __DEFAULT -> x_a3Yw;
        GT -> y_a3Yx
      }

-- RHS size: {terms: 19, types: 22, coercions: 0, joins: 0/0}
$fOrdType''_$c<=
  = \ @ a_alYH2 $dOrd_alYH3 x_atgJ y_atgK ->
      case compare
             $dOrd_alYH3
             (case x_atgJ of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
             (case y_atgK of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
      of {
        __DEFAULT -> True;
        GT -> False
      }

-- RHS size: {terms: 14, types: 23, coercions: 0, joins: 0/0}
$fOrdType''_$ccompare
  = \ @ a_alYH2 $dOrd_alYH3 eta1_B2 eta2_B1 ->
      compare
        $dOrd_alYH3
        (case eta1_B2 of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
        (case eta2_B1 of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })

-- RHS size: {terms: 19, types: 22, coercions: 0, joins: 0/0}
$fEqType''_$c/=
  = \ @ a_alYHV $dEq2_alYHW eta1_B2 eta2_B1 ->
      case ==
             $dEq2_alYHW
             (case eta1_B2 of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
             (case eta2_B1 of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
      of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 14, types: 23, coercions: 0, joins: 0/0}
$fEqType''_$c==
  = \ @ a_alYHV $dEq2_alYHW eta1_B2 eta2_B1 ->
      ==
        $dEq2_alYHW
        (case eta1_B2 of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
        (case eta2_B1 of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fEqType''
  = \ @ a_alYHV $dEq2_alYHW ->
      C:Eq ($fEqType''_$c== $dEq2_alYHW) ($fEqType''_$c/= $dEq2_alYHW)

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
$fOrdType''_$cp1Ord
  = \ @ a_alYH2 $dOrd_alYH3 -> $fEqType'' ($p1Ord $dOrd_alYH3)

-- RHS size: {terms: 19, types: 14, coercions: 0, joins: 0/0}
$fOrdType''
  = \ @ a_alYH2 $dOrd_alYH3 ->
      C:Ord
        ($fOrdType''_$cp1Ord $dOrd_alYH3)
        ($fOrdType''_$ccompare $dOrd_alYH3)
        ($fOrdType''_$c< $dOrd_alYH3)
        ($fOrdType''_$c<= $dOrd_alYH3)
        ($fOrdType''_$c> $dOrd_alYH3)
        ($fOrdType''_$c>= $dOrd_alYH3)
        ($fOrdType''_$cmax $dOrd_alYH3)
        ($fOrdType''_$cmin $dOrd_alYH3)

-- RHS size: {terms: 11, types: 31, coercions: 5, joins: 0/0}
$fSubstDom'_$cp1Subst
  = \ @ a_alYP8 @ b_alYP9 $dSubst1_alYPa _ $d~1_alYPc ->
      case eq_sel $d~1_alYPc of co_alZKq { __DEFAULT ->
      ($p1Subst $dSubst1_alYPa) `cast` <Co:5>
      }

-- RHS size: {terms: 14, types: 22, coercions: 0, joins: 0/0}
$fSubstDom'
  = \ @ a_alYP8 @ b_alYP9 $dSubst1_alYPa $dSubst2_alYPb $d~1_alYPc ->
      C:Subst
        ($fSubstDom'_$cp1Subst $dSubst1_alYPa $dSubst2_alYPb $d~1_alYPc)
        ($fSubstDom'_$capplySubst $dSubst1_alYPa $dSubst2_alYPb $d~1_alYPc)

-- RHS size: {terms: 7, types: 5, coercions: 0, joins: 0/0}
$fDeBruijnNLPat_$cdeBruijnVar
  = \ i_alXcH ->
      case i_alXcH of { I# dt1_ilY9n -> PVar dt1_ilY9n [] }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$fDeBruijnNLPat_$cdebruijnNamedVar
  = \ _ -> $fDeBruijnNLPat_$cdeBruijnVar

-- RHS size: {terms: 24, types: 35, coercions: 0, joins: 0/0}
$fDeBruijnNLPat_$cdeBruijnView
  = \ ds_dm1Gb ->
      case ds_dm1Gb of {
        PVar dt_dm2Il ds1_dm1Hr ->
          case ds1_dm1Hr of {
            [] -> Just (I# dt_dm2Il);
            : ipv_sm2Mi ipv1_sm2Mj -> Nothing
          };
        PDef ds1_dm1Hs ds2_dm1Ht -> Nothing;
        PLam ds1_dm1Hu ds2_dm1Hv -> Nothing;
        PPi ds1_dm1Hw ds2_dm1Hx -> Nothing;
        PSort ds1_dm1Hy -> Nothing;
        PBoundVar dt_dm2Im ds1_dm1HA -> Nothing;
        PTerm ds1_dm1HB -> Nothing
      }

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
$fDeBruijnNLPat
  = C:DeBruijn
      $fDeBruijnNLPat_$cdeBruijnVar
      $fDeBruijnNLPat_$cdebruijnNamedVar
      $fDeBruijnNLPat_$cdeBruijnView

-- RHS size: {terms: 13, types: 16, coercions: 4, joins: 0/0}
$fSubstLevel'_$capplySubst1
  = \ @ a_alYZt $dSubst1_alYZu rho_alXdd ds_dm1IK ->
      case ds_dm1IK of { Plus n_alXde l_alXdf ->
      Plus
        n_alXde
        (applySubst $dSubst1_alYZu (rho_alXdd `cast` <Co:4>) l_alXdf)
      }

-- RHS size: {terms: 7, types: 8, coercions: 4, joins: 0/0}
$fSubstPlusLevel'
  = \ @ a_alYZt $dSubst1_alYZu ->
      C:Subst
        (($p1Subst $dSubst1_alYZu) `cast` <Co:4>)
        ($fSubstLevel'_$capplySubst1 $dSubst1_alYZu)

-- RHS size: {terms: 14, types: 22, coercions: 9, joins: 0/0}
$fSubstLevel'_$capplySubst
  = \ @ a_alYZL $dSubst1_alYZM rho_alXdh ds_dm1Jl ->
      case ds_dm1Jl of { Max n_alXdi as_alXdj ->
      Max
        n_alXdi
        (map
           ($fSubstLevel'_$capplySubst1
              $dSubst1_alYZM (rho_alXdh `cast` <Co:9>))
           as_alXdj)
      }

-- RHS size: {terms: 7, types: 8, coercions: 4, joins: 0/0}
$fSubstLevel'
  = \ @ a_alYZL $dSubst1_alYZM ->
      C:Subst
        (($p1Subst $dSubst1_alYZM) `cast` <Co:4>)
        ($fSubstLevel'_$capplySubst $dSubst1_alYZM)

-- RHS size: {terms: 31, types: 42, coercions: 0, joins: 0/1}
$fApplyCase_$capply2
  = \ @ v_alZer @ k_alZes $dApply_alZet x_alXgH args_alXgI ->
      letrec {
        go15_a15wV
          = \ ds_a15wW ->
              case ds_a15wW of {
                Bin dt_a15wY kx_a15wZ x1_a15x0 l_a15x1 r_a15x2 ->
                  case go15_a15wV l_a15x1 of dt1_a15x4 { __DEFAULT ->
                  case go15_a15wV r_a15x2 of dt2_a15x5 { __DEFAULT ->
                  Bin
                    dt_a15wY
                    kx_a15wZ
                    (apply $dApply_alZet x1_a15x0 args_alXgI)
                    dt1_a15x4
                    dt2_a15x5
                  }
                  };
                Tip -> Tip
              }; } in
      go15_a15wV x_alXgH

-- RHS size: {terms: 8, types: 13, coercions: 0, joins: 0/0}
$fApplyMap
  = \ @ v_alZer @ k_alZes $dApply_alZet ->
      C:Apply
        ($fApplyCase_$capply2 $dApply_alZet)
        ($fApplyCase_$capplyE2 $dApply_alZet)

-- RHS size: {terms: 13, types: 13, coercions: 0, joins: 0/0}
$fApplyCase_$capply3
  = \ @ a_alZiZ $dApply_alZj0 ds_dm2bh args_alXi3 ->
      case ds_dm2bh of { WithArity n_alXi1 a1_alXi2 ->
      WithArity n_alXi1 (apply $dApply_alZj0 a1_alXi2 args_alXi3)
      }

-- RHS size: {terms: 71, types: 134, coercions: 0, joins: 0/1}
$w$capply
  = \ @ a_sme2R
      w_sme2S
      ww_sme2X
      ww1_sme2Y
      ww2_sme2Z
      ww3_sme30
      ww4_sme31
      ww5_sme32
      ww6_sme33
      w1_sme2U ->
      (# ww_sme2X,
         letrec {
           go15_a15wV
             = \ ds_a15wW ->
                 case ds_a15wW of {
                   Bin dt_a15wY kx_a15wZ x_a15x0 l_a15x1 r_a15x2 ->
                     case go15_a15wV l_a15x1 of dt1_a15x4 { __DEFAULT ->
                     case go15_a15wV r_a15x2 of dt2_a15x5 { __DEFAULT ->
                     Bin
                       dt_a15wY
                       kx_a15wZ
                       ($fApplyCase_$capply3 w_sme2S x_a15x0 w1_sme2U)
                       dt1_a15x4
                       dt2_a15x5
                     }
                     };
                   Tip -> Tip
                 }; } in
         go15_a15wV ww1_sme2Y,
         case ww2_sme2Z of {
           Nothing -> Nothing;
           Just a1_anJk ->
             Just
               (case a1_anJk of { (x_a6yUa, y_a6yUb) -> x_a6yUa },
                case a1_anJk of { (x_a6yUe, y_a6yUf) ->
                case y_a6yUf of { WithArity n_alXi1 a2_alXi2 ->
                WithArity n_alXi1 (apply w_sme2S a2_alXi2 w1_sme2U)
                }
                })
         },
         $fApplyCase_$capply2 w_sme2S ww3_sme30 w1_sme2U,
         $fApplyCase_$capply1 w_sme2S ww4_sme31 w1_sme2U, ww5_sme32,
         ww6_sme33 #)

-- RHS size: {terms: 27, types: 73, coercions: 0, joins: 0/0}
$fApplyCase_$capply
  = \ @ a_sme2R w_sme2S w1_sme2T w2_sme2U ->
      case w1_sme2T of
      { Branches ww1_sme2X ww2_sme2Y ww3_sme2Z ww4_sme30 ww5_sme31
                 ww6_sme32 ww7_sme33 ->
      case $w$capply
             w_sme2S
             ww1_sme2X
             ww2_sme2Y
             ww3_sme2Z
             ww4_sme30
             ww5_sme31
             ww6_sme32
             ww7_sme33
             w2_sme2U
      of
      { (# ww9_smeoq, ww10_smeor, ww11_smeos, ww12_smeot, ww13_smeou,
           ww14_smeov, ww15_smeow #) ->
      Branches
        ww9_smeoq
        ww10_smeor
        ww11_smeos
        ww12_smeot
        ww13_smeou
        ww14_smeov
        ww15_smeow
      }
      }

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fApplyCase
  = \ @ a_alZi9 $dApply_alZia ->
      C:Apply
        ($fApplyCase_$capply $dApply_alZia)
        ($fApplyCase_$capplyE $dApply_alZia)

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fApplyWithArity
  = \ @ a_alZiZ $dApply_alZj0 ->
      C:Apply
        ($fApplyCase_$capply3 $dApply_alZj0)
        ($fApplyCase_$capplyE3 $dApply_alZj0)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl273_rmk5n = I# 224#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl274_rmk5o = I# 10#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl275_rmk5p
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl273_rmk5n
      lvl274_rmk5o
      lvl273_rmk5n
      lvl41_rmk11

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl276_rmk5q = PushCallStack lvl1_rmk0n lvl275_rmk5p EmptyCallStack

-- RHS size: {terms: 2, types: 2, coercions: 4, joins: 0/0}
$fApplySort'1 = __IMPOSSIBLE__ (lvl276_rmk5q `cast` <Co:4>)

-- RHS size: {terms: 24, types: 25, coercions: 0, joins: 0/0}
$fApplySort'_$capplyE
  = \ s_alXlp ds_dm2Gx ->
      case ds_dm2Gx of wild1_X8M {
        [] -> s_alXlp;
        : ipv_sm2JE ipv1_sm2JF ->
          case s_alXlp of {
            __DEFAULT -> $fApplySort'1;
            MetaS dt_dm2Iw dt1_dm2Ix es'_alXlt ->
              MetaS dt_dm2Iw dt1_dm2Ix (++ es'_alXlt wild1_X8M);
            DefS d_alXlu es'_alXlv -> DefS d_alXlu (++ es'_alXlv wild1_X8M)
          }
      }

-- RHS size: {terms: 7, types: 7, coercions: 0, joins: 0/0}
$fApplySort'_$capply
  = \ t1_add8K args_add8L ->
      $fApplySort'_$capplyE t1_add8K (map Apply args_add8L)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplySort' = C:Apply $fApplySort'_$capply $fApplySort'_$capplyE

-- RHS size: {terms: 8, types: 7, coercions: 0, joins: 0/0}
lvl277_rmk5r
  = \ ds_d3oqv ->
      case ds_d3oqv of { Arg a1_a3gXn a2_a3gXo ->
      Arg a1_a3gXn (var a2_a3gXo)
      }

Rec {
-- RHS size: {terms: 34, types: 29, coercions: 0, joins: 0/0}
$wlmax
  = \ w_sme3b w1_sme3c w2_sme3d ->
      case w2_sme3d of {
        [] ->
          case w_sme3b of dt_X8L3Y { __DEFAULT -> (# dt_X8L3Y, w1_sme3c #) };
        : ds_dlZUl ls_alXrr ->
          case ds_dlZUl of { Max n_alXrp bs_alXrq ->
          case leInteger# w_sme3b n_alXrp of {
            __DEFAULT -> $wlmax w_sme3b (++ bs_alXrq w1_sme3c) ls_alXrr;
            1# -> $wlmax n_alXrp (++ bs_alXrq w1_sme3c) ls_alXrr
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 12, types: 16, coercions: 0, joins: 0/0}
levelLub_expandPlus
  = \ w_sme3k ->
      case w_sme3k of { Plus ww1_sme3n ww2_sme3o ->
      case $wexpandPlus ww1_sme3n ww2_sme3o of
      { (# ww4_smeoB, ww5_smeoC #) ->
      Max ww4_smeoB ww5_smeoC
      }
      }

-- RHS size: {terms: 51, types: 64, coercions: 0, joins: 1/1}
$wexpandPlus
  = \ ww_sme3n ww1_sme3o ->
      join {
        $j_sm5tS ww2_s92eA ww3_s92eB
          = case plusInteger ww_sme3n ww2_s92eA of dt_X8L3Y { __DEFAULT ->
            (# dt_X8L3Y,
               map
                 (\ ds_d8POO ->
                    case ds_d8POO of { Plus n1_a8KUh l_a8KUi ->
                    case plusInteger ww_sme3n n1_a8KUh of dt1_X8L3D { __DEFAULT ->
                    Plus dt1_X8L3D l_a8KUi
                    }
                    })
                 ww3_s92eB #)
            } } in
      case ww1_sme3o of wild1_Xlr {
        __DEFAULT ->
          jump $j_sm5tS
            $fPrettyLevel'6 (: (Plus $fPrettyLevel'6 wild1_Xlr) []);
        Level l_alXrw ->
          case l_alXrw of { Max ww3_sme3x ww4_sme3y ->
          case $wlmax ww3_sme3x [] (map levelLub_expandPlus ww4_sme3y) of
          { (# ww6_smeoE, ww7_smeoF #) ->
          jump $j_sm5tS ww6_smeoE ww7_smeoF
          }
          }
      }
end Rec }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
levelLub2
  = \ _ x_a2Etk y_a2Etl -> $fOrdInteger_$cmax x_a2Etk y_a2Etl

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
levelLub1
  = \ ds_dlZUt ->
      case ds_dlZUt of { Plus n_alXrA a_alXrB -> (a_alXrB, n_alXrA) }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl278_rmk5s
  = "src\\full\\Agda\\TypeChecking\\Substitute.hs:(1626,18)-(1663,54)|case"#

-- RHS size: {terms: 2, types: 5, coercions: 0, joins: 0/0}
lvl279_rmk5t = patError lvl278_rmk5s

-- RHS size: {terms: 2, types: 4, coercions: 0, joins: 0/0}
lvl280_rmk5u = Right LevelUniv

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl281_rmk5v
  = "src\\full\\Agda\\TypeChecking\\Substitute.hs:(1641,55)-(1643,36)|case"#

-- RHS size: {terms: 2, types: 5, coercions: 0, joins: 0/0}
lvl282_rmk5w = patError lvl281_rmk5v

-- RHS size: {terms: 2, types: 4, coercions: 0, joins: 0/0}
lvl283_rmk5x = Right SizeUniv

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl284_rmk5y = Max $mLargeSort1 []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl285_rmk5z = Univ USSet lvl284_rmk5y

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
lvl286_rmk5A = Right lvl285_rmk5z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl287_rmk5B
  = "src\\full\\Agda\\TypeChecking\\Substitute.hs:(1675,14)-(1694,93)|case"#

-- RHS size: {terms: 2, types: 4, coercions: 0, joins: 0/0}
lvl288_rmk5C = patError lvl287_rmk5B

-- RHS size: {terms: 15, types: 10, coercions: 6, joins: 0/0}
lvl289_rmk5D
  = \ ds1_a9NT ->
      case ds1_a9NT of {
        Nothing -> Nothing `cast` <Co:2>;
        Just x1_a9NW ->
          case x1_a9NW of { I# y_a1WQ ->
          case y_a1WQ of {
            __DEFAULT -> Nothing `cast` <Co:2>;
            0# -> flexRigOccurrenceIn2 `cast` <Co:2>
          }
          }
      }

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
lvl290_rmk5E = FreeEnv IgnoreNot Unguarded runFreeM2 lvl289_rmk5D

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl291_rmk5F = I# 145#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl292_rmk5G = I# 34#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl293_rmk5H = I# 48#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl294_rmk5I
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl291_rmk5F
      lvl292_rmk5G
      lvl291_rmk5F
      lvl293_rmk5H

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl295_rmk5J = PushCallStack lvl1_rmk0n lvl294_rmk5I EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl296_rmk5K = __IMPOSSIBLE__ (lvl295_rmk5J `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl297_rmk5L = I# 140#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl298_rmk5M = I# 33#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl299_rmk5N = I# 47#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl300_rmk5O
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl297_rmk5L
      lvl298_rmk5M
      lvl297_rmk5L
      lvl299_rmk5N

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl301_rmk5P = PushCallStack lvl1_rmk0n lvl300_rmk5O EmptyCallStack

-- RHS size: {terms: 2, types: 1, coercions: 4, joins: 0/0}
lvl302_rmk5Q = __IMPOSSIBLE__ (lvl301_rmk5P `cast` <Co:4>)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl303_rmk5R = "conApp: constructor "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl304_rmk5S = " projected by "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl305_rmk5T = " and args"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl306_rmk5U = unpackCString# lvl305_rmk5T

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl307_rmk5V = "  "#

-- RHS size: {terms: 13, types: 6, coercions: 0, joins: 0/0}
lvl308_rmk5W
  = \ x_X26U ->
      unpackAppendCString#
        lvl307_rmk5V
        (fullRenderAnn
           PageMode
           $fEqDoc3
           $fEqDoc2
           $fEqDoc1
           []
           ($fPrettyElim'_$cprettyPrec $fPrettyTerm $fFoldableElim'5 x_X26U))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl309_rmk5X = " with fields"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl310_rmk5Y = unpackCString# lvl309_rmk5X

-- RHS size: {terms: 48, types: 32, coercions: 0, joins: 0/0}
lvl311_rmk5Z
  = \ x_X26U ->
      unpackAppendCString#
        lvl307_rmk5V
        (fullRenderAnn
           PageMode
           $fEqDoc3
           $fEqDoc2
           $fEqDoc1
           []
           (case x_X26U of { Arg ww1_s80Rk ww2_s80Rt ->
            case ww1_s80Rk of
            { ArgInfo ww4_s80Rn ww5_s80Ro ww6_s80Rp ww7_s80Rq ww8_s80Rr ->
            case ww4_s80Rn of {
              Hidden -> braces' ($fPrettyAmbiguousQName_$cpretty1 ww2_s80Rt);
              Instance ds3_d7PCo ->
                case specialCharacters of
                { SpecialCharacters ds4_d3ark ds5_d3arl ds6_d3arm ds7_d3arn
                                    ds8_d3aro ds9_d3arp ds10_d3arq ->
                ds4_d3ark ($fPrettyAmbiguousQName_$cpretty1 ww2_s80Rt)
                };
              NotHidden ->
                case ww6_s80Rp of {
                  __DEFAULT -> $fPrettyAmbiguousQName_$cpretty1 ww2_s80Rt;
                  Substitution ->
                    case $fPrettyAmbiguousQName_$cpretty1 ww2_s80Rt of wild3_a2sGS {
                      __DEFAULT ->
                        Beside $fPrettyArg3 False (Beside wild3_a2sGS False $fPrettyArg2);
                      Empty -> $fPrettyArg1
                    }
                }
            }
            }
            }))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl312_rmk60 = I# 133#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl313_rmk61
  = SrcLoc
      lvl2_rmk0o
      lvl3_rmk0p
      lvl5_rmk0r
      lvl312_rmk60
      lvl42_rmk12
      lvl312_rmk60
      lvl196_rmk43

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl314_rmk62 = PushCallStack lvl1_rmk0n lvl313_rmk61 EmptyCallStack

-- RHS size: {terms: 2, types: 2, coercions: 4, joins: 0/0}
lvl315_rmk63 = __IMPOSSIBLE__ (lvl314_rmk62 `cast` <Co:4>)

Rec {
-- RHS size: {terms: 291, types: 231, coercions: 33, joins: 5/8}
$wconApp
  = \ @ t_sme3Y
      ww_sme48
      w_sme40
      w1_sme41
      w2_sme42
      w3_sme43
      w4_sme44
      w5_sme45 ->
      case w5_sme45 of {
        [] -> Con w2_sme42 w3_sme43 w4_sme44;
        : a_alXmv es_alXmw ->
          case a_alXmv of wild2_X4V {
            __DEFAULT ->
              $wconApp
                @~ <Co:1>
                w_sme40
                w1_sme41
                w2_sme42
                w3_sme43
                (++ w4_sme44 (: wild2_X4V []))
                es_alXmw;
            Proj ipv_sm2Xv ipv1_sm2Xw ->
              case w2_sme42 of wild3_X4W
              { ConHead c_alXmF ds_dm0ud ds1_dm0ue fs_alXmG ->
              let { lvl328_sm55i = Con wild3_X4W w3_sme43 w4_sme44 } in
              let { lvl329_sm55j = : wild2_X4V [] } in
              let {
                lvl330_sm55E
                  = unpackAppendCString#
                      lvl303_rmk5R
                      (++
                         (fullRenderAnn
                            PageMode
                            $fEqDoc3
                            $fEqDoc2
                            $fEqDoc1
                            []
                            ($fPrettyAmbiguousQName_$cpretty1 c_alXmF))
                         (++
                            (unlines (: lvl310_rmk5Y (map lvl311_rmk5Z fs_alXmG)))
                            (++
                               (unlines (: lvl306_rmk5U (map lvl308_rmk5W w4_sme44)))
                               (unpackAppendCString#
                                  lvl304_rmk5S
                                  (fullRenderAnn
                                     PageMode
                                     $fEqDoc3
                                     $fEqDoc2
                                     $fEqDoc1
                                     []
                                     ($fPrettyAmbiguousQName_$cpretty1 ipv1_sm2Xw)))))) } in
              join {
                $j_sm5tp
                  = trace
                      lvl330_sm55E
                      ((applyE
                          w_sme40
                          ((w1_sme41 lvl302_rmk5Q lvl328_sm55i lvl329_sm55j) `cast` <Co:2>)
                          es_alXmw)
                       `cast` <Co:1>) } in
              join {
                $w$j_sme3V ww1_sme3S ww2_sme3T
                  = (applyE
                       w_sme40
                       (case ww2_sme3T of { I# x_a1SZ ->
                        join {
                          $j1_sm5tk
                            = (trace
                                 lvl330_sm55E (w1_sme41 lvl296_rmk5K lvl328_sm55i lvl329_sm55j))
                              `cast` <Co:2> } in
                        join {
                          $j2_sm5tl x1_a9NW
                            = case ww1_sme3S of { Arg ds2_d3o6A ds3_d3o6B ->
                              case ds2_d3o6A of
                              { ArgInfo ds4_d3o6M ds5_d3o6N ds6_d3o6O ds7_d3o6P ds8_d3o6Q ->
                              case ds5_d3o6N of { Modality ds9_d3o7g ds10_d3o7h ds11_d3o7i ->
                              case x1_a9NW of {
                                Apply u_a8AdB ->
                                  case u_a8AdB of { Arg ai_alXn7 v_alXn8 ->
                                  case ai_alXn7 of
                                  { ArgInfo ds12_X3ovS ds13_X3ovU ds14_X3ovW ds15_X3ovY
                                            ds16_X3ow0 ->
                                  case ds13_X3ovU of { Modality ds17_X3owv ds18_X3owx ds19_X3owz ->
                                  case ds17_X3owv of {
                                    __DEFAULT ->
                                      case ds9_d3o7g of {
                                        __DEFAULT -> v_alXn8 `cast` <Co:2>;
                                        Irrelevant ->
                                          case v_alXn8 of wild14_XJK {
                                            __DEFAULT -> (DontCare wild14_XJK) `cast` <Co:2>;
                                            DontCare ds20_d8PPv -> wild14_XJK `cast` <Co:2>
                                          }
                                      };
                                    Irrelevant ->
                                      case v_alXn8 of wild13_XJK {
                                        __DEFAULT ->
                                          case ds9_d3o7g of { __DEFAULT ->
                                          (DontCare wild13_XJK) `cast` <Co:2>
                                          };
                                        DontCare ds20_d8PPv ->
                                          case ds9_d3o7g of { __DEFAULT ->
                                          wild13_XJK `cast` <Co:2>
                                          }
                                      }
                                  }
                                  }
                                  }
                                  };
                                Proj ds12_d8Aud ds13_d8Aue ->
                                  case trace lvl330_sm55E lvl315_rmk63 of { Arg ai_alXn7 v_alXn8 ->
                                  case ai_alXn7 of
                                  { ArgInfo ds14_X3ovS ds15_X3ovU ds16_X3ovW ds17_X3ovY
                                            ds18_X3ow0 ->
                                  case ds15_X3ovU of { Modality ds19_X3owv ds20_X3owx ds21_X3owz ->
                                  case ds19_X3owv of {
                                    __DEFAULT ->
                                      case ds9_d3o7g of {
                                        __DEFAULT -> v_alXn8 `cast` <Co:2>;
                                        Irrelevant ->
                                          case v_alXn8 of wild14_XJK {
                                            __DEFAULT -> (DontCare wild14_XJK) `cast` <Co:2>;
                                            DontCare ds22_d8PPv -> wild14_XJK `cast` <Co:2>
                                          }
                                      };
                                    Irrelevant ->
                                      case v_alXn8 of wild13_XJK {
                                        __DEFAULT ->
                                          case ds9_d3o7g of { __DEFAULT ->
                                          (DontCare wild13_XJK) `cast` <Co:2>
                                          };
                                        DontCare ds22_d8PPv ->
                                          case ds9_d3o7g of { __DEFAULT ->
                                          wild13_XJK `cast` <Co:2>
                                          }
                                      }
                                  }
                                  }
                                  }
                                  };
                                IApply ds12_d8Auf ds13_d8Aug r_a8AdC ->
                                  case ds9_d3o7g of {
                                    __DEFAULT -> r_a8AdC `cast` <Co:2>;
                                    Irrelevant ->
                                      case r_a8AdC of wild10_XJK {
                                        __DEFAULT -> (DontCare wild10_XJK) `cast` <Co:2>;
                                        DontCare ds14_d8PPv -> wild10_XJK `cast` <Co:2>
                                      }
                                  }
                              }
                              }
                              }
                              } } in
                        case <=# x_a1SZ 0# of {
                          __DEFAULT ->
                            case $wunsafeDrop x_a1SZ w4_sme44 of {
                              [] -> jump $j1_sm5tk;
                              : y_a1RC ys_a1RD -> jump $j2_sm5tl y_a1RC
                            };
                          1# ->
                            case w4_sme44 of {
                              [] -> jump $j1_sm5tk;
                              : y_a1RC ys_a1RD -> jump $j2_sm5tl y_a1RC
                            }
                        }
                        })
                       es_alXmw)
                    `cast` <Co:1> } in
              joinrec {
                go_sm4Op ds2_im2VX _ys_im2VY
                  = case ds2_im2VX of {
                      [] -> jump $j_sm5tp;
                      : ipv2_im2W0 ipv3_im2W1 ->
                        case _ys_im2VY of {
                          [] -> jump $j_sm5tp;
                          : ipv4_im2W4 ipv5_im2W5 ->
                            case ipv1_sm2Xw of { QName ds3_d6aXk ds4_d6aXl ->
                            case ds4_d6aXl of
                            { Name ds5_d6aXp ds6_d6aXq ds7_d6aXr ds8_d6aXs ds9_d6aXt
                                   ds10_d6aXu ->
                            case ds5_d6aXp of { NameId dt_smhEJ dt1_smhEK ->
                            case ipv2_im2W0 of wild9_X1pa { Arg ds11_d3o6D ds12_d3o6E ->
                            case ds12_d3o6E of { QName ds13_X6baj ds14_X6bal ->
                            case ds14_X6bal of
                            { Name ds15_X6bau ds16_X6baw ds17_X6bay ds18_X6baA ds19_X6baC
                                   ds20_X6baE ->
                            case ds15_X6bau of { NameId dt2_smhEN dt3_smhEO ->
                            case eqWord# dt_smhEJ dt2_smhEN of {
                              __DEFAULT -> jump go_sm4Op ipv3_im2W1 ipv5_im2W5;
                              1# ->
                                case eqWord# dt1_smhEK dt3_smhEO of {
                                  __DEFAULT -> jump go_sm4Op ipv3_im2W1 ipv5_im2W5;
                                  1# -> jump $w$j_sme3V wild9_X1pa ipv4_im2W4
                                }
                            }
                            }
                            }
                            }
                            }
                            }
                            }
                            }
                        }
                    }; } in
              jump go_sm4Op fs_alXmG findWithIndex2
              }
          }
      }
end Rec }

-- RHS size: {terms: 18, types: 30, coercions: 1, joins: 0/0}
conApp
  = \ @ t_sme3Y
      w_sme3Z
      w1_sme40
      w2_sme41
      w3_sme42
      w4_sme43
      w5_sme44
      w6_sme45 ->
      case w_sme3Z of { MkCoercible ww1_sme48 ->
      $wconApp
        @~ <Co:1> w1_sme40 w2_sme41 w3_sme42 w4_sme43 w5_sme44 w6_sme45
      }

-- RHS size: {terms: 9, types: 4, coercions: 0, joins: 0/0}
$fDeBruijnPattern'2
  = \ i_alX9s ->
      VarP
        defaultPatternInfo
        (case i_alX9s of { I# dt1_a8Ler ->
         DBPatVar $fUnderscoreDoc_$cunderscore1 dt1_a8Ler
         })

-- RHS size: {terms: 7, types: 3, coercions: 0, joins: 0/0}
$fDeBruijnPattern'1
  = \ n_alX9r i_alX9s ->
      VarP defaultPatternInfo ($WDBPatVar n_alX9r i_alX9s)

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
lvl316_rmk64 = \ _ -> Nothing

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
$fDeBruijnPattern'_$s$fDeBruijnPattern'
  = C:DeBruijn $fDeBruijnPattern'2 $fDeBruijnPattern'1 lvl316_rmk64

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
lvl317_rmk65 = \ @ a_alYKB _ -> Nothing

-- RHS size: {terms: 9, types: 7, coercions: 0, joins: 0/0}
$fDeBruijnPattern'_$cdeBruijnVar
  = \ @ a_alYKB $dDeBruijn_alYKC i_alX9s ->
      VarP
        defaultPatternInfo
        (debruijnNamedVar
           $dDeBruijn_alYKC $fUnderscoreDoc_$cunderscore1 i_alX9s)

-- RHS size: {terms: 10, types: 8, coercions: 0, joins: 0/0}
$fDeBruijnPattern'_$cdebruijnNamedVar
  = \ @ a_alYKB $dDeBruijn_alYKC n_alX9r i_alX9s ->
      VarP
        defaultPatternInfo
        (debruijnNamedVar $dDeBruijn_alYKC n_alX9r i_alX9s)

-- RHS size: {terms: 8, types: 9, coercions: 0, joins: 0/0}
$fDeBruijnPattern'
  = \ @ a_alYKB $dDeBruijn_alYKC ->
      C:DeBruijn
        ($fDeBruijnPattern'_$cdeBruijnVar $dDeBruijn_alYKC)
        ($fDeBruijnPattern'_$cdebruijnNamedVar $dDeBruijn_alYKC)
        lvl317_rmk65

Rec {
-- RHS size: {terms: 43, types: 52, coercions: 4, joins: 0/0}
$fOrdTele_$capplySubst
  = \ @ a_alYTf $dSubst1_alYTg rho_alXbw ds_dm1D8 ->
      case ds_dm1D8 of {
        EmptyTel -> EmptyTel;
        ExtendTel t_alXby tel_alXbz ->
          ExtendTel
            (applySubst $dSubst1_alYTg (rho_alXbw `cast` <Co:4>) t_alXby)
            (case tel_alXbz of {
               Abs x_alXar a1_alXas ->
                 Abs
                   x_alXar
                   ($fOrdTele_$capplySubst
                      $dSubst1_alYTg
                      (case rho_alXbw of wild3_Xj {
                         __DEFAULT -> Lift 1# wild3_Xj;
                         IdS -> IdS;
                         Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v 1#) rho1_add9T
                       })
                      a1_alXas);
               NoAbs x_alXau a1_alXav ->
                 NoAbs
                   x_alXau ($fOrdTele_$capplySubst $dSubst1_alYTg rho_alXbw a1_alXav)
             })
      }
end Rec }

-- RHS size: {terms: 7, types: 8, coercions: 4, joins: 0/0}
$fSubstTele
  = \ @ a_alYTf $dSubst1_alYTg ->
      C:Subst
        (($p1Subst $dSubst1_alYTg) `cast` <Co:4>)
        ($fOrdTele_$capplySubst $dSubst1_alYTg)

Rec {
-- RHS size: {terms: 79, types: 83, coercions: 0, joins: 2/2}
$fOrdTelV_$ccompare
  = \ @ a_alYpA $dSubst1_alYpB $dOrd_alYpC a1_alXGT b_alXGU ->
      case a1_alXGT of {
        EmptyTel ->
          case b_alXGU of {
            EmptyTel -> EQ;
            ExtendTel ipv_sm2OF ipv1_sm2OG -> LT
          };
        ExtendTel a2_alXGV a3_alXGW ->
          case b_alXGU of {
            EmptyTel -> GT;
            ExtendTel b1_alXGX b2_alXGY ->
              case compare $dOrd_alYpC a2_alXGV b1_alXGX of {
                LT -> LT;
                EQ ->
                  join {
                    fail_sm4Rj _
                      = join {
                          $j_smfqu karg_smeGM
                            = case a3_alXGW of {
                                Abs ds1_dddYL v_addbG ->
                                  $fOrdTelV_$ccompare $dSubst1_alYpB $dOrd_alYpC v_addbG karg_smeGM;
                                NoAbs ds1_dddYM v_addbH ->
                                  $fOrdTelV_$ccompare
                                    $dSubst1_alYpB
                                    $dOrd_alYpC
                                    ($fOrdTele_$capplySubst $dSubst1_alYpB absBody1 v_addbH)
                                    karg_smeGM
                              } } in
                        case b2_alXGY of {
                          Abs ds1_dddYL v_addbG -> jump $j_smfqu v_addbG;
                          NoAbs ds1_dddYM v_addbH ->
                            jump $j_smfqu
                              ($fOrdTele_$capplySubst $dSubst1_alYpB absBody1 v_addbH)
                        } } in
                  case a3_alXGW of {
                    Abs ipv_sm2NH ipv1_sm2NI -> jump fail_sm4Rj void#;
                    NoAbs ds_dm0ZD a4_alX7n ->
                      case b2_alXGY of {
                        Abs ipv_sm2NL ipv1_sm2NM -> jump fail_sm4Rj void#;
                        NoAbs ds1_dm0ZE b4_alX7o ->
                          $fOrdTelV_$ccompare $dSubst1_alYpB $dOrd_alYpC a4_alX7n b4_alX7o
                      }
                  };
                GT -> GT
              }
          }
      }
end Rec }

-- RHS size: {terms: 94, types: 86, coercions: 0, joins: 2/2}
$fOrdTele_$c<
  = \ @ a_alYpA $dSubst1_alYpB $dOrd_alYpC a1_alXGZ b_alXH0 ->
      case a1_alXGZ of {
        EmptyTel ->
          case b_alXH0 of {
            EmptyTel -> False;
            ExtendTel ipv_sm2Ox ipv1_sm2Oy -> True
          };
        ExtendTel a2_alXH1 a3_alXH2 ->
          case b_alXH0 of {
            EmptyTel -> False;
            ExtendTel b1_alXH3 b2_alXH4 ->
              case compare $dOrd_alYpC a2_alXH1 b1_alXH3 of {
                LT -> True;
                EQ ->
                  join {
                    fail_sm4Rh _
                      = join {
                          $j_smfqF karg_smeGV
                            = case a3_alXH2 of {
                                Abs ds1_dddYL v_addbG ->
                                  case $fOrdTelV_$ccompare
                                         $dSubst1_alYpB $dOrd_alYpC v_addbG karg_smeGV
                                  of {
                                    __DEFAULT -> False;
                                    LT -> True
                                  };
                                NoAbs ds1_dddYM v_addbH ->
                                  case $fOrdTelV_$ccompare
                                         $dSubst1_alYpB
                                         $dOrd_alYpC
                                         ($fOrdTele_$capplySubst $dSubst1_alYpB absBody1 v_addbH)
                                         karg_smeGV
                                  of {
                                    __DEFAULT -> False;
                                    LT -> True
                                  }
                              } } in
                        case b2_alXH4 of {
                          Abs ds1_dddYL v_addbG -> jump $j_smfqF v_addbG;
                          NoAbs ds1_dddYM v_addbH ->
                            jump $j_smfqF
                              ($fOrdTele_$capplySubst $dSubst1_alYpB absBody1 v_addbH)
                        } } in
                  case a3_alXH2 of {
                    Abs ipv_sm2NH ipv1_sm2NI -> jump fail_sm4Rh void#;
                    NoAbs ds_dm0ZD a4_alX7n ->
                      case b2_alXH4 of {
                        Abs ipv_sm2NL ipv1_sm2NM -> jump fail_sm4Rh void#;
                        NoAbs ds1_dm0ZE b4_alX7o ->
                          case $fOrdTelV_$ccompare
                                 $dSubst1_alYpB $dOrd_alYpC a4_alX7n b4_alX7o
                          of {
                            __DEFAULT -> False;
                            LT -> True
                          }
                      }
                  };
                GT -> False
              }
          }
      }

-- RHS size: {terms: 15, types: 12, coercions: 0, joins: 0/0}
$fOrdTele_$c>=
  = \ @ a_alYpA $dSubst1_alYpB $dOrd_alYpC a1_alXH9 b_alXHa ->
      case $fOrdTele_$c< $dSubst1_alYpB $dOrd_alYpC a1_alXH9 b_alXHa of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 15, types: 12, coercions: 0, joins: 0/0}
$fOrdTele_$c<=
  = \ @ a_alYpA $dSubst1_alYpB $dOrd_alYpC a1_alXH5 b_alXH6 ->
      case $fOrdTele_$c< $dSubst1_alYpB $dOrd_alYpC b_alXH6 a1_alXH5 of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 15, types: 12, coercions: 0, joins: 0/0}
$fOrdTele_$cmin
  = \ @ a_alYpA $dSubst1_alYpB $dOrd_alYpC x_a3Yw y_a3Yx ->
      case $fOrdTele_$c< $dSubst1_alYpB $dOrd_alYpC y_a3Yx x_a3Yw of {
        False -> x_a3Yw;
        True -> y_a3Yx
      }

-- RHS size: {terms: 15, types: 12, coercions: 0, joins: 0/0}
$fOrdTele_$cmax
  = \ @ a_alYpA $dSubst1_alYpB $dOrd_alYpC x_a3Yp y_a3Yq ->
      case $fOrdTele_$c< $dSubst1_alYpB $dOrd_alYpC y_a3Yq x_a3Yp of {
        False -> y_a3Yq;
        True -> x_a3Yp
      }

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
lvl318_rmk66 = __IMPOSSIBLE__ ($dIP5_rmk52 `cast` <Co:4>)

Rec {
-- RHS size: {terms: 19, types: 22, coercions: 0, joins: 0/0}
levelLub_go15
  = \ z'_axBS ds_axBT ->
      case ds_axBT of {
        Bin dt_axBV kx_axBW x_axBX l_axBY r_axBZ ->
          levelLub_go15
            (: (case x_axBX of dt1_X8L3D { __DEFAULT ->
                Plus dt1_X8L3D kx_axBW
                })
               (levelLub_go15 z'_axBS r_axBZ))
            l_axBY;
        Tip -> z'_axBS
      }
end Rec }

Rec {
-- RHS size: {terms: 69, types: 59, coercions: 0, joins: 0/0}
defApp
  = \ f4_alXn0 ds_dm0v1 ds1_dm0v2 ->
      case ds_dm0v1 of {
        [] ->
          case ds1_dm0v2 of wild2_X6R {
            [] -> Def f4_alXn0 [];
            : ds2_dm0vH es_alXn2 ->
              case ds2_dm0vH of {
                __DEFAULT -> Def f4_alXn0 wild2_X6R;
                Apply a_alXn1 ->
                  case a_alXn1 of { Arg ds3_d3o6D ds4_d3o6E ->
                  case canProject f4_alXn0 ds4_d3o6E of {
                    Nothing -> Def f4_alXn0 wild2_X6R;
                    Just v_alXn3 ->
                      case v_alXn3 of { Arg ai_alXn7 v1_alXn8 ->
                      case ai_alXn7 of
                      { ArgInfo ds5_d3o6M ds6_d3o6N ds7_d3o6O ds8_d3o6P ds9_d3o6Q ->
                      case ds6_d3o6N of { Modality ds10_d3o7g ds11_d3o7h ds12_d3o7i ->
                      case ds10_d3o7g of {
                        __DEFAULT -> $fApplyTerm_$sapplyTermE absurd v1_alXn8 es_alXn2;
                        Irrelevant ->
                          case v1_alXn8 of wild10_XJK {
                            __DEFAULT ->
                              $fApplyTerm_$sapplyTermE absurd (DontCare wild10_XJK) es_alXn2;
                            DontCare ds13_d8PPv ->
                              $fApplyTerm_$sapplyTermE absurd wild10_XJK es_alXn2
                          }
                      }
                      }
                      }
                      }
                  }
                  }
              }
          };
        : ipv_sm32l ipv1_sm32s ->
          Def f4_alXn0 (++_$s++ ds1_dm0v2 ipv_sm32l ipv1_sm32s)
      }

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
$fApplyTerm_$capplyE = $fApplyTerm_$sapplyTermE absurd

-- RHS size: {terms: 8, types: 10, coercions: 0, joins: 0/0}
$fApplyTerm_$capply
  = \ t1_add8K args_add8L ->
      $fApplyTerm_$sapplyTermE absurd t1_add8K (map Apply args_add8L)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyTerm = C:Apply $fApplyTerm_$capply $fApplyTerm_$capplyE

-- RHS size: {terms: 20, types: 9, coercions: 0, joins: 0/0}
$fOrdPlusLevel'_$ccompare1
  = \ w_sme51 w1_sme52 ->
      case w_sme51 of { Plus ww1_sme55 ww2_sme56 ->
      case w1_sme52 of { Plus ww4_sme5a ww5_sme5b ->
      case $fOrdPlusLevel'_$ccompare ww2_sme56 ww5_sme5b of {
        LT -> LT;
        EQ -> compareInteger ww1_sme55 ww4_sme5a;
        GT -> GT
      }
      }
      }

-- RHS size: {terms: 25, types: 10, coercions: 0, joins: 0/0}
$fOrdPlusLevel'_$c<
  = \ w_sme5e w1_sme5f ->
      case w_sme5e of { Plus ww1_sme5i ww2_sme5j ->
      case w1_sme5f of { Plus ww4_sme5n ww5_sme5o ->
      case $fOrdPlusLevel'_$ccompare ww2_sme5j ww5_sme5o of {
        LT -> True;
        EQ ->
          case compareInteger ww1_sme5i ww4_sme5n of {
            __DEFAULT -> False;
            LT -> True
          };
        GT -> False
      }
      }
      }

-- RHS size: {terms: 25, types: 10, coercions: 0, joins: 0/0}
$fOrdPlusLevel'_$c>
  = \ w_sme5r w1_sme5s ->
      case w_sme5r of { Plus ww1_sme5v ww2_sme5w ->
      case w1_sme5s of { Plus ww4_sme5A ww5_sme5B ->
      case $fOrdPlusLevel'_$ccompare ww2_sme5w ww5_sme5B of {
        LT -> False;
        EQ ->
          case compareInteger ww1_sme5v ww4_sme5A of {
            __DEFAULT -> False;
            GT -> True
          };
        GT -> True
      }
      }
      }

-- RHS size: {terms: 25, types: 10, coercions: 0, joins: 0/0}
$fOrdPlusLevel'_$c>=
  = \ w_sme5E w1_sme5F ->
      case w_sme5E of { Plus ww1_sme5I ww2_sme5J ->
      case w1_sme5F of { Plus ww4_sme5N ww5_sme5O ->
      case $fOrdPlusLevel'_$ccompare ww2_sme5J ww5_sme5O of {
        LT -> False;
        EQ ->
          case compareInteger ww1_sme5I ww4_sme5N of {
            __DEFAULT -> True;
            LT -> False
          };
        GT -> True
      }
      }
      }

-- RHS size: {terms: 25, types: 10, coercions: 0, joins: 0/0}
$fOrdPlusLevel'_$c<=
  = \ w_sme5R w1_sme5S ->
      case w_sme5R of { Plus ww1_sme5V ww2_sme5W ->
      case w1_sme5S of { Plus ww4_sme60 ww5_sme61 ->
      case $fOrdPlusLevel'_$ccompare ww2_sme5W ww5_sme61 of {
        LT -> True;
        EQ ->
          case compareInteger ww1_sme5V ww4_sme60 of {
            __DEFAULT -> True;
            GT -> False
          };
        GT -> False
      }
      }
      }

-- RHS size: {terms: 25, types: 10, coercions: 0, joins: 0/0}
$fOrdPlusLevel'_$cmin
  = \ w_sme64 w1_sme65 ->
      case w_sme64 of ww_sme67 { Plus ww1_sme68 ww2_sme69 ->
      case w1_sme65 of ww3_sme6c { Plus ww4_sme6d ww5_sme6e ->
      case $fOrdPlusLevel'_$ccompare ww2_sme69 ww5_sme6e of {
        LT -> ww_sme67;
        EQ ->
          case compareInteger ww1_sme68 ww4_sme6d of {
            __DEFAULT -> ww_sme67;
            GT -> ww3_sme6c
          };
        GT -> ww3_sme6c
      }
      }
      }

-- RHS size: {terms: 25, types: 10, coercions: 0, joins: 0/0}
$fOrdPlusLevel'_$cmax
  = \ w_sme6k w1_sme6l ->
      case w_sme6k of ww_sme6n { Plus ww1_sme6o ww2_sme6p ->
      case w1_sme6l of ww3_sme6s { Plus ww4_sme6t ww5_sme6u ->
      case $fOrdPlusLevel'_$ccompare ww2_sme6p ww5_sme6u of {
        LT -> ww3_sme6s;
        EQ ->
          case compareInteger ww1_sme6o ww4_sme6t of {
            __DEFAULT -> ww3_sme6s;
            GT -> ww_sme6n
          };
        GT -> ww_sme6n
      }
      }
      }

-- RHS size: {terms: 18, types: 9, coercions: 0, joins: 0/0}
$fEqPlusLevel'_$c==
  = \ w_sme6A w1_sme6B ->
      case w_sme6A of { Plus ww1_sme6E ww2_sme6F ->
      case w1_sme6B of { Plus ww4_sme6J ww5_sme6K ->
      case eqInteger# ww1_sme6E ww4_sme6J of {
        __DEFAULT -> False;
        1# -> $fEqTerm_$c== ww2_sme6F ww5_sme6K
      }
      }
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fEqTerm_$c/=
  = \ eta1_B2 eta2_Xj7 ->
      case $fEqTerm_$c== eta1_B2 eta2_Xj7 of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fEqTerm = C:Eq $fEqTerm_$c== $fEqTerm_$c/=

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq_rmk67 = $fEqType'' $fEqTerm

-- RHS size: {terms: 81, types: 132, coercions: 0, joins: 4/5}
$wlevelMax
  = \ w_sme4F w1_sme4G ->
      case $wlmax w_sme4F [] (map levelLub_expandPlus w1_sme4G) of
      { (# ww1_smeoE, ww2_smeoF #) ->
      join {
        exit_XeX eta1_B1
          = let { as_sm4ID = levelLub_go15 [] eta1_B1 } in
            join {
              exit1_XIF eta2_XtK
                = case gtInteger# ww1_smeoE eta2_XtK of {
                    __DEFAULT -> (# $mLargeSort1, as_sm4ID #);
                    1# -> (# ww1_smeoE, as_sm4ID #)
                  } } in
            joinrec {
              go1_a1Ry ds_a1Rz eta2_XtN
                = case ds_a1Rz of {
                    [] -> jump exit1_XIF eta2_XtN;
                    : y_a1RC ys_a1RD ->
                      case y_a1RC of { Plus n_alXrk ds1_dlZTa ->
                      case leInteger# eta2_XtN n_alXrk of {
                        __DEFAULT -> jump go1_a1Ry ys_a1RD eta2_XtN;
                        1# -> jump go1_a1Ry ys_a1RD n_alXrk
                      }
                      }
                  }; } in
            jump go1_a1Ry as_sm4ID $mLargeSort1 } in
      joinrec {
        go1_a1Ry ds_a1Rz eta1_B1
          = case ds_a1Rz of {
              [] -> jump exit_XeX eta1_B1;
              : y_a1RC ys_a1RD ->
                case y_a1RC of { (k1_a2Fli, x_a2Flj) ->
                jump go1_a1Ry
                  ys_a1RD
                  ($sfromListWithKey_$sgo8 levelLub2 k1_a2Fli x_a2Flj eta1_B1)
                }
            }; } in
      jump go1_a1Ry (map levelLub1 ww2_smeoF) Tip
      }

-- RHS size: {terms: 20, types: 13, coercions: 0, joins: 0/0}
$wlevelLub
  = \ ww_sme4P ww1_sme4Q ww2_sme4U ww3_sme4V ->
      case leInteger# ww_sme4P ww2_sme4U of {
        __DEFAULT -> $wlevelMax ww_sme4P (++ ww1_sme4Q ww3_sme4V);
        1# -> $wlevelMax ww2_sme4U (++ ww1_sme4Q ww3_sme4V)
      }

-- RHS size: {terms: 18, types: 24, coercions: 0, joins: 0/0}
levelLub
  = \ w_sme4L w1_sme4M ->
      case w_sme4L of { Max ww1_sme4P ww2_sme4Q ->
      case w1_sme4M of { Max ww4_sme4U ww5_sme4V ->
      case $wlevelLub ww1_sme4P ww2_sme4Q ww4_sme4U ww5_sme4V of
      { (# ww7_smeoK, ww8_smeoL #) ->
      Max ww7_smeoK ww8_smeoL
      }
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 10, joins: 0/0}
$fSubstTerm
  = C:Subst
      ($fDeBruijnTerm `cast` <Co:3>)
      ($fApplyExtLamInfo_$sapplySubstTerm `cast` <Co:7>)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$dEq1_rmk68 = $fEqElim' $fSubstTerm $fEqTerm

-- RHS size: {terms: 23, types: 12, coercions: 0, joins: 0/0}
$fEqPlusLevel'_$c/=
  = \ eta1_B2 eta2_Xjj ->
      case eta1_B2 of { Plus a1_alXHB a2_alXHC ->
      case eta2_Xjj of { Plus b1_alXHD b2_alXHE ->
      case eqInteger# a1_alXHB b1_alXHD of {
        __DEFAULT -> True;
        1# ->
          case $fEqTerm_$c== a2_alXHC b2_alXHE of {
            False -> True;
            True -> False
          }
      }
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fEqPlusLevel' = C:Eq $fEqPlusLevel'_$c== $fEqPlusLevel'_$c/=

-- RHS size: {terms: 19, types: 15, coercions: 0, joins: 0/0}
$fEqLevel'_$c==
  = \ w_sme6N w1_sme6O ->
      case w_sme6N of { Max ww1_sme6R ww2_sme6S ->
      case w1_sme6O of { Max ww4_sme6W ww5_sme6X ->
      case eqInteger# ww1_sme6R ww4_sme6W of {
        __DEFAULT -> False;
        1# -> $fEq[]_$c== $fEqPlusLevel' ww2_sme6S ww5_sme6X
      }
      }
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
$fOrdPlusLevel'
  = C:Ord
      $fEqPlusLevel'
      $fOrdPlusLevel'_$ccompare1
      $fOrdPlusLevel'_$c<
      $fOrdPlusLevel'_$c<=
      $fOrdPlusLevel'_$c>
      $fOrdPlusLevel'_$c>=
      $fOrdPlusLevel'_$cmax
      $fOrdPlusLevel'_$cmin

-- RHS size: {terms: 21, types: 15, coercions: 0, joins: 0/0}
$fOrdLevel'_$ccompare
  = \ w_sme70 w1_sme71 ->
      case w_sme70 of { Max ww1_sme74 ww2_sme75 ->
      case w1_sme71 of { Max ww4_sme79 ww5_sme7a ->
      case compareInteger ww1_sme74 ww4_sme79 of {
        LT -> LT;
        EQ -> $fOrd[]_$ccompare $fOrdPlusLevel' ww2_sme75 ww5_sme7a;
        GT -> GT
      }
      }
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdTerm_$c<=
  = \ x_atgJ y_atgK ->
      case $fOrdPlusLevel'_$ccompare x_atgJ y_atgK of {
        __DEFAULT -> True;
        GT -> False
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdTerm_$cmin
  = \ x_a3Yw y_a3Yx ->
      case $fOrdPlusLevel'_$ccompare x_a3Yw y_a3Yx of {
        __DEFAULT -> x_a3Yw;
        GT -> y_a3Yx
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdTerm_$c<
  = \ x_atgE y_atgF ->
      case $fOrdPlusLevel'_$ccompare x_atgE y_atgF of {
        __DEFAULT -> False;
        LT -> True
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdTerm_$c>
  = \ x_atgO y_atgP ->
      case $fOrdPlusLevel'_$ccompare x_atgO y_atgP of {
        __DEFAULT -> False;
        GT -> True
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdTerm_$c>=
  = \ x_atgT y_atgU ->
      case $fOrdPlusLevel'_$ccompare x_atgT y_atgU of {
        __DEFAULT -> True;
        LT -> False
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdTerm_$cmax
  = \ x_a3Yp y_a3Yq ->
      case $fOrdPlusLevel'_$ccompare x_a3Yp y_a3Yq of {
        __DEFAULT -> y_a3Yq;
        GT -> x_a3Yp
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
$fOrdTerm
  = C:Ord
      $fEqTerm
      $fOrdPlusLevel'_$ccompare
      $fOrdTerm_$c<
      $fOrdTerm_$c<=
      $fOrdTerm_$c>
      $fOrdTerm_$c>=
      $fOrdTerm_$cmax
      $fOrdTerm_$cmin

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$s$fOrd(,)_$ccompare1 = $fOrdElim' $fSubstTerm $fOrdTerm

-- RHS size: {terms: 191, types: 144, coercions: 0, joins: 4/4}
$fOrdDom'_$s$ccompare
  = \ a_alXGp b_alXGq ->
      case a_alXGp of
      { Dom a1_alXGr a2_alXGs a3_alXGt a4_alXGu a5_alXGv ->
      case b_alXGq of
      { Dom b1_alXGw b2_alXGx b3_alXGy b4_alXGz b5_alXGA ->
      case a1_alXGr of
      { ArgInfo ww1_s3M5k ww2_s3M5l ww3_s3M5m ww4_s3M5n ww5_s3M5o ->
      case b1_alXGw of
      { ArgInfo ww7_s3M5s ww8_s3M5t ww9_s3M5u ww10_s3M5v ww11_s3M5w ->
      case $w$ccompare
             ww1_s3M5k
             ww2_s3M5l
             ww3_s3M5m
             ww4_s3M5n
             ww5_s3M5o
             ww7_s3M5s
             ww8_s3M5t
             ww9_s3M5u
             ww10_s3M5v
             ww11_s3M5w
      of {
        LT -> LT;
        EQ ->
          join {
            $j_sm5BN
              = join {
                  $j1_sm5BJ
                    = case a4_alXGu of {
                        Nothing ->
                          case b4_alXGz of {
                            Nothing ->
                              case a5_alXGv of { El ds1_d8Q2L ds2_d8Q2M ->
                              case b5_alXGA of { El ds4_X8Qut ds5_X8Quv ->
                              $fOrdPlusLevel'_$ccompare ds2_d8Q2M ds5_X8Quv
                              }
                              };
                            Just ipv_a1vWD -> LT
                          };
                        Just a7_a1vWx ->
                          case b4_alXGz of {
                            Nothing -> GT;
                            Just b7_a1vWA ->
                              case $fOrdPlusLevel'_$ccompare a7_a1vWx b7_a1vWA of {
                                LT -> LT;
                                EQ ->
                                  case a5_alXGv of { El ds1_d8Q2L ds2_d8Q2M ->
                                  case b5_alXGA of { El ds4_X8Quy ds5_X8QuA ->
                                  $fOrdPlusLevel'_$ccompare ds2_d8Q2M ds5_X8QuA
                                  }
                                  };
                                GT -> GT
                              }
                          }
                      } } in
                case a3_alXGt of {
                  False ->
                    case b3_alXGy of {
                      False -> jump $j1_sm5BJ;
                      True -> LT
                    };
                  True ->
                    case b3_alXGy of {
                      False -> GT;
                      True -> jump $j1_sm5BJ
                    }
                } } in
          case a2_alXGs of {
            Nothing ->
              case b2_alXGx of {
                Nothing -> jump $j_sm5BN;
                Just ipv_a1vWD -> LT
              };
            Just a7_a1vWx ->
              case b2_alXGx of {
                Nothing -> GT;
                Just b7_a1vWA ->
                  case a7_a1vWx of { WithOrigin ww17_s3Law ww18_s3Lax ->
                  case b7_a1vWA of { WithOrigin ww20_s3LaB ww21_s3LaC ->
                  join {
                    $j1_s3vhW a#_a3gZt
                      = join {
                          $j2_s3vhU b#_a3gZu
                            = case <# a#_a3gZt b#_a3gZu of {
                                __DEFAULT ->
                                  case ==# a#_a3gZt b#_a3gZu of {
                                    __DEFAULT -> GT;
                                    1# ->
                                      case ww18_s3Lax of { Ranged ds_d3o6r ds1_d3o6s ->
                                      case ww21_s3LaC of { Ranged ds2_X3oXC ds3_X3oXE ->
                                      case $fOrd[]_$s$ccompare1 ds1_d3o6s ds3_X3oXE of {
                                        LT -> LT;
                                        EQ -> jump $j_sm5BN;
                                        GT -> GT
                                      }
                                      }
                                      }
                                  };
                                1# -> LT
                              } } in
                        case ww20_s3LaB of {
                          UserWritten -> jump $j2_s3vhU 0#;
                          Inserted -> jump $j2_s3vhU 1#;
                          Reflected -> jump $j2_s3vhU 2#;
                          CaseSplit -> jump $j2_s3vhU 3#;
                          Substitution -> jump $j2_s3vhU 4#;
                          ExpandedPun -> jump $j2_s3vhU 5#;
                          Generalization -> jump $j2_s3vhU 6#
                        } } in
                  case ww17_s3Law of {
                    UserWritten -> jump $j1_s3vhW 0#;
                    Inserted -> jump $j1_s3vhW 1#;
                    Reflected -> jump $j1_s3vhW 2#;
                    CaseSplit -> jump $j1_s3vhW 3#;
                    Substitution -> jump $j1_s3vhW 4#;
                    ExpandedPun -> jump $j1_s3vhW 5#;
                    Generalization -> jump $j1_s3vhW 6#
                  }
                  }
                  }
              }
          };
        GT -> GT
      }
      }
      }
      }
      }

-- RHS size: {terms: 179, types: 108, coercions: 0, joins: 4/4}
$fOrdDom'_$s$ccompare1
  = \ a_alXGp b_alXGq ->
      case a_alXGp of
      { Dom a1_alXGr a2_alXGs a3_alXGt a4_alXGu a5_alXGv ->
      case b_alXGq of
      { Dom b1_alXGw b2_alXGx b3_alXGy b4_alXGz b5_alXGA ->
      case a1_alXGr of
      { ArgInfo ww1_s3M5k ww2_s3M5l ww3_s3M5m ww4_s3M5n ww5_s3M5o ->
      case b1_alXGw of
      { ArgInfo ww7_s3M5s ww8_s3M5t ww9_s3M5u ww10_s3M5v ww11_s3M5w ->
      case $w$ccompare
             ww1_s3M5k
             ww2_s3M5l
             ww3_s3M5m
             ww4_s3M5n
             ww5_s3M5o
             ww7_s3M5s
             ww8_s3M5t
             ww9_s3M5u
             ww10_s3M5v
             ww11_s3M5w
      of {
        LT -> LT;
        EQ ->
          join {
            $j_sm5Bk
              = join {
                  $j1_sm5Bg
                    = case a4_alXGu of {
                        Nothing ->
                          case b4_alXGz of {
                            Nothing -> $fOrdPlusLevel'_$ccompare a5_alXGv b5_alXGA;
                            Just ipv_a1vWD -> LT
                          };
                        Just a7_a1vWx ->
                          case b4_alXGz of {
                            Nothing -> GT;
                            Just b7_a1vWA ->
                              case $fOrdPlusLevel'_$ccompare a7_a1vWx b7_a1vWA of {
                                LT -> LT;
                                EQ -> $fOrdPlusLevel'_$ccompare a5_alXGv b5_alXGA;
                                GT -> GT
                              }
                          }
                      } } in
                case a3_alXGt of {
                  False ->
                    case b3_alXGy of {
                      False -> jump $j1_sm5Bg;
                      True -> LT
                    };
                  True ->
                    case b3_alXGy of {
                      False -> GT;
                      True -> jump $j1_sm5Bg
                    }
                } } in
          case a2_alXGs of {
            Nothing ->
              case b2_alXGx of {
                Nothing -> jump $j_sm5Bk;
                Just ipv_a1vWD -> LT
              };
            Just a7_a1vWx ->
              case b2_alXGx of {
                Nothing -> GT;
                Just b7_a1vWA ->
                  case a7_a1vWx of { WithOrigin ww17_s3Law ww18_s3Lax ->
                  case b7_a1vWA of { WithOrigin ww20_s3LaB ww21_s3LaC ->
                  join {
                    $j1_s3vhW a#_a3gZt
                      = join {
                          $j2_s3vhU b#_a3gZu
                            = case <# a#_a3gZt b#_a3gZu of {
                                __DEFAULT ->
                                  case ==# a#_a3gZt b#_a3gZu of {
                                    __DEFAULT -> GT;
                                    1# ->
                                      case ww18_s3Lax of { Ranged ds_d3o6r ds1_d3o6s ->
                                      case ww21_s3LaC of { Ranged ds2_X3oXB ds3_X3oXD ->
                                      case $fOrd[]_$s$ccompare1 ds1_d3o6s ds3_X3oXD of {
                                        LT -> LT;
                                        EQ -> jump $j_sm5Bk;
                                        GT -> GT
                                      }
                                      }
                                      }
                                  };
                                1# -> LT
                              } } in
                        case ww20_s3LaB of {
                          UserWritten -> jump $j2_s3vhU 0#;
                          Inserted -> jump $j2_s3vhU 1#;
                          Reflected -> jump $j2_s3vhU 2#;
                          CaseSplit -> jump $j2_s3vhU 3#;
                          Substitution -> jump $j2_s3vhU 4#;
                          ExpandedPun -> jump $j2_s3vhU 5#;
                          Generalization -> jump $j2_s3vhU 6#
                        } } in
                  case ww17_s3Law of {
                    UserWritten -> jump $j1_s3vhW 0#;
                    Inserted -> jump $j1_s3vhW 1#;
                    Reflected -> jump $j1_s3vhW 2#;
                    CaseSplit -> jump $j1_s3vhW 3#;
                    Substitution -> jump $j1_s3vhW 4#;
                    ExpandedPun -> jump $j1_s3vhW 5#;
                    Generalization -> jump $j1_s3vhW 6#
                  }
                  }
                  }
              }
          };
        GT -> GT
      }
      }
      }
      }
      }

-- RHS size: {terms: 349, types: 201, coercions: 0, joins: 2/2}
$fOrdSort'_$ccompare
  = \ a_alXI1 b_alXI2 ->
      case a_alXI1 of wild1_XoL {
        __DEFAULT ->
          case dataToTag# wild1_XoL of a#_alXIB { __DEFAULT ->
          case dataToTag# b_alXI2 of b#_alXIC { __DEFAULT ->
          case <# a#_alXIB b#_alXIC of {
            __DEFAULT ->
              case ==# a#_alXIB b#_alXIC of {
                __DEFAULT -> GT;
                1# -> EQ
              };
            1# -> LT
          }
          }
          };
        Univ a1_alXI3 a2_alXI4 ->
          case b_alXI2 of {
            __DEFAULT -> LT;
            Univ b1_alXI5 b2_alXI6 ->
              case a1_alXI3 of {
                UProp ->
                  case b1_alXI5 of {
                    UProp -> $fOrdLevel'_$ccompare a2_alXI4 b2_alXI6;
                    UType -> LT;
                    USSet -> LT
                  };
                UType ->
                  case b1_alXI5 of {
                    UProp -> GT;
                    UType -> $fOrdLevel'_$ccompare a2_alXI4 b2_alXI6;
                    USSet -> LT
                  };
                USSet ->
                  case b1_alXI5 of {
                    __DEFAULT -> GT;
                    USSet -> $fOrdLevel'_$ccompare a2_alXI4 b2_alXI6
                  }
              }
          };
        Inf a1_alXI7 a2_alXI8 ->
          case b_alXI2 of {
            __DEFAULT -> LT;
            Univ ds_dm0Oy ds1_dm0Oz -> GT;
            Inf b1_alXI9 b2_alXIa ->
              case a1_alXI7 of {
                UProp ->
                  case b1_alXI9 of {
                    UProp -> compareInteger a2_alXI8 b2_alXIa;
                    UType -> LT;
                    USSet -> LT
                  };
                UType ->
                  case b1_alXI9 of {
                    UProp -> GT;
                    UType -> compareInteger a2_alXI8 b2_alXIa;
                    USSet -> LT
                  };
                USSet ->
                  case b1_alXI9 of {
                    __DEFAULT -> GT;
                    USSet -> compareInteger a2_alXI8 b2_alXIa
                  }
              }
          };
        PiSort a1_alXIb a2_alXIc a3_alXId ->
          case dataToTag# b_alXI2 of b#_alXIe { __DEFAULT ->
          case <# b#_alXIe 6# of {
            __DEFAULT ->
              case b_alXI2 of {
                __DEFAULT -> LT;
                PiSort b1_alXIf b2_alXIg b3_alXIh ->
                  case $fOrdDom'_$s$ccompare1 a1_alXIb b1_alXIf of {
                    LT -> LT;
                    EQ ->
                      case $fOrdSort'_$ccompare a2_alXIc b2_alXIg of {
                        LT -> LT;
                        EQ ->
                          join {
                            fail_sm4Io _
                              = join {
                                  $j_smftP karg_smeJJ
                                    = case a3_alXId of {
                                        Abs ds1_dddYL v_addbG ->
                                          $fOrdSort'_$ccompare v_addbG karg_smeJJ;
                                        NoAbs ds1_dddYM v_addbH ->
                                          $fOrdSort'_$ccompare
                                            ($fApplyRewriteRule_$s$capplySubst absBody1 v_addbH)
                                            karg_smeJJ
                                      } } in
                                case b3_alXIh of {
                                  Abs ds1_dddYL v_addbG -> jump $j_smftP v_addbG;
                                  NoAbs ds1_dddYM v_addbH ->
                                    jump $j_smftP
                                      ($fApplyRewriteRule_$s$capplySubst absBody1 v_addbH)
                                } } in
                          case a3_alXId of {
                            Abs ipv_sm2NH ipv1_sm2NI -> jump fail_sm4Io void#;
                            NoAbs ds_dm0ZD a4_alX7n ->
                              case b3_alXIh of {
                                Abs ipv_sm2NL ipv1_sm2NM -> jump fail_sm4Io void#;
                                NoAbs ds1_dm0ZE b4_alX7o -> $fOrdSort'_$ccompare a4_alX7n b4_alX7o
                              }
                          };
                        GT -> GT
                      };
                    GT -> GT
                  }
              };
            1# -> GT
          }
          };
        FunSort a1_alXIi a2_alXIj ->
          case dataToTag# b_alXI2 of b#_alXIk { __DEFAULT ->
          case <# b#_alXIk 7# of {
            __DEFAULT ->
              case b_alXI2 of {
                __DEFAULT -> LT;
                FunSort b1_alXIl b2_alXIm ->
                  case $fOrdSort'_$ccompare a1_alXIi b1_alXIl of {
                    LT -> LT;
                    EQ -> $fOrdSort'_$ccompare a2_alXIj b2_alXIm;
                    GT -> GT
                  }
              };
            1# -> GT
          }
          };
        UnivSort a1_alXIn ->
          case dataToTag# b_alXI2 of b#_alXIo { __DEFAULT ->
          case <# b#_alXIo 8# of {
            __DEFAULT ->
              case b_alXI2 of {
                __DEFAULT -> LT;
                UnivSort b1_alXIp -> $fOrdSort'_$ccompare a1_alXIn b1_alXIp
              };
            1# -> GT
          }
          };
        MetaS dt_dm2HG dt1_dm2HH a2_alXIr ->
          case dataToTag# b_alXI2 of b#_alXIs { __DEFAULT ->
          case <# b#_alXIs 9# of {
            __DEFAULT ->
              case b_alXI2 of {
                __DEFAULT -> LT;
                MetaS dt2_dm2HI dt3_dm2HJ b2_alXIu ->
                  case eqWord# dt_dm2HG dt2_dm2HI of {
                    __DEFAULT ->
                      case leWord# dt_dm2HG dt2_dm2HI of {
                        __DEFAULT -> GT;
                        1# -> LT
                      };
                    1# ->
                      case eqWord# dt1_dm2HH dt3_dm2HJ of {
                        __DEFAULT ->
                          case leWord# dt1_dm2HH dt3_dm2HJ of {
                            __DEFAULT -> GT;
                            1# -> LT
                          };
                        1# -> $fOrd[]_$ccompare $s$fOrd(,)_$ccompare1 a2_alXIr b2_alXIu
                      }
                  }
              };
            1# -> GT
          }
          };
        DefS a1_alXIv a2_alXIw ->
          case b_alXI2 of {
            __DEFAULT -> GT;
            DefS b1_alXIx b2_alXIy ->
              case a1_alXIv of { QName ww1_s6e60 ww2_s6e61 ->
              case ww2_s6e61 of
              { Name ww4_s6e64 ww5_s6e6a ww6_s6e6b ww7_s6e6c ww8_s6e6d
                     ww9_s6e6e ->
              case ww4_s6e64 of { NameId ww11_smhET ww12_smhEU ->
              case b1_alXIx of { QName ww14_s6e6j ww15_s6e6k ->
              case ww15_s6e6k of
              { Name ww17_s6e6n ww18_s6e6t ww19_s6e6u ww20_s6e6v ww21_s6e6w
                     ww22_s6e6x ->
              case ww17_s6e6n of { NameId ww24_smhEX ww25_smhEY ->
              case eqWord# ww11_smhET ww24_smhEX of {
                __DEFAULT ->
                  case leWord# ww11_smhET ww24_smhEX of {
                    __DEFAULT -> GT;
                    1# -> LT
                  };
                1# ->
                  case eqWord# ww12_smhEU ww25_smhEY of {
                    __DEFAULT ->
                      case leWord# ww12_smhEU ww25_smhEY of {
                        __DEFAULT -> GT;
                        1# -> LT
                      };
                    1# -> $fOrd[]_$ccompare $s$fOrd(,)_$ccompare1 a2_alXIw b2_alXIy
                  }
              }
              }
              }
              }
              }
              }
              };
            DummyS ds_dm0OU -> LT
          };
        DummyS a1_alXIz ->
          case b_alXI2 of {
            __DEFAULT -> GT;
            DummyS b1_alXIA -> $fOrd[]_$s$ccompare1 a1_alXIz b1_alXIA
          }
      }

-- RHS size: {terms: 276, types: 187, coercions: 0, joins: 2/2}
$fEqSort'_$c==
  = \ ds_dm0P2 ds1_dm0P3 ->
      case ds_dm0P2 of {
        Univ a1_alXID a2_alXIE ->
          case ds1_dm0P3 of {
            __DEFAULT -> False;
            Univ b1_alXIF b2_alXIG ->
              case a1_alXID of {
                UProp ->
                  case b1_alXIF of {
                    __DEFAULT -> False;
                    UProp -> $fEqLevel'_$c== a2_alXIE b2_alXIG
                  };
                UType ->
                  case b1_alXIF of {
                    __DEFAULT -> False;
                    UType -> $fEqLevel'_$c== a2_alXIE b2_alXIG
                  };
                USSet ->
                  case b1_alXIF of {
                    __DEFAULT -> False;
                    USSet -> $fEqLevel'_$c== a2_alXIE b2_alXIG
                  }
              }
          };
        Inf a1_alXIH a2_alXII ->
          case ds1_dm0P3 of {
            __DEFAULT -> False;
            Inf b1_alXIJ b2_alXIK ->
              case a1_alXIH of {
                UProp ->
                  case b1_alXIJ of {
                    __DEFAULT -> False;
                    UProp ->
                      case eqInteger# a2_alXII b2_alXIK of wild5_aks4 { __DEFAULT ->
                      tagToEnum# wild5_aks4
                      }
                  };
                UType ->
                  case b1_alXIJ of {
                    __DEFAULT -> False;
                    UType ->
                      case eqInteger# a2_alXII b2_alXIK of wild5_aks4 { __DEFAULT ->
                      tagToEnum# wild5_aks4
                      }
                  };
                USSet ->
                  case b1_alXIJ of {
                    __DEFAULT -> False;
                    USSet ->
                      case eqInteger# a2_alXII b2_alXIK of wild5_aks4 { __DEFAULT ->
                      tagToEnum# wild5_aks4
                      }
                  }
              }
          };
        SizeUniv ->
          case ds1_dm0P3 of {
            __DEFAULT -> False;
            SizeUniv -> True
          };
        LockUniv ->
          case ds1_dm0P3 of {
            __DEFAULT -> False;
            LockUniv -> True
          };
        LevelUniv ->
          case ds1_dm0P3 of {
            __DEFAULT -> False;
            LevelUniv -> True
          };
        IntervalUniv ->
          case ds1_dm0P3 of {
            __DEFAULT -> False;
            IntervalUniv -> True
          };
        PiSort a1_alXIL a2_alXIM a3_alXIN ->
          case ds1_dm0P3 of {
            __DEFAULT -> False;
            PiSort b1_alXIO b2_alXIP b3_alXIQ ->
              case $fEqDom'_$c== $fEqTerm a1_alXIL b1_alXIO of {
                False -> False;
                True ->
                  case $fEqSort'_$c== a2_alXIM b2_alXIP of {
                    False -> False;
                    True ->
                      join {
                        fail_sm4Iq _
                          = join {
                              $j_smfuF karg_smeKz
                                = case a3_alXIN of {
                                    Abs ds3_dddYL v_addbG -> $fEqSort'_$c== v_addbG karg_smeKz;
                                    NoAbs ds3_dddYM v_addbH ->
                                      $fEqSort'_$c==
                                        ($fApplyRewriteRule_$s$capplySubst absBody1 v_addbH)
                                        karg_smeKz
                                  } } in
                            case b3_alXIQ of {
                              Abs ds3_dddYL v_addbG -> jump $j_smfuF v_addbG;
                              NoAbs ds3_dddYM v_addbH ->
                                jump $j_smfuF ($fApplyRewriteRule_$s$capplySubst absBody1 v_addbH)
                            } } in
                      case a3_alXIN of {
                        Abs ipv_sm2Nv ipv1_sm2Nw -> jump fail_sm4Iq void#;
                        NoAbs ds2_dm11d a_alX7s ->
                          case b3_alXIQ of {
                            Abs ipv_sm2Nz ipv1_sm2NA -> jump fail_sm4Iq void#;
                            NoAbs ds3_dm11e b_alX7t -> $fEqSort'_$c== a_alX7s b_alX7t
                          }
                      }
                  }
              }
          };
        FunSort a1_alXIR a2_alXIS ->
          case ds1_dm0P3 of {
            __DEFAULT -> False;
            FunSort b1_alXIT b2_alXIU ->
              case $fEqSort'_$c== a1_alXIR b1_alXIT of {
                False -> False;
                True -> $fEqSort'_$c== a2_alXIS b2_alXIU
              }
          };
        UnivSort a1_alXIV ->
          case ds1_dm0P3 of {
            __DEFAULT -> False;
            UnivSort b1_alXIW -> $fEqSort'_$c== a1_alXIV b1_alXIW
          };
        MetaS dt_dm2HK dt1_dm2HL a2_alXIY ->
          case ds1_dm0P3 of {
            __DEFAULT -> False;
            MetaS dt2_dm2HM dt3_dm2HN b2_alXJ0 ->
              case eqWord# dt_dm2HK dt2_dm2HM of {
                __DEFAULT -> False;
                1# ->
                  case eqWord# dt1_dm2HL dt3_dm2HN of {
                    __DEFAULT -> False;
                    1# -> $fEq[]_$c== $dEq1_rmk68 a2_alXIY b2_alXJ0
                  }
              }
          };
        DefS a1_alXJ1 a2_alXJ2 ->
          case ds1_dm0P3 of {
            __DEFAULT -> False;
            DefS b1_alXJ3 b2_alXJ4 ->
              case a1_alXJ1 of { QName ds2_d6aXk ds3_d6aXl ->
              case ds3_d6aXl of
              { Name ds4_d6aXp ds5_d6aXq ds6_d6aXr ds7_d6aXs ds8_d6aXt
                     ds9_d6aXu ->
              case ds4_d6aXp of { NameId dt_smhF1 dt1_smhF2 ->
              case b1_alXJ3 of { QName ds10_X6baj ds11_X6bal ->
              case ds11_X6bal of
              { Name ds12_X6bau ds13_X6baw ds14_X6bay ds15_X6baA ds16_X6baC
                     ds17_X6baE ->
              case ds12_X6bau of { NameId dt2_smhF5 dt3_smhF6 ->
              case eqWord# dt_smhF1 dt2_smhF5 of {
                __DEFAULT -> False;
                1# ->
                  case eqWord# dt1_smhF2 dt3_smhF6 of {
                    __DEFAULT -> False;
                    1# -> $fEq[]_$c== $dEq1_rmk68 a2_alXJ2 b2_alXJ4
                  }
              }
              }
              }
              }
              }
              }
              }
          };
        DummyS a1_alXJ5 ->
          case ds1_dm0P3 of {
            __DEFAULT -> False;
            DummyS b1_alXJ6 -> eqString a1_alXJ5 b1_alXJ6
          }
      }

-- RHS size: {terms: 58, types: 41, coercions: 0, joins: 0/0}
$sfromListWithKey_$sgo8
  = \ @ a1_a6lLn ds_a6lLp kx_a6lLq x_a6lLr ds1_a6lLs ->
      case kx_a6lLq of kx1_a6lLt { __DEFAULT ->
      case ds1_a6lLs of {
        Bin ipv_a6lLv ipv1_a6lLw ipv2_a6lLx ipv3_a6lLy ipv4_a6lLz ->
          case $fOrdPlusLevel'_$ccompare kx1_a6lLt ipv1_a6lLw of {
            LT ->
              balanceL
                ipv1_a6lLw
                ipv2_a6lLx
                ($sfromListWithKey_$sgo8 ds_a6lLp kx1_a6lLt x_a6lLr ipv3_a6lLy)
                ipv4_a6lLz;
            EQ ->
              case ds_a6lLp kx1_a6lLt x_a6lLr ipv2_a6lLx of x'_a6lLE
              { __DEFAULT ->
              Bin ipv_a6lLv kx1_a6lLt x'_a6lLE ipv3_a6lLy ipv4_a6lLz
              };
            GT ->
              balanceR
                ipv1_a6lLw
                ipv2_a6lLx
                ipv3_a6lLy
                ($sfromListWithKey_$sgo8 ds_a6lLp kx1_a6lLt x_a6lLr ipv4_a6lLz)
          };
        Tip ->
          case x_a6lLr of x1_a6lLH { __DEFAULT ->
          Bin 1# kx1_a6lLt x1_a6lLH Tip Tip
          }
      }
      }

-- RHS size: {terms: 312, types: 276, coercions: 0, joins: 3/3}
funSort'
  = \ x_a7oU y_a7oV ->
      join {
        fail_sm4IJ _
          = case y_a7oV of wild1_X6R {
              __DEFAULT ->
                case x_a7oU of wild2_X6S {
                  __DEFAULT ->
                    case wild1_X6R of wild3_X6T {
                      __DEFAULT ->
                        join {
                          fail1_sm4IL _
                            = case wild3_X6T of wild4_X6V {
                                __DEFAULT ->
                                  case wild2_X6S of wild5_X6W {
                                    __DEFAULT ->
                                      case wild4_X6V of wild6_X6X {
                                        __DEFAULT ->
                                          join {
                                            fail2_sm4IN _
                                              = case wild6_X6X of wild7_X6Z {
                                                  __DEFAULT ->
                                                    case wild5_X6W of wild8_X70 {
                                                      __DEFAULT ->
                                                        case wild7_X6Z of wild9_X71 {
                                                          __DEFAULT ->
                                                            case wild8_X70 of wild10_X72 {
                                                              __DEFAULT ->
                                                                case wild9_X71 of wild11_X73 {
                                                                  __DEFAULT ->
                                                                    case wild10_X72 of wild12_X74 {
                                                                      __DEFAULT ->
                                                                        case wild11_X73
                                                                        of wild13_X75 {
                                                                          __DEFAULT ->
                                                                            case wild12_X74
                                                                            of wild14_X76 {
                                                                              __DEFAULT ->
                                                                                case wild13_X75
                                                                                of wild15_X77 {
                                                                                  __DEFAULT ->
                                                                                    case wild14_X76
                                                                                    of wild16_X78 {
                                                                                      __DEFAULT ->
                                                                                        case wild15_X77
                                                                                        of wild17_X79 {
                                                                                          __DEFAULT ->
                                                                                            case wild16_X78
                                                                                            of {
                                                                                              __DEFAULT ->
                                                                                                case wild17_X79
                                                                                                of {
                                                                                                  Univ ipv_sm34Q
                                                                                                       ipv1_sm34R ->
                                                                                                    lvl279_rmk5t;
                                                                                                  DummyS ds3_dm08l ->
                                                                                                    univSort'1
                                                                                                };
                                                                                              DummyS ds3_dm08k ->
                                                                                                univSort'1
                                                                                            };
                                                                                          DefS ds3_dm08i
                                                                                               ds4_dm08j ->
                                                                                            univSort'1
                                                                                        };
                                                                                      DefS ds3_dm08g
                                                                                           ds4_dm08h ->
                                                                                        univSort'1
                                                                                    };
                                                                                  UnivSort ds3_dm08f ->
                                                                                    univSort'1
                                                                                };
                                                                              UnivSort ds3_dm08e ->
                                                                                univSort'1
                                                                            };
                                                                          PiSort ds3_dm08b ds4_dm08c
                                                                                 ds5_dm08d ->
                                                                            univSort'1
                                                                        };
                                                                      PiSort ds3_dm088 ds4_dm089
                                                                             ds5_dm08a ->
                                                                        univSort'1
                                                                    };
                                                                  FunSort ds3_dm086 ds4_dm087 ->
                                                                    univSort'1
                                                                };
                                                              FunSort ds3_dm084 ds4_dm085 ->
                                                                univSort'1
                                                            };
                                                          MetaS dt_dm2Hu dt1_dm2Hv ds3_dm083 ->
                                                            Left
                                                              (UnblockOnMeta
                                                                 (MetaId dt_dm2Hu dt1_dm2Hv))
                                                        };
                                                      LevelUniv ->
                                                        case wild7_X6Z of {
                                                          Univ u_alXqg ds3_dlZXN ->
                                                            Right (Inf u_alXqg $mLargeSort1);
                                                          PiSort ds3_dlZXR ds4_dlZXS ds5_dlZXT ->
                                                            univSort'1;
                                                          FunSort ds3_dlZXP ds4_dlZXQ -> univSort'1;
                                                          UnivSort ds3_dlZXU -> univSort'1;
                                                          MetaS dt_dm2Hq dt1_dm2Hr ds3_dlZXO ->
                                                            Left
                                                              (UnblockOnMeta
                                                                 (MetaId dt_dm2Hq dt1_dm2Hr));
                                                          DefS ds3_dlZXV ds4_dlZXW -> univSort'1;
                                                          DummyS ds3_dlZXX -> univSort'1
                                                        };
                                                      MetaS dt_dm2Hs dt1_dm2Ht ds3_dm082 ->
                                                        Left
                                                          (UnblockOnMeta
                                                             (MetaId dt_dm2Hs dt1_dm2Ht))
                                                    };
                                                  LevelUniv -> univSort'1
                                                } } in
                                          case wild5_X6W of {
                                            __DEFAULT -> jump fail2_sm4IN void#;
                                            LevelUniv ->
                                              case wild6_X6X of {
                                                __DEFAULT -> jump fail2_sm4IN void#;
                                                LevelUniv -> lvl280_rmk5u
                                              }
                                          };
                                        SizeUniv ->
                                          case wild5_X6W of {
                                            __DEFAULT -> lvl283_rmk5x;
                                            Inf u_alXqh n_alXqi ->
                                              case eqInteger# n_alXqi $bSmallSort1 of {
                                                __DEFAULT ->
                                                  case geInteger# n_alXqi $mLargeSort1 of {
                                                    __DEFAULT -> lvl282_rmk5w;
                                                    1# -> univSort'1
                                                  };
                                                1# -> lvl283_rmk5x
                                              };
                                            PiSort ds2_dlZXR ds3_dlZXS ds4_dlZXT -> univSort'1;
                                            FunSort ds2_dlZXP ds3_dlZXQ -> univSort'1;
                                            UnivSort ds2_dlZXU -> univSort'1;
                                            MetaS dt_dm2Hq dt1_dm2Hr ds2_dlZXO ->
                                              Left (UnblockOnMeta (MetaId dt_dm2Hq dt1_dm2Hr));
                                            DefS ds2_dlZXV ds3_dlZXW -> univSort'1;
                                            DummyS ds2_dlZXX -> univSort'1
                                          }
                                      };
                                    SizeUniv -> Right wild4_X6V
                                  };
                                IntervalUniv -> univSort'1
                              } } in
                        case wild2_X6S of {
                          __DEFAULT -> jump fail1_sm4IL void#;
                          Univ u_alXqD a_alXqE ->
                            case wild3_X6T of {
                              __DEFAULT -> jump fail1_sm4IL void#;
                              IntervalUniv -> Right (Univ USSet a_alXqE)
                            };
                          IntervalUniv ->
                            case wild3_X6T of wild5_X6W {
                              __DEFAULT -> univSort'1;
                              Univ u_alXqB b_alXqC -> Right wild5_X6W;
                              IntervalUniv -> lvl286_rmk5A
                            }
                        };
                      LockUniv -> univSort'1
                    };
                  LockUniv ->
                    case wild1_X6R of wild3_X6T {
                      __DEFAULT -> Right wild3_X6T;
                      LevelUniv -> univSort'1
                    }
                };
              Inf ub_alXqv n_alXqw ->
                case sizeOfSort x_a7oU of {
                  Left x1_acxP -> Left x1_acxP;
                  Right y1_acxR ->
                    Right
                      (case y1_acxR of { SizeOfSort ua_alXqx m_alXqy ->
                       case leInteger# m_alXqy n_alXqw of {
                         __DEFAULT ->
                           case m_alXqy of dt_X8Lv6 { __DEFAULT ->
                           Inf
                             (case ua_alXqx of {
                                __DEFAULT -> ub_alXqv;
                                USSet -> USSet
                              })
                             dt_X8Lv6
                           };
                         1# ->
                           Inf
                             (case ua_alXqx of {
                                __DEFAULT -> ub_alXqv;
                                USSet -> USSet
                              })
                             n_alXqw
                       }
                       })
                }
            } } in
      case x_a7oU of {
        __DEFAULT -> jump fail_sm4IJ void#;
        Univ u_alXql a_alXqm ->
          case y_a7oV of {
            __DEFAULT -> jump fail_sm4IJ void#;
            Univ u'_alXqn b_alXqo ->
              Right
                (Univ
                   (case u_alXql of {
                      __DEFAULT -> u'_alXqn;
                      USSet -> USSet
                    })
                   (levelLub a_alXqm b_alXqo))
          };
        Inf ua_alXqp m_alXqq ->
          case sizeOfSort y_a7oV of {
            Left x1_acxP -> Left x1_acxP;
            Right y1_acxR ->
              Right
                (case y1_acxR of { SizeOfSort ub_alXqs n_alXqt ->
                 case leInteger# m_alXqq n_alXqt of {
                   __DEFAULT ->
                     Inf
                       (case ua_alXqp of {
                          __DEFAULT -> ub_alXqs;
                          USSet -> USSet
                        })
                       m_alXqq;
                   1# ->
                     case n_alXqt of dt_X8Lv6 { __DEFAULT ->
                     Inf
                       (case ua_alXqp of {
                          __DEFAULT -> ub_alXqs;
                          USSet -> USSet
                        })
                       dt_X8Lv6
                     }
                 }
                 })
          }
      }

-- RHS size: {terms: 234, types: 225, coercions: 107, joins: 1/5}
$fApplyRewriteRule_$s$capplySubst
  = \ eta1_B2 eta2_B1 ->
      case eta2_B1 of wild1_XlS {
        Univ u_alXdp n_alXdq ->
          Univ
            u_alXdp
            (case n_alXdq of { Max n1_alXdi as_alXdj ->
             Max
               n1_alXdi
               (map
                  (\ ds_dm1IK ->
                     case ds_dm1IK of { Plus n2_alXde l_alXdf ->
                     Plus
                       n2_alXde
                       ($fApplyExtLamInfo_$sapplySubstTerm
                          (eta1_B2 `cast` <Co:7>) l_alXdf)
                     })
                  as_alXdj)
             });
        Inf u_alXdr n_alXds -> wild1_XlS;
        SizeUniv -> SizeUniv;
        LockUniv -> LockUniv;
        LevelUniv -> LevelUniv;
        IntervalUniv -> IntervalUniv;
        PiSort a_alXdt s1_alXdu s2_alXdv ->
          join {
            $j_smeOk s4_sm4Jh
              = let {
                  s5_sm4Ji = $fApplyRewriteRule_$s$capplySubst eta1_B2 s1_alXdu } in
                case $wpiSort' s5_sm4Ji s4_sm4Jh of {
                  Left x_acvT ->
                    PiSort
                      (case eta1_B2 `cast` <Co:10> of wild3_Xg0 {
                         __DEFAULT ->
                           case a_alXdt of
                           { Dom ds_dm1xB ds1_dm1xC ds2_dm1xD ds3_dm1xE ds4_dm1xF ->
                           Dom
                             (case ds_dm1xB of
                              { ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U ds8_d3o7V ds9_d3o7W ->
                              ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U UnknownFVs ds9_d3o7W
                              })
                             ds1_dm1xC
                             ds2_dm1xD
                             (case ds3_dm1xE of {
                                Nothing -> Nothing;
                                Just a1_anJk ->
                                  Just
                                    ($fApplyExtLamInfo_$sapplySubstTerm
                                       (wild3_Xg0 `cast` <Co:8>) a1_anJk)
                              })
                             ($fApplyExtLamInfo_$sapplySubstTerm
                                (wild3_Xg0 `cast` <Co:8>) ds4_dm1xF)
                           };
                         IdS -> a_alXdt
                       })
                      s5_sm4Ji
                      s4_sm4Jh;
                  Right y_acvV -> y_acvV
                } } in
          case s2_alXdv of {
            Abs x_alXar a1_alXas ->
              jump $j_smeOk
                (Abs
                   x_alXar
                   ($fApplyRewriteRule_$s$capplySubst
                      (case eta1_B2 of wild3_Xj {
                         __DEFAULT -> Lift 1# wild3_Xj;
                         IdS -> IdS;
                         Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v 1#) rho1_add9T
                       })
                      a1_alXas));
            NoAbs x_alXau a1_alXav ->
              jump $j_smeOk
                (NoAbs
                   x_alXau ($fApplyRewriteRule_$s$capplySubst eta1_B2 a1_alXav))
          };
        FunSort s1_alXdw s2_alXdx ->
          let {
            a_sm4Jn = $fApplyRewriteRule_$s$capplySubst eta1_B2 s1_alXdw } in
          let {
            b_sm4Jm = $fApplyRewriteRule_$s$capplySubst eta1_B2 s2_alXdx } in
          case funSort' a_sm4Jn b_sm4Jm of {
            Left x_acvT -> FunSort a_sm4Jn b_sm4Jm;
            Right y_acvV -> y_acvV
          };
        UnivSort s_alXdy ->
          let {
            s1_sm4Jp = $fApplyRewriteRule_$s$capplySubst eta1_B2 s_alXdy } in
          case univSort' s1_sm4Jp of {
            Left x_acvT -> UnivSort s1_sm4Jp;
            Right y_acvV -> y_acvV
          };
        MetaS dt_dm2In dt1_dm2Io es_alXdA ->
          MetaS
            dt_dm2In
            dt1_dm2Io
            (map
               (\ ds_dm1Ar ->
                  case ds_dm1Ar of wild2_XeU {
                    Apply v_alXay ->
                      Apply
                        (case eta1_B2 `cast` <Co:9> of wild3_XeQ {
                           __DEFAULT ->
                             case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                             Arg
                               (case a1_a3gXn of
                                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                })
                               ($fApplyExtLamInfo_$sapplySubstTerm
                                  (wild3_XeQ `cast` <Co:7>) a2_a3gXo)
                             };
                           IdS -> v_alXay
                         });
                    Proj ds1_dm1AZ ds2_dm1B0 -> wild2_XeU;
                    IApply x_alXaz y_alXaA r_alXaB ->
                      IApply
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (eta1_B2 `cast` <Co:7>) x_alXaz)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (eta1_B2 `cast` <Co:7>) y_alXaA)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (eta1_B2 `cast` <Co:7>) r_alXaB)
                  })
               es_alXdA);
        DefS d_alXdB es_alXdC ->
          DefS
            d_alXdB
            (map
               (\ ds_dm1Ar ->
                  case ds_dm1Ar of wild2_XeU {
                    Apply v_alXay ->
                      Apply
                        (case eta1_B2 `cast` <Co:9> of wild3_XeQ {
                           __DEFAULT ->
                             case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                             Arg
                               (case a1_a3gXn of
                                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                })
                               ($fApplyExtLamInfo_$sapplySubstTerm
                                  (wild3_XeQ `cast` <Co:7>) a2_a3gXo)
                             };
                           IdS -> v_alXay
                         });
                    Proj ds1_dm1AZ ds2_dm1B0 -> wild2_XeU;
                    IApply x_alXaz y_alXaA r_alXaB ->
                      IApply
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (eta1_B2 `cast` <Co:7>) x_alXaz)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (eta1_B2 `cast` <Co:7>) y_alXaA)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (eta1_B2 `cast` <Co:7>) r_alXaB)
                  })
               es_alXdC);
        DummyS ds_dm1Oh -> wild1_XlS
      }

-- RHS size: {terms: 389, types: 340, coercions: 184, joins: 0/1}
$fApplyExtLamInfo_$sapplySubstTerm
  = \ ds_Xm0Ug t_XlXLV ->
      case ds_Xm0Ug of wild1_Xoj {
        __DEFAULT ->
          case t_XlXLV of wild2_X79 {
            Var dt_dm2HA es_alXnN ->
              $fApplyTerm_$sapplyTermE
                absurd
                ($wlookupS $fSubstTerm @~ <Co:1> wild1_Xoj (I# dt_dm2HA))
                (map
                   (\ ds1_dm1Ar ->
                      case ds1_dm1Ar of wild3_XeU {
                        Apply v_alXay ->
                          Apply
                            (case wild1_Xoj `cast` <Co:9> of wild4_XeQ {
                               __DEFAULT ->
                                 case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                                 Arg
                                   (case a1_a3gXn of
                                    { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                    ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                    })
                                   ($fApplyExtLamInfo_$sapplySubstTerm
                                      (wild4_XeQ `cast` <Co:7>) a2_a3gXo)
                                 };
                               IdS -> v_alXay
                             });
                        Proj ds2_dm1AZ ds3_dm1B0 -> wild3_XeU;
                        IApply x_alXaz y_alXaA r_alXaB ->
                          IApply
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj x_alXaz)
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj y_alXaA)
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj r_alXaB)
                      })
                   es_alXnN);
            Lam h_alXnO m_alXnP ->
              Lam
                h_alXnO
                (case m_alXnP of {
                   Abs x_alXar a_alXas ->
                     Abs
                       x_alXar
                       (case wild1_Xoj `cast` <Co:4> of wild4_Xj {
                          __DEFAULT ->
                            $fApplyExtLamInfo_$sapplySubstTerm
                              ((Lift 1# wild4_Xj) `cast` <Co:3>) a_alXas;
                          IdS ->
                            $fApplyExtLamInfo_$sapplySubstTerm (IdS `cast` <Co:3>) a_alXas;
                          Lift dt_dde2v rho1_add9T ->
                            $fApplyExtLamInfo_$sapplySubstTerm
                              ((Lift (+# dt_dde2v 1#) rho1_add9T) `cast` <Co:3>) a_alXas
                        });
                   NoAbs x_alXau a_alXav ->
                     NoAbs
                       x_alXau ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj a_alXav)
                 });
            Lit l_alXnX -> wild2_X79;
            Def f4_alXnQ es_alXnR ->
              defApp
                f4_alXnQ
                []
                (map
                   (\ ds1_dm1Ar ->
                      case ds1_dm1Ar of wild3_XeU {
                        Apply v_alXay ->
                          Apply
                            (case wild1_Xoj `cast` <Co:9> of wild4_XeQ {
                               __DEFAULT ->
                                 case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                                 Arg
                                   (case a1_a3gXn of
                                    { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                    ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                    })
                                   ($fApplyExtLamInfo_$sapplySubstTerm
                                      (wild4_XeQ `cast` <Co:7>) a2_a3gXo)
                                 };
                               IdS -> v_alXay
                             });
                        Proj ds2_dm1AZ ds3_dm1B0 -> wild3_XeU;
                        IApply x_alXaz y_alXaA r_alXaB ->
                          IApply
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj x_alXaz)
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj y_alXaA)
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj r_alXaB)
                      })
                   es_alXnR);
            Con c_alXnS ci_alXnT vs_alXnU ->
              Con
                c_alXnS
                ci_alXnT
                (map
                   (\ ds1_dm1Ar ->
                      case ds1_dm1Ar of wild3_XeU {
                        Apply v_alXay ->
                          Apply
                            (case wild1_Xoj `cast` <Co:9> of wild4_XeQ {
                               __DEFAULT ->
                                 case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                                 Arg
                                   (case a1_a3gXn of
                                    { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                    ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                    })
                                   ($fApplyExtLamInfo_$sapplySubstTerm
                                      (wild4_XeQ `cast` <Co:7>) a2_a3gXo)
                                 };
                               IdS -> v_alXay
                             });
                        Proj ds2_dm1AZ ds3_dm1B0 -> wild3_XeU;
                        IApply x_alXaz y_alXaA r_alXaB ->
                          IApply
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj x_alXaz)
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj y_alXaA)
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj r_alXaB)
                      })
                   vs_alXnU);
            Pi a_alXnZ b_alXo0 ->
              Pi
                (case wild1_Xoj `cast` <Co:12> of wild3_Xg0 {
                   __DEFAULT ->
                     case a_alXnZ of
                     { Dom ds1_dm1xB ds2_dm1xC ds3_dm1xD ds4_dm1xE ds5_dm1xF ->
                     Dom
                       (case ds1_dm1xB of
                        { ArgInfo ds6_d3o7S ds7_d3o7T ds8_d3o7U ds9_d3o7V ds10_d3o7W ->
                        ArgInfo ds6_d3o7S ds7_d3o7T ds8_d3o7U UnknownFVs ds10_d3o7W
                        })
                       ds2_dm1xC
                       ds3_dm1xD
                       (case ds4_dm1xE of {
                          Nothing -> Nothing;
                          Just a1_anJk ->
                            Just
                              ($fApplyExtLamInfo_$sapplySubstTerm
                                 (wild3_Xg0 `cast` <Co:10>) a1_anJk)
                        })
                       (case ds5_dm1xF of { El s_alXdH t1_alXdI ->
                        El
                          ($fApplyRewriteRule_$s$capplySubst
                             (wild3_Xg0 `cast` <Co:12>) s_alXdH)
                          ($fApplyExtLamInfo_$sapplySubstTerm
                             (wild3_Xg0 `cast` <Co:10>) t1_alXdI)
                        })
                     };
                   IdS -> a_alXnZ
                 })
                (case b_alXo0 of {
                   Abs x_alXar a1_alXas ->
                     Abs
                       x_alXar
                       (case a1_alXas of { El s_alXdH t1_alXdI ->
                        let {
                          rho_sm4J1
                            = case wild1_Xoj `cast` <Co:10> of wild5_Xj {
                                __DEFAULT -> Lift 1# wild5_Xj;
                                IdS -> IdS;
                                Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v 1#) rho1_add9T
                              } } in
                        El
                          ($fApplyRewriteRule_$s$capplySubst
                             (rho_sm4J1 `cast` <Co:10>) s_alXdH)
                          ($fApplyExtLamInfo_$sapplySubstTerm
                             (rho_sm4J1 `cast` <Co:8>) t1_alXdI)
                        });
                   NoAbs x_alXau a1_alXav ->
                     NoAbs
                       x_alXau
                       (case a1_alXav of { El s_alXdH t1_alXdI ->
                        El
                          ($fApplyRewriteRule_$s$capplySubst
                             (wild1_Xoj `cast` <Co:9>) s_alXdH)
                          ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj t1_alXdI)
                        })
                 });
            Sort s_alXo1 ->
              Sort
                ($fApplyRewriteRule_$s$capplySubst
                   (wild1_Xoj `cast` <Co:9>) s_alXo1);
            Level l_alXnY ->
              case l_alXnY of { Max n_alXdi as_alXdj ->
              $wlevelTm
                n_alXdi
                (map
                   (\ ds1_dm1IK ->
                      case ds1_dm1IK of { Plus n1_alXde l1_alXdf ->
                      Plus
                        n1_alXde ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj l1_alXdf)
                      })
                   as_alXdj)
              };
            MetaV dt_dm2HB dt1_dm2HC es_alXnW ->
              MetaV
                dt_dm2HB
                dt1_dm2HC
                (map
                   (\ ds1_dm1Ar ->
                      case ds1_dm1Ar of wild3_XeU {
                        Apply v_alXay ->
                          Apply
                            (case wild1_Xoj `cast` <Co:9> of wild4_XeQ {
                               __DEFAULT ->
                                 case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                                 Arg
                                   (case a1_a3gXn of
                                    { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                    ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                    })
                                   ($fApplyExtLamInfo_$sapplySubstTerm
                                      (wild4_XeQ `cast` <Co:7>) a2_a3gXo)
                                 };
                               IdS -> v_alXay
                             });
                        Proj ds2_dm1AZ ds3_dm1B0 -> wild3_XeU;
                        IApply x_alXaz y_alXaA r_alXaB ->
                          IApply
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj x_alXaz)
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj y_alXaA)
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj r_alXaB)
                      })
                   es_alXnW);
            DontCare mv_alXo2 ->
              case $fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj mv_alXo2
              of wild3_XJK {
                __DEFAULT -> DontCare wild3_XJK;
                DontCare ds1_d8PPv -> wild3_XJK
              };
            Dummy s_alXo3 es_alXo4 ->
              Dummy
                s_alXo3
                (map
                   (\ ds1_dm1Ar ->
                      case ds1_dm1Ar of wild3_XeU {
                        Apply v_alXay ->
                          Apply
                            (case wild1_Xoj `cast` <Co:9> of wild4_XeQ {
                               __DEFAULT ->
                                 case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                                 Arg
                                   (case a1_a3gXn of
                                    { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                    ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                    })
                                   ($fApplyExtLamInfo_$sapplySubstTerm
                                      (wild4_XeQ `cast` <Co:7>) a2_a3gXo)
                                 };
                               IdS -> v_alXay
                             });
                        Proj ds2_dm1AZ ds3_dm1B0 -> wild3_XeU;
                        IApply x_alXaz y_alXaA r_alXaB ->
                          IApply
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj x_alXaz)
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj y_alXaA)
                            ($fApplyExtLamInfo_$sapplySubstTerm wild1_Xoj r_alXaB)
                      })
                   es_alXo4)
          };
        IdS -> t_XlXLV
      }

-- RHS size: {terms: 317, types: 287, coercions: 22, joins: 4/4}
$fEqTerm_$c==
  = \ ds_dm1di ds1_dm1dj ->
      case ds_dm1di of {
        Var dt_dm2Ia vs_alX8o ->
          case ds1_dm1dj of {
            __DEFAULT -> False;
            Var dt1_dm2Ib vs'_alX8q ->
              case ==# dt_dm2Ia dt1_dm2Ib of {
                __DEFAULT -> False;
                1# -> $fEq[]_$c== $dEq1_rmk68 vs_alX8o vs'_alX8q
              }
          };
        Lam h_alX8r v_alX8s ->
          case ds1_dm1dj of {
            __DEFAULT -> False;
            Lam h'_alX8t v'_alX8u ->
              case h_alX8r of
              { ArgInfo ww1_s3LTm ww2_s3LTn ww3_s3LTo ww4_s3LTp ww5_s3LTq ->
              case h'_alX8t of
              { ArgInfo ww7_s3LTu ww8_s3LTv ww9_s3LTw ww10_s3LTx ww11_s3LTy ->
              case $w$c==
                     ww1_s3LTm
                     ww2_s3LTn
                     ww3_s3LTo
                     ww4_s3LTp
                     ww5_s3LTq
                     ww7_s3LTu
                     ww8_s3LTv
                     ww9_s3LTw
                     ww10_s3LTx
                     ww11_s3LTy
              of {
                False -> False;
                True ->
                  join {
                    fail_sm4Is _
                      = join {
                          $j_smfv7 karg_smeL2
                            = case v_alX8s of {
                                Abs ds3_dddYL v1_addbG -> $fEqTerm_$c== v1_addbG karg_smeL2;
                                NoAbs ds3_dddYM v1_addbH ->
                                  $fEqTerm_$c==
                                    ($fApplyExtLamInfo_$sapplySubstTerm
                                       (absBody1 `cast` <Co:3>) v1_addbH)
                                    karg_smeL2
                              } } in
                        case v'_alX8u of {
                          Abs ds3_dddYL v1_addbG -> jump $j_smfv7 v1_addbG;
                          NoAbs ds3_dddYM v1_addbH ->
                            jump $j_smfv7
                              ($fApplyExtLamInfo_$sapplySubstTerm
                                 (absBody1 `cast` <Co:3>) v1_addbH)
                        } } in
                  case v_alX8s of {
                    Abs ipv_sm2Nv ipv1_sm2Nw -> jump fail_sm4Is void#;
                    NoAbs ds2_dm11d a_alX7s ->
                      case v'_alX8u of {
                        Abs ipv_sm2Nz ipv1_sm2NA -> jump fail_sm4Is void#;
                        NoAbs ds3_dm11e b_alX7t -> $fEqTerm_$c== a_alX7s b_alX7t
                      }
                  }
              }
              }
              }
          };
        Lit l_alX8v ->
          case ds1_dm1dj of {
            __DEFAULT -> False;
            Lit l'_alX8w -> $fEqLiteral_$c== l_alX8v l'_alX8w
          };
        Def x_alX8x vs_alX8y ->
          case ds1_dm1dj of {
            __DEFAULT -> False;
            Def x'_alX8z vs'_alX8A ->
              case x_alX8x of { QName ds2_d6aXk ds3_d6aXl ->
              case ds3_d6aXl of
              { Name ds4_d6aXp ds5_d6aXq ds6_d6aXr ds7_d6aXs ds8_d6aXt
                     ds9_d6aXu ->
              case ds4_d6aXp of { NameId dt_smhF9 dt1_smhFa ->
              case x'_alX8z of { QName ds10_X6baj ds11_X6bal ->
              case ds11_X6bal of
              { Name ds12_X6bau ds13_X6baw ds14_X6bay ds15_X6baA ds16_X6baC
                     ds17_X6baE ->
              case ds12_X6bau of { NameId dt2_smhFd dt3_smhFe ->
              case eqWord# dt_smhF9 dt2_smhFd of {
                __DEFAULT -> False;
                1# ->
                  case eqWord# dt1_smhFa dt3_smhFe of {
                    __DEFAULT -> False;
                    1# -> $fEq[]_$c== $dEq1_rmk68 vs_alX8y vs'_alX8A
                  }
              }
              }
              }
              }
              }
              }
              }
          };
        Con x_alX8B ds2_dm1kN vs_alX8C ->
          case ds1_dm1dj of {
            __DEFAULT -> False;
            Con x'_alX8D ds3_dm1kO vs'_alX8E ->
              case x_alX8B of
              { ConHead ww1_s92pT ww2_s92qd ww3_s92qe ww4_s92qf ->
              case ww1_s92pT of { QName ww6_s92pW ww7_s92pX ->
              case ww7_s92pX of
              { Name ww9_s92q0 ww10_s92q6 ww11_s92q7 ww12_s92q8 ww13_s92q9
                     ww14_s92qa ->
              case ww9_s92q0 of { NameId ww16_smhFh ww17_smhFi ->
              case x'_alX8D of
              { ConHead ww19_s92qj ww20_s92qD ww21_s92qE ww22_s92qF ->
              case ww19_s92qj of { QName ww24_s92qm ww25_s92qn ->
              case ww25_s92qn of
              { Name ww27_s92qq ww28_s92qw ww29_s92qx ww30_s92qy ww31_s92qz
                     ww32_s92qA ->
              case ww27_s92qq of { NameId ww34_smhFl ww35_smhFm ->
              case eqWord# ww16_smhFh ww34_smhFl of {
                __DEFAULT -> False;
                1# ->
                  case eqWord# ww17_smhFi ww35_smhFm of {
                    __DEFAULT -> False;
                    1# -> $fEq[]_$c== $dEq1_rmk68 vs_alX8C vs'_alX8E
                  }
              }
              }
              }
              }
              }
              }
              }
              }
              }
          };
        Pi a_alX8F b_alX8G ->
          case ds1_dm1dj of {
            __DEFAULT -> False;
            Pi a'_alX8H b'_alX8I ->
              case $fEqDom'_$c== $dEq_rmk67 a_alX8F a'_alX8H of {
                False -> False;
                True ->
                  join {
                    fail_sm4Iu _
                      = join {
                          $j_smfvB karg_smeLw
                            = case b_alX8G of {
                                Abs ds3_dddYL v_addbG ->
                                  case v_addbG of { El ds4_d8Q2L ds5_d8Q2M ->
                                  $fEqTerm_$c== ds5_d8Q2M karg_smeLw
                                  };
                                NoAbs ds3_dddYM v_addbH ->
                                  case v_addbH of { El s_alXdH t_alXdI ->
                                  $fEqTerm_$c==
                                    ($fApplyExtLamInfo_$sapplySubstTerm
                                       (absBody1 `cast` <Co:8>) t_alXdI)
                                    karg_smeLw
                                  }
                              } } in
                        case b'_alX8I of {
                          Abs ds3_dddYL v_addbG ->
                            case v_addbG of { El ds4_d8Q2L ds5_d8Q2M ->
                            jump $j_smfvB ds5_d8Q2M
                            };
                          NoAbs ds3_dddYM v_addbH ->
                            case v_addbH of { El s_alXdH t_alXdI ->
                            jump $j_smfvB
                              ($fApplyExtLamInfo_$sapplySubstTerm
                                 (absBody1 `cast` <Co:8>) t_alXdI)
                            }
                        } } in
                  case b_alX8G of {
                    Abs ipv_sm2Nv ipv1_sm2Nw -> jump fail_sm4Iu void#;
                    NoAbs ds2_dm11d a1_alX7s ->
                      case b'_alX8I of {
                        Abs ipv_sm2Nz ipv1_sm2NA -> jump fail_sm4Iu void#;
                        NoAbs ds3_dm11e b1_alX7t ->
                          case a1_alX7s of { El ds4_d8Q2L ds5_d8Q2M ->
                          case b1_alX7t of { El ds6_X8Que ds7_X8Qug ->
                          $fEqTerm_$c== ds5_d8Q2M ds7_X8Qug
                          }
                          }
                      }
                  }
              }
          };
        Sort s_alX8J ->
          case ds1_dm1dj of {
            __DEFAULT -> False;
            Sort s'_alX8K -> $fEqSort'_$c== s_alX8J s'_alX8K
          };
        Level l_alX8L ->
          case ds1_dm1dj of {
            __DEFAULT -> False;
            Level l'_alX8M -> $fEqLevel'_$c== l_alX8L l'_alX8M
          };
        MetaV dt_dm2Ic dt1_dm2Id vs_alX8O ->
          case ds1_dm1dj of {
            __DEFAULT -> False;
            MetaV dt2_dm2Ie dt3_dm2If vs'_alX8Q ->
              case eqWord# dt_dm2Ic dt2_dm2Ie of {
                __DEFAULT -> False;
                1# ->
                  case eqWord# dt1_dm2Id dt3_dm2If of {
                    __DEFAULT -> False;
                    1# -> $fEq[]_$c== $dEq1_rmk68 vs_alX8O vs'_alX8Q
                  }
              }
          };
        DontCare ds2_dm1kP ->
          case ds1_dm1dj of {
            __DEFAULT -> False;
            DontCare ds3_dm1kQ -> True
          };
        Dummy ds2_dm1kR ds3_dm1kS ->
          case ds1_dm1dj of {
            __DEFAULT -> False;
            Dummy ds4_dm1kT ds5_dm1kU -> True
          }
      }

-- RHS size: {terms: 424, types: 328, coercions: 22, joins: 4/4}
$fOrdPlusLevel'_$ccompare
  = \ ds_dm11n ds1_dm11o ->
      case ds_dm11n of wild1_Xlb {
        __DEFAULT ->
          case ds1_dm11o of wild2_X72 {
            __DEFAULT ->
              case wild1_Xlb of wild3_X73 {
                __DEFAULT ->
                  case wild2_X72 of wild4_X74 {
                    __DEFAULT ->
                      case wild3_X73 of wild5_X75 {
                        __DEFAULT ->
                          case wild4_X74 of wild6_X76 {
                            __DEFAULT ->
                              case wild5_X75 of wild7_X77 {
                                __DEFAULT ->
                                  case wild6_X76 of wild8_X78 {
                                    __DEFAULT ->
                                      case wild7_X77 of wild9_X79 {
                                        __DEFAULT ->
                                          case wild8_X78 of wild10_X7a {
                                            __DEFAULT ->
                                              case wild9_X79 of wild11_X7b {
                                                __DEFAULT ->
                                                  case wild10_X7a of wild12_X7c {
                                                    __DEFAULT ->
                                                      case wild11_X7b of wild13_X7d {
                                                        __DEFAULT ->
                                                          case wild12_X7c of wild14_X7e {
                                                            __DEFAULT ->
                                                              case wild13_X7d of wild15_X7f {
                                                                __DEFAULT ->
                                                                  case wild14_X7e of wild16_X7g {
                                                                    __DEFAULT ->
                                                                      case wild15_X7f
                                                                      of wild17_X7h {
                                                                        __DEFAULT ->
                                                                          case wild16_X7g
                                                                          of wild18_X7i {
                                                                            __DEFAULT ->
                                                                              case wild17_X7h of {
                                                                                DontCare ds2_dm197 ->
                                                                                  case wild18_X7i
                                                                                  of {
                                                                                    DontCare ds3_dm198 ->
                                                                                      EQ;
                                                                                    Dummy ipv_sm33Q
                                                                                          ipv1_sm33R ->
                                                                                      LT
                                                                                  };
                                                                                Dummy ipv_sm33O
                                                                                      ipv1_sm33T ->
                                                                                  case wild18_X7i
                                                                                  of {
                                                                                    DontCare ds2_dm199 ->
                                                                                      GT;
                                                                                    Dummy ipv2_sm33W
                                                                                          ipv3_sm33X ->
                                                                                      EQ
                                                                                  }
                                                                              };
                                                                            MetaV dt_dm2I8 dt1_dm2I9
                                                                                  ds2_dm196 ->
                                                                              GT
                                                                          };
                                                                        MetaV dt_dm2I4 dt1_dm2I5
                                                                              b_alX7X ->
                                                                          case wild16_X7g of {
                                                                            __DEFAULT -> LT;
                                                                            MetaV dt2_dm2I6
                                                                                  dt3_dm2I7
                                                                                  y_alX7Z ->
                                                                              case eqWord#
                                                                                     dt_dm2I4
                                                                                     dt2_dm2I6
                                                                              of {
                                                                                __DEFAULT ->
                                                                                  case leWord#
                                                                                         dt_dm2I4
                                                                                         dt2_dm2I6
                                                                                  of {
                                                                                    __DEFAULT -> GT;
                                                                                    1# -> LT
                                                                                  };
                                                                                1# ->
                                                                                  case eqWord#
                                                                                         dt1_dm2I5
                                                                                         dt3_dm2I7
                                                                                  of {
                                                                                    __DEFAULT ->
                                                                                      case leWord#
                                                                                             dt1_dm2I5
                                                                                             dt3_dm2I7
                                                                                      of {
                                                                                        __DEFAULT ->
                                                                                          GT;
                                                                                        1# -> LT
                                                                                      };
                                                                                    1# ->
                                                                                      $fOrd[]_$ccompare
                                                                                        $s$fOrd(,)_$ccompare1
                                                                                        b_alX7X
                                                                                        y_alX7Z
                                                                                  }
                                                                              }
                                                                          }
                                                                      };
                                                                    Level ds2_dm194 -> GT
                                                                  };
                                                                Level a_alX7U ->
                                                                  case wild14_X7e of {
                                                                    __DEFAULT -> LT;
                                                                    Level x_alX7V ->
                                                                      $fOrdLevel'_$ccompare
                                                                        a_alX7U x_alX7V
                                                                  }
                                                              };
                                                            Sort ds2_dm193 -> GT
                                                          };
                                                        Sort a_alX7S ->
                                                          case wild12_X7c of {
                                                            __DEFAULT -> LT;
                                                            Sort x_alX7T ->
                                                              $fOrdSort'_$ccompare a_alX7S x_alX7T
                                                          }
                                                      };
                                                    Pi ds2_dm191 ds3_dm192 -> GT
                                                  };
                                                Pi a_alX7O b_alX7P ->
                                                  case wild10_X7a of {
                                                    __DEFAULT -> LT;
                                                    Pi x_alX7Q y_alX7R ->
                                                      case $fOrdDom'_$s$ccompare a_alX7O x_alX7Q
                                                      of {
                                                        LT -> LT;
                                                        EQ ->
                                                          join {
                                                            fail_sm4RT _
                                                              = join {
                                                                  $j_smfwn karg_smeMx
                                                                    = case b_alX7P of {
                                                                        Abs ds3_dddYL v_addbG ->
                                                                          case v_addbG of
                                                                          { El ds4_d8Q2L
                                                                               ds5_d8Q2M ->
                                                                          $fOrdPlusLevel'_$ccompare
                                                                            ds5_d8Q2M karg_smeMx
                                                                          };
                                                                        NoAbs ds3_dddYM v_addbH ->
                                                                          case v_addbH of
                                                                          { El s_alXdH t_alXdI ->
                                                                          $fOrdPlusLevel'_$ccompare
                                                                            ($fApplyExtLamInfo_$sapplySubstTerm
                                                                               (absBody1
                                                                                `cast` <Co:8>)
                                                                               t_alXdI)
                                                                            karg_smeMx
                                                                          }
                                                                      } } in
                                                                case y_alX7R of {
                                                                  Abs ds3_dddYL v_addbG ->
                                                                    case v_addbG of
                                                                    { El ds4_d8Q2L ds5_d8Q2M ->
                                                                    jump $j_smfwn ds5_d8Q2M
                                                                    };
                                                                  NoAbs ds3_dddYM v_addbH ->
                                                                    case v_addbH of
                                                                    { El s_alXdH t_alXdI ->
                                                                    jump $j_smfwn
                                                                      ($fApplyExtLamInfo_$sapplySubstTerm
                                                                         (absBody1 `cast` <Co:8>)
                                                                         t_alXdI)
                                                                    }
                                                                } } in
                                                          case b_alX7P of {
                                                            Abs ipv_sm2NH ipv1_sm2NI ->
                                                              jump fail_sm4RT void#;
                                                            NoAbs ds2_dm0ZD a1_alX7n ->
                                                              case y_alX7R of {
                                                                Abs ipv_sm2NL ipv1_sm2NM ->
                                                                  jump fail_sm4RT void#;
                                                                NoAbs ds3_dm0ZE b1_alX7o ->
                                                                  case a1_alX7n of
                                                                  { El ds4_d8Q2L ds5_d8Q2M ->
                                                                  case b1_alX7o of
                                                                  { El ds6_X8QuS ds7_X8QuU ->
                                                                  $fOrdPlusLevel'_$ccompare
                                                                    ds5_d8Q2M ds7_X8QuU
                                                                  }
                                                                  }
                                                              }
                                                          };
                                                        GT -> GT
                                                      }
                                                  }
                                              };
                                            Lam ds2_dm18Z ds3_dm190 -> GT
                                          };
                                        Lam a_alX7K b_alX7L ->
                                          case wild8_X78 of {
                                            __DEFAULT -> LT;
                                            Lam x_alX7M y_alX7N ->
                                              case a_alX7K of
                                              { ArgInfo ww1_s3M5k ww2_s3M5l ww3_s3M5m ww4_s3M5n
                                                        ww5_s3M5o ->
                                              case x_alX7M of
                                              { ArgInfo ww7_s3M5s ww8_s3M5t ww9_s3M5u ww10_s3M5v
                                                        ww11_s3M5w ->
                                              case $w$ccompare
                                                     ww1_s3M5k
                                                     ww2_s3M5l
                                                     ww3_s3M5m
                                                     ww4_s3M5n
                                                     ww5_s3M5o
                                                     ww7_s3M5s
                                                     ww8_s3M5t
                                                     ww9_s3M5u
                                                     ww10_s3M5v
                                                     ww11_s3M5w
                                              of {
                                                LT -> LT;
                                                EQ ->
                                                  join {
                                                    fail_sm4RT _
                                                      = join {
                                                          $j_smfwA karg_smeMK
                                                            = case b_alX7L of {
                                                                Abs ds3_dddYL v_addbG ->
                                                                  $fOrdPlusLevel'_$ccompare
                                                                    v_addbG karg_smeMK;
                                                                NoAbs ds3_dddYM v_addbH ->
                                                                  $fOrdPlusLevel'_$ccompare
                                                                    ($fApplyExtLamInfo_$sapplySubstTerm
                                                                       (absBody1 `cast` <Co:3>)
                                                                       v_addbH)
                                                                    karg_smeMK
                                                              } } in
                                                        case y_alX7N of {
                                                          Abs ds3_dddYL v_addbG ->
                                                            jump $j_smfwA v_addbG;
                                                          NoAbs ds3_dddYM v_addbH ->
                                                            jump $j_smfwA
                                                              ($fApplyExtLamInfo_$sapplySubstTerm
                                                                 (absBody1 `cast` <Co:3>) v_addbH)
                                                        } } in
                                                  case b_alX7L of {
                                                    Abs ipv_sm2NH ipv1_sm2NI ->
                                                      jump fail_sm4RT void#;
                                                    NoAbs ds2_dm0ZD a1_alX7n ->
                                                      case y_alX7N of {
                                                        Abs ipv_sm2NL ipv1_sm2NM ->
                                                          jump fail_sm4RT void#;
                                                        NoAbs ds3_dm0ZE b1_alX7o ->
                                                          $fOrdPlusLevel'_$ccompare
                                                            a1_alX7n b1_alX7o
                                                      }
                                                  };
                                                GT -> GT
                                              }
                                              }
                                              }
                                          }
                                      };
                                    Lit ds2_dm18Y -> GT
                                  };
                                Lit a_alX7I ->
                                  case wild6_X76 of {
                                    __DEFAULT -> LT;
                                    Lit x_alX7J -> $fOrdLiteral_$ccompare a_alX7I x_alX7J
                                  }
                              };
                            Con ds2_dm18V ds3_dm18W ds4_dm18X -> GT
                          };
                        Con a_alX7E ds2_dm18T b_alX7F ->
                          case wild4_X74 of {
                            __DEFAULT -> LT;
                            Con x_alX7G ds3_dm18U y_alX7H ->
                              case a_alX7E of
                              { ConHead ww1_s92p0 ww2_s92pk ww3_s92pl ww4_s92pm ->
                              case ww1_s92p0 of { QName ww6_s92p3 ww7_s92p4 ->
                              case ww7_s92p4 of
                              { Name ww9_s92p7 ww10_s92pd ww11_s92pe ww12_s92pf ww13_s92pg
                                     ww14_s92ph ->
                              case ww9_s92p7 of { NameId ww16_smhFp ww17_smhFq ->
                              case x_alX7G of
                              { ConHead ww19_s92pq ww20_s92pK ww21_s92pL ww22_s92pM ->
                              case ww19_s92pq of { QName ww24_s92pt ww25_s92pu ->
                              case ww25_s92pu of
                              { Name ww27_s92px ww28_s92pD ww29_s92pE ww30_s92pF ww31_s92pG
                                     ww32_s92pH ->
                              case ww27_s92px of { NameId ww34_smhFt ww35_smhFu ->
                              case $w$ccompare ww16_smhFp ww17_smhFq ww34_smhFt ww35_smhFu of {
                                LT -> LT;
                                EQ -> $fOrd[]_$ccompare $s$fOrd(,)_$ccompare1 b_alX7F y_alX7H;
                                GT -> GT
                              }
                              }
                              }
                              }
                              }
                              }
                              }
                              }
                              }
                          }
                      };
                    Def ds2_dm18R ds3_dm18S -> GT
                  };
                Def a_alX7A b_alX7B ->
                  case wild2_X72 of {
                    __DEFAULT -> LT;
                    Def x_alX7C y_alX7D ->
                      case a_alX7A of { QName ww1_s6e60 ww2_s6e61 ->
                      case ww2_s6e61 of
                      { Name ww4_s6e64 ww5_s6e6a ww6_s6e6b ww7_s6e6c ww8_s6e6d
                             ww9_s6e6e ->
                      case ww4_s6e64 of { NameId ww11_smhFx ww12_smhFy ->
                      case x_alX7C of { QName ww14_s6e6j ww15_s6e6k ->
                      case ww15_s6e6k of
                      { Name ww17_s6e6n ww18_s6e6t ww19_s6e6u ww20_s6e6v ww21_s6e6w
                             ww22_s6e6x ->
                      case ww17_s6e6n of { NameId ww24_smhFB ww25_smhFC ->
                      case eqWord# ww11_smhFx ww24_smhFB of {
                        __DEFAULT ->
                          case leWord# ww11_smhFx ww24_smhFB of {
                            __DEFAULT -> GT;
                            1# -> LT
                          };
                        1# ->
                          case eqWord# ww12_smhFy ww25_smhFC of {
                            __DEFAULT ->
                              case leWord# ww12_smhFy ww25_smhFC of {
                                __DEFAULT -> GT;
                                1# -> LT
                              };
                            1# -> $fOrd[]_$ccompare $s$fOrd(,)_$ccompare1 b_alX7B y_alX7D
                          }
                      }
                      }
                      }
                      }
                      }
                      }
                      }
                  }
              };
            Var dt_dm2I3 ds2_dm18Q -> GT
          };
        Var dt_dm2I1 b_alX7x ->
          case ds1_dm11o of {
            __DEFAULT -> LT;
            Var dt1_dm2I2 y_alX7z ->
              case <# dt1_dm2I2 dt_dm2I1 of {
                __DEFAULT ->
                  case ==# dt1_dm2I2 dt_dm2I1 of {
                    __DEFAULT -> GT;
                    1# -> $fOrd[]_$ccompare $s$fOrd(,)_$ccompare1 b_alX7x y_alX7z
                  };
                1# -> LT
              }
          }
      }

-- RHS size: {terms: 132, types: 110, coercions: 13, joins: 0/0}
$fApplyTerm_$sapplyTermE
  = \ err'_XlXJu m_XlXJw ds_Xm10g ->
      case ds_Xm10g of wild1_XnJ {
        [] -> m_XlXJw;
        : ipv_sm37y ipv1_sm37z ->
          case m_XlXJw of wild2_X6Z {
            Var dt_dm2HD es'_alXm0 -> Var dt_dm2HD (++ es'_alXm0 wild1_XnJ);
            Lam ds1_dm0KB b_alXm6 ->
              case ipv_sm37y of {
                Apply a_alXm7 ->
                  case b_alXm6 of {
                    Abs ds2_dddFd v_addbA ->
                      $fApplyTerm_$sapplyTermE
                        absurd
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           ((:#
                               (case a_alXm7 of { Arg ds3_d3o6D ds4_d3o6E ->
                                ds4_d3o6E `cast` <Co:3>
                                })
                               IdS)
                            `cast` <Co:3>)
                           v_addbA)
                        ipv1_sm37z;
                    NoAbs ds2_dddFe v_addbC ->
                      $fApplyTerm_$sapplyTermE absurd v_addbC ipv1_sm37z
                  };
                Proj ipv2_sm37G ipv3_sm37H ->
                  err'_XlXJu lvl124_rmk2v wild2_X6Z wild1_XnJ;
                IApply ds2_dm0FP ds3_dm0FQ a_alXm9 ->
                  case b_alXm6 of {
                    Abs ds4_dddFd v_addbA ->
                      $fApplyTerm_$sapplyTermE
                        absurd
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           ((:# (a_alXm9 `cast` <Co:3>) IdS) `cast` <Co:3>) v_addbA)
                        ipv1_sm37z;
                    NoAbs ds4_dddFe v_addbC ->
                      $fApplyTerm_$sapplyTermE absurd v_addbC ipv1_sm37z
                  }
              };
            Lit ds1_dm0KC -> err'_XlXJu lvl120_rmk2r wild2_X6Z wild1_XnJ;
            Def f4_alXm1 es'_alXm2 -> defApp f4_alXm1 es'_alXm2 wild1_XnJ;
            Con c_alXm3 ci_alXm4 args_alXm5 ->
              $wconApp
                @~ <Co:1>
                $fApplyTerm
                err'_XlXJu
                c_alXm3
                ci_alXm4
                args_alXm5
                wild1_XnJ;
            Pi ds1_dm0KE ds2_dm0KF ->
              err'_XlXJu lvl116_rmk2n wild2_X6Z wild1_XnJ;
            Sort s_alXmd ->
              Sort
                (case s_alXmd of {
                   __DEFAULT -> $fApplySort'1;
                   MetaS dt_dm2Iw dt1_dm2Ix es'_alXlt ->
                     MetaS dt_dm2Iw dt1_dm2Ix (++ es'_alXlt wild1_XnJ);
                   DefS d_alXlu es'_alXlv -> DefS d_alXlu (++ es'_alXlv wild1_XnJ)
                 });
            Level ds1_dm0KD -> err'_XlXJu lvl112_rmk2j wild2_X6Z wild1_XnJ;
            MetaV dt_dm2HE dt1_dm2HF es'_alXmc ->
              MetaV dt_dm2HE dt1_dm2HF (++ es'_alXmc wild1_XnJ);
            DontCare mv_alXmg ->
              case $fApplyTerm_$sapplyTermE absurd mv_alXmg wild1_XnJ
              of wild3_XJK {
                __DEFAULT -> DontCare wild3_XJK;
                DontCare ds1_d8PPv -> wild3_XJK
              };
            Dummy s_alXme es'_alXmf -> Dummy s_alXme (++ es'_alXmf wild1_XnJ)
          }
      }

-- RHS size: {terms: 171, types: 117, coercions: 9, joins: 2/4}
$wpiSort'
  = \ w_sme8V w1_sme8W ->
      case w1_sme8W of {
        Abs ds_dm0dj s2_alXqT ->
          case ((($fFreeDom'_$cfreeVars'1
                    $fIsVarSetMetaSetSingleFlexRig s2_alXqT)
                 `cast` <Co:7>)
                  lvl290_rmk5E)
               `cast` <Co:2>
          of {
            Nothing ->
              Right
                (FunSort
                   w_sme8V ($fApplyRewriteRule_$s$capplySubst lvl253_rmk4Y s2_alXqT));
            Just o_alXqU ->
              let { ds1_sm4J7 = sizeOfSort w_sme8V } in
              let { ds2_sm4J6 = sizeOfSort s2_alXqT } in
              join {
                fail_sm4J5 _
                  = case ds2_sm4J6 of {
                      Left ipv_sm39G ->
                        case ds1_sm4J7 of {
                          Left blocker_alXr1 -> Left (unblockOnBoth blocker_alXr1 ipv_sm39G);
                          Right ds4_dm0cV -> Left ipv_sm39G
                        };
                      Right ds4_dm0cR ->
                        case ds4_dm0cR of { SizeOfSort u_alXqa n_alXqb ->
                        case geInteger# n_alXqb $mLargeSort1 of {
                          __DEFAULT ->
                            case ds1_sm4J7 of {
                              Left blocker_alXr1 -> Left blocker_alXr1;
                              Right ds5_dm0cV -> lvl288_rmk5C
                            };
                          1# -> lvl318_rmk66
                        }
                        }
                    } } in
              case ds1_sm4J7 of {
                Left ipv_sm39J -> jump fail_sm4J5 void#;
                Right ds3_dm0cO ->
                  case ds3_dm0cO of { SizeOfSort u_alXq8 ds4_dlZV9 ->
                  join {
                    fail1_sm4J9 _
                      = case geInteger# ds4_dlZV9 $mLargeSort1 of {
                          __DEFAULT -> jump fail_sm4J5 void#;
                          1# ->
                            case ds2_sm4J6 of {
                              Left ipv_sm39M -> jump fail_sm4J5 void#;
                              Right ds6_dm0cQ ->
                                case ds6_dm0cQ of { SizeOfSort u1_XlXPx ds7_Xm0kz ->
                                case eqInteger# ds7_Xm0kz $bSmallSort1 of {
                                  __DEFAULT -> jump fail_sm4J5 void#;
                                  1# ->
                                    Right
                                      (case ds4_dlZV9 of dt_X8LvA { __DEFAULT ->
                                       Inf
                                         (case u_alXq8 of {
                                            __DEFAULT -> u1_XlXPx;
                                            USSet -> USSet
                                          })
                                         dt_X8LvA
                                       })
                                }
                                }
                            }
                        } } in
                  case eqInteger# ds4_dlZV9 $bSmallSort1 of {
                    __DEFAULT -> jump fail1_sm4J9 void#;
                    1# ->
                      case ds2_sm4J6 of {
                        Left ipv_sm39W -> jump fail1_sm4J9 void#;
                        Right ds5_dm0cP ->
                          case ds5_dm0cP of { SizeOfSort u1_XlXPp ds6_Xm0kr ->
                          case eqInteger# ds6_Xm0kr $bSmallSort1 of {
                            __DEFAULT -> jump fail1_sm4J9 void#;
                            1# ->
                              case o_alXqU of {
                                Flexible ms_alXqX -> Left (metaSetToBlocker ms_alXqX);
                                WeaklyRigid ->
                                  Right
                                    (Inf
                                       (case u_alXq8 of {
                                          __DEFAULT -> u1_XlXPp;
                                          USSet -> USSet
                                        })
                                       $mLargeSort1);
                                Unguarded ->
                                  Right
                                    (Inf
                                       (case u_alXq8 of {
                                          __DEFAULT -> u1_XlXPp;
                                          USSet -> USSet
                                        })
                                       $mLargeSort1);
                                StronglyRigid ->
                                  Right
                                    (Inf
                                       (case u_alXq8 of {
                                          __DEFAULT -> u1_XlXPp;
                                          USSet -> USSet
                                        })
                                       $mLargeSort1)
                              }
                          }
                          }
                      }
                  }
                  }
              }
          };
        NoAbs ds_dm0di s2_alXqP -> Right (FunSort w_sme8V s2_alXqP)
      }
end Rec }

-- RHS size: {terms: 10, types: 15, coercions: 0, joins: 0/0}
levelMax
  = \ w_sme4F w1_sme4G ->
      case $wlevelMax w_sme4F w1_sme4G of { (# ww1_smeoH, ww2_smeoI #) ->
      Max ww1_smeoH ww2_smeoI
      }

-- RHS size: {terms: 6, types: 5, coercions: 0, joins: 0/0}
piSort' = \ _ w1_sme8V w2_sme8W -> $wpiSort' w1_sme8V w2_sme8W

-- RHS size: {terms: 12, types: 16, coercions: 18, joins: 0/0}
$fSubstType''_$s$capplySubst
  = \ eta1_B2 eta2_B1 ->
      case eta2_B1 of { El s_alXdH t_alXdI ->
      El
        ($fApplyRewriteRule_$s$capplySubst
           (eta1_B2 `cast` <Co:10>) s_alXdH)
        ($fApplyExtLamInfo_$sapplySubstTerm
           (eta1_B2 `cast` <Co:8>) t_alXdI)
      }

-- RHS size: {terms: 14, types: 13, coercions: 0, joins: 0/0}
piSort
  = \ a_alXr5 s1_alXr6 s2_alXr7 ->
      case $wpiSort' s1_alXr6 s2_alXr7 of {
        Left x_acvT -> PiSort a_alXr5 s1_alXr6 s2_alXr7;
        Right y_acvV -> y_acvV
      }

-- RHS size: {terms: 52, types: 81, coercions: 20, joins: 1/2}
mkPiSort
  = \ a_alXpi b_alXpj ->
      join {
        $j_smePN s2_sm4Gu
          = let {
              s1_sm4Gv
                = case a_alXpi of
                  { Dom ds1_d8Q3G ds2_d8Q3H ds3_d8Q3I ds4_d8Q3J ds5_d8Q3K ->
                  case ds5_d8Q3K of { El s39_a8KRC a2_a8KRD ->
                  s39_a8KRC `cast` <Co:8>
                  }
                  } } in
            case $wpiSort' (s1_sm4Gv `cast` <Co:6>) s2_sm4Gu of {
              Left x_acvT ->
                PiSort
                  (case a_alXpi of
                   { Dom a1_a8M7x a2_a8M7y a3_a8M7z a4_a8M7A a5_a8M7B ->
                   Dom
                     a1_a8M7x
                     a2_a8M7y
                     a3_a8M7z
                     a4_a8M7A
                     (case a5_a8M7B of { El ds1_d8Q2L ds2_d8Q2M -> ds2_d8Q2M })
                   })
                  (s1_sm4Gv `cast` <Co:6>)
                  s2_sm4Gu;
              Right y_acvV -> y_acvV
            } } in
      case b_alXpj of {
        Abs a1_a8M6g a2_a8M6h ->
          jump $j_smePN
            (Abs
               a1_a8M6g
               (case a2_a8M6h of { El s39_a8KRC a4_a8KRD -> s39_a8KRC }));
        NoAbs a1_a8M6k a2_a8M6l ->
          jump $j_smePN
            (NoAbs
               a1_a8M6k (case a2_a8M6l of { El s39_a8KRC a4_a8KRD -> s39_a8KRC }))
      }

-- RHS size: {terms: 37, types: 50, coercions: 0, joins: 0/2}
telePi'
  = \ reAbs_alXpA eta1_B2 eta2_B1 ->
      letrec {
        telePi2_sm4Go
          = \ ds_dm0gN t_alXpC ->
              case ds_dm0gN of {
                EmptyTel -> t_alXpC;
                ExtendTel u_alXpD tel_alXpE ->
                  let {
                    b_sm4Gq
                      = case tel_alXpE of {
                          Abs a1_a8M6g a2_a8M6h ->
                            Abs a1_a8M6g (telePi2_sm4Go a2_a8M6h t_alXpC);
                          NoAbs a1_a8M6k a2_a8M6l ->
                            NoAbs a1_a8M6k (telePi2_sm4Go a2_a8M6l t_alXpC)
                        } } in
                  El (mkPiSort u_alXpD b_sm4Gq) (Pi u_alXpD (reAbs_alXpA b_sm4Gq))
              }; } in
      telePi2_sm4Go eta1_B2 eta2_B1

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
telePi_ = telePi' id

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractType'' = telePi_ `cast` <Co:3>

-- RHS size: {terms: 65, types: 51, coercions: 0, joins: 0/2}
$fAbstractDefinition_$cabstract
  = \ tel_alXfy ds_dm275 ->
      case ds_dm275 of
      { Defn info_alXfz x_alXfA t_alXfB pol_alXfC occ_alXfD gens_alXfE
             gpars_alXfF df_alXfG m_alXfH c_alXfI inst_alXfJ copy_alXfK ma_alXfL
             nc_alXfM inj_alXfN copat_alXfO blk_alXfP lang_alXfQ d_alXfR ->
      Defn
        info_alXfz
        x_alXfA
        (telePi' id tel_alXfy t_alXfB)
        ($fAbstractDefinition_$cabstract4 tel_alXfy pol_alXfC)
        ($fAbstractDefinition_$cabstract3 tel_alXfy occ_alXfD)
        ($fAbstractDefinition_$cabstract2 tel_alXfy gens_alXfE)
        (case $w$csize tel_alXfy of ww_s92fc { __DEFAULT ->
         case <# 0# ww_s92fc of {
           __DEFAULT -> gpars_alXfF;
           1# ->
             let { lvl328_smhFO = : Nothing gpars_alXfF } in
             letrec {
               $wxs_sme9f
                 = \ ww1_sme9d ->
                     case ww1_sme9d of ds1_a1f59 {
                       __DEFAULT -> : Nothing ($wxs_sme9f (-# ds1_a1f59 1#));
                       1# -> lvl328_smhFO
                     }; } in
             $wxs_sme9f ww_s92fc
         }
         })
        df_alXfG
        m_alXfH
        c_alXfI
        inst_alXfJ
        copy_alXfK
        ma_alXfL
        nc_alXfM
        inj_alXfN
        copat_alXfO
        blk_alXfP
        lang_alXfQ
        ($fAbstractDefinition_$cabstract1 tel_alXfy d_alXfR)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fAbstractDefinition
  = $fAbstractDefinition_$cabstract `cast` <Co:3>

-- RHS size: {terms: 44, types: 23, coercions: 0, joins: 0/0}
$fEqBlocked'_$c==1
  = \ ds_dm0Od ds1_dm0Oe ->
      case ds_dm0Od of {
        StuckOn a1_alXHx ->
          case ds1_dm0Oe of {
            __DEFAULT -> False;
            StuckOn b1_alXHy -> $w$c==1 $fEqTerm a1_alXHx b1_alXHy
          };
        Underapplied ->
          case ds1_dm0Oe of {
            __DEFAULT -> False;
            Underapplied -> True
          };
        AbsurdMatch ->
          case ds1_dm0Oe of {
            __DEFAULT -> False;
            AbsurdMatch -> True
          };
        MissingClauses a1_alXHz ->
          case ds1_dm0Oe of {
            __DEFAULT -> False;
            MissingClauses b1_alXHA -> $fEqQName_$c== a1_alXHz b1_alXHA
          };
        ReallyNotBlocked ->
          case ds1_dm0Oe of {
            __DEFAULT -> False;
            ReallyNotBlocked -> True
          }
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fEqNotBlocked'_$c/=
  = \ eta1_B2 eta2_XqF ->
      case $fEqBlocked'_$c==1 eta1_B2 eta2_XqF of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fEqNotBlocked' = C:Eq $fEqBlocked'_$c==1 $fEqNotBlocked'_$c/=

-- RHS size: {terms: 40, types: 38, coercions: 0, joins: 0/0}
$fEqBlocked'_$c==
  = \ @ t_alYrA $dEq2_alYrB ds_dm0O7 ds1_dm0O8 ->
      case ds_dm0O7 of {
        Blocked a1_alXHp a2_alXHq ->
          case ds1_dm0O8 of {
            Blocked b1_alXHr b2_alXHs ->
              case $fEqBlocker_$c== a1_alXHp b1_alXHr of {
                False -> False;
                True -> == $dEq2_alYrB a2_alXHq b2_alXHs
              };
            NotBlocked ipv_sm3cw ipv1_sm3cx -> False
          };
        NotBlocked a1_alXHt a2_alXHu ->
          case ds1_dm0O8 of {
            Blocked ipv_sm3cA ipv1_sm3cB -> False;
            NotBlocked b1_alXHv b2_alXHw ->
              case $fEqBlocked'_$c==1 a1_alXHt b1_alXHv of {
                False -> False;
                True -> == $dEq2_alYrB a2_alXHu b2_alXHw
              }
          }
      }

-- RHS size: {terms: 13, types: 10, coercions: 0, joins: 0/0}
$fEqBlocked'_$c/=
  = \ @ t_alYrA $dEq2_alYrB eta1_B2 eta2_XqK ->
      case $fEqBlocked'_$c== $dEq2_alYrB eta1_B2 eta2_XqK of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fEqBlocked'
  = \ @ t_alYrA $dEq2_alYrB ->
      C:Eq
        ($fEqBlocked'_$c== $dEq2_alYrB) ($fEqBlocked'_$c/= $dEq2_alYrB)

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fEqSort'_$c/=
  = \ eta1_B2 eta2_Xju ->
      case $fEqSort'_$c== eta1_B2 eta2_Xju of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fEqSort' = C:Eq $fEqSort'_$c== $fEqSort'_$c/=

-- RHS size: {terms: 24, types: 16, coercions: 0, joins: 0/0}
$fEqLevel'_$c/=
  = \ eta1_B2 eta2_Xjr ->
      case eta1_B2 of { Max ww1_sme6R ww2_sme6S ->
      case eta2_Xjr of { Max ww4_sme6W ww5_sme6X ->
      case eqInteger# ww1_sme6R ww4_sme6W of {
        __DEFAULT -> True;
        1# ->
          case $fEq[]_$c== $fEqPlusLevel' ww2_sme6S ww5_sme6X of {
            False -> True;
            True -> False
          }
      }
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fEqLevel' = C:Eq $fEqLevel'_$c== $fEqLevel'_$c/=

-- RHS size: {terms: 80, types: 57, coercions: 0, joins: 1/1}
$w$c==2
  = \ ww_sme9O
      ww1_sme9P
      ww2_sme9Q
      ww3_sme9R
      ww4_sme9V
      ww5_sme9W
      ww6_sme9X
      ww7_sme9Y ->
      join {
        $j_sm5Ue
          = case $fEqTerm_$c== ww1_sme9P ww5_sme9W of {
              False -> False;
              True ->
                case ww2_sme9Q of { El ds1_d8Q2L ds2_d8Q2M ->
                case ww6_sme9X of { El ds4_X8QuL ds5_X8QuN ->
                case $fEqTerm_$c== ds2_d8Q2M ds5_X8QuN of {
                  False -> False;
                  True -> $fEqBool_$c== ww3_sme9R ww7_sme9Y
                }
                }
                }
            } } in
      case ww_sme9O of {
        LocalCandidate ->
          case ww4_sme9V of {
            LocalCandidate -> jump $j_sm5Ue;
            GlobalCandidate ipv_sm2PW -> False
          };
        GlobalCandidate a1_alXHn ->
          case ww4_sme9V of {
            LocalCandidate -> False;
            GlobalCandidate b1_alXHo ->
              case a1_alXHn of { QName ds_d6aXk ds1_d6aXl ->
              case ds1_d6aXl of
              { Name ds2_d6aXp ds3_d6aXq ds4_d6aXr ds5_d6aXs ds6_d6aXt
                     ds7_d6aXu ->
              case ds2_d6aXp of { NameId dt_smhFR dt1_smhFS ->
              case b1_alXHo of { QName ds8_X6baj ds9_X6bal ->
              case ds9_X6bal of
              { Name ds10_X6bau ds11_X6baw ds12_X6bay ds13_X6baA ds14_X6baC
                     ds15_X6baE ->
              case ds10_X6bau of { NameId dt2_smhFV dt3_smhFW ->
              case eqWord# dt_smhFR dt2_smhFV of {
                __DEFAULT -> False;
                1# ->
                  case eqWord# dt1_smhFS dt3_smhFW of {
                    __DEFAULT -> False;
                    1# -> jump $j_sm5Ue
                  }
              }
              }
              }
              }
              }
              }
              }
          }
      }

-- RHS size: {terms: 17, types: 12, coercions: 0, joins: 0/0}
$fEqCandidate_$c==
  = \ w_sme9K w1_sme9L ->
      case w_sme9K of
      { Candidate ww1_sme9O ww2_sme9P ww3_sme9Q ww4_sme9R ->
      case w1_sme9L of
      { Candidate ww6_sme9V ww7_sme9W ww8_sme9X ww9_sme9Y ->
      $w$c==2
        ww1_sme9O
        ww2_sme9P
        ww3_sme9Q
        ww4_sme9R
        ww6_sme9V
        ww7_sme9W
        ww8_sme9X
        ww9_sme9Y
      }
      }

-- RHS size: {terms: 22, types: 13, coercions: 0, joins: 0/0}
$fEqCandidate_$c/=
  = \ eta1_B2 eta2_Xqy ->
      case eta1_B2 of
      { Candidate ww1_sme9O ww2_sme9P ww3_sme9Q ww4_sme9R ->
      case eta2_Xqy of
      { Candidate ww6_sme9V ww7_sme9W ww8_sme9X ww9_sme9Y ->
      case $w$c==2
             ww1_sme9O
             ww2_sme9P
             ww3_sme9Q
             ww4_sme9R
             ww6_sme9V
             ww7_sme9W
             ww8_sme9X
             ww9_sme9Y
      of {
        False -> True;
        True -> False
      }
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fEqCandidate = C:Eq $fEqCandidate_$c== $fEqCandidate_$c/=

Rec {
-- RHS size: {terms: 82, types: 50, coercions: 0, joins: 0/0}
$fEqSubstitution'_$c==
  = \ ds_dm0Pw ds1_dm0Px ->
      case ds_dm0Pw of {
        IdS ->
          case ds1_dm0Px of {
            __DEFAULT -> False;
            IdS -> True
          };
        EmptyS a1_alXJv ->
          case ds1_dm0Px of {
            __DEFAULT -> False;
            EmptyS b1_alXJw -> True
          };
        :# a1_alXJx a2_alXJy ->
          case ds1_dm0Px of {
            __DEFAULT -> False;
            :# b1_alXJz b2_alXJA ->
              case $fEqTerm_$c== a1_alXJx b1_alXJz of {
                False -> False;
                True -> $fEqSubstitution'_$c== a2_alXJy b2_alXJA
              }
          };
        Strengthen a1_alXJB dt_dm2HV a3_alXJD ->
          case ds1_dm0Px of {
            __DEFAULT -> False;
            Strengthen b1_alXJE dt1_dm2HW b3_alXJG ->
              case ==# dt_dm2HV dt1_dm2HW of {
                __DEFAULT -> False;
                1# -> $fEqSubstitution'_$c== a3_alXJD b3_alXJG
              }
          };
        Wk dt_dm2HX a2_alXJI ->
          case ds1_dm0Px of {
            __DEFAULT -> False;
            Wk dt1_dm2HY b2_alXJK ->
              case ==# dt_dm2HX dt1_dm2HY of {
                __DEFAULT -> False;
                1# -> $fEqSubstitution'_$c== a2_alXJI b2_alXJK
              }
          };
        Lift dt_dm2HZ a2_alXJM ->
          case ds1_dm0Px of {
            __DEFAULT -> False;
            Lift dt1_dm2I0 b2_alXJO ->
              case ==# dt_dm2HZ dt1_dm2I0 of {
                __DEFAULT -> False;
                1# -> $fEqSubstitution'_$c== a2_alXJM b2_alXJO
              }
          }
      }
end Rec }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fEqSubstitution'_$c/=
  = \ eta1_B2 eta2_XqK ->
      case $fEqSubstitution'_$c== eta1_B2 eta2_XqK of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fEqSubstitution'
  = C:Eq $fEqSubstitution'_$c== $fEqSubstitution'_$c/=

Rec {
-- RHS size: {terms: 13, types: 10, coercions: 0, joins: 0/0}
$fEqPattern'_$c/=
  = \ @ a_alYFM $dEq2_alYFN eta1_B2 eta2_Xtd ->
      case $fEqPattern'_$c== $dEq2_alYFN eta1_B2 eta2_Xtd of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fEqPattern'
  = \ @ a_alYFM $dEq2_alYFN ->
      C:Eq
        ($fEqPattern'_$c== $dEq2_alYFN) ($fEqPattern'_$c/= $dEq2_alYFN)

-- RHS size: {terms: 138, types: 152, coercions: 0, joins: 0/3}
$fEqPattern'_$c==
  = \ @ a_alYFM $dEq2_alYFN ->
      let { $dEq3_sm4FA = $fEqPattern' $dEq2_alYFN } in
      let {
        $dEq4_sm4Fz
          = $fEqNamed $fEqLamBinding_$s$fEqWithOrigin $dEq3_sm4FA } in
      let { $dEq5_sm4Fy = $fEqArg $dEq4_sm4Fz } in
      \ ds_dm1ai ds1_dm1aj ->
        case ds_dm1ai of {
          VarP ds2_dm1d0 x_alX81 ->
            case ds1_dm1aj of {
              __DEFAULT -> False;
              VarP ds3_dm1d1 y_alX82 -> == $dEq2_alYFN x_alX81 y_alX82
            };
          DotP ds2_dm1d2 u_alX83 ->
            case ds1_dm1aj of {
              __DEFAULT -> False;
              DotP ds3_dm1d3 v_alX84 -> $fEqTerm_$c== u_alX83 v_alX84
            };
          ConP c_alX85 ds2_dm1d4 ps_alX86 ->
            case ds1_dm1aj of {
              __DEFAULT -> False;
              ConP c'_alX87 ds3_dm1d5 qs_alX88 ->
                case c_alX85 of
                { ConHead ww1_s92pT ww2_s92qd ww3_s92qe ww4_s92qf ->
                case ww1_s92pT of { QName ww6_s92pW ww7_s92pX ->
                case ww7_s92pX of
                { Name ww9_s92q0 ww10_s92q6 ww11_s92q7 ww12_s92q8 ww13_s92q9
                       ww14_s92qa ->
                $fEq[]_$c== $dEq5_sm4Fy ps_alX86 qs_alX88
                }
                }
                }
            };
          LitP ds2_dm1d6 l_alX89 ->
            case ds1_dm1aj of {
              __DEFAULT -> False;
              LitP ds3_dm1d7 l'_alX8a -> $fEqLiteral_$c== l_alX89 l'_alX8a
            };
          ProjP ds2_dm1d8 f4_alX8b ->
            case ds1_dm1aj of {
              __DEFAULT -> False;
              ProjP ds3_dm1d9 g_alX8c -> $fEqQName_$c== f4_alX8b g_alX8c
            };
          IApplyP ds2_dm1da u_alX8d v_alX8e x_alX8f ->
            case ds1_dm1aj of {
              __DEFAULT -> False;
              IApplyP ds3_dm1db u'_alX8g v'_alX8h y_alX8i ->
                case $fEqTerm_$c== u_alX8d u'_alX8g of {
                  False -> False;
                  True ->
                    case $fEqTerm_$c== v_alX8e v'_alX8h of {
                      False -> False;
                      True -> == $dEq2_alYFN x_alX8f y_alX8i
                    }
                }
            };
          DefP ds2_dm1dc f4_alX8j ps_alX8k ->
            case ds1_dm1aj of {
              __DEFAULT -> False;
              DefP ds3_dm1dd g_alX8l qs_alX8m ->
                case f4_alX8j of { QName ds4_d6aXk ds5_d6aXl ->
                case ds5_d6aXl of
                { Name ds6_d6aXp ds7_d6aXq ds8_d6aXr ds9_d6aXs ds10_d6aXt
                       ds11_d6aXu ->
                case ds6_d6aXp of { NameId dt_smhFZ dt1_smhG0 ->
                case g_alX8l of { QName ds12_X6baj ds13_X6bal ->
                case ds13_X6bal of
                { Name ds14_X6bau ds15_X6baw ds16_X6bay ds17_X6baA ds18_X6baC
                       ds19_X6baE ->
                case ds14_X6bau of { NameId dt2_smhG3 dt3_smhG4 ->
                case eqWord# dt_smhFZ dt2_smhG3 of {
                  __DEFAULT -> False;
                  1# ->
                    case eqWord# dt1_smhG0 dt3_smhG4 of {
                      __DEFAULT -> False;
                      1# -> $fEq[]_$c== $dEq5_sm4Fy ps_alX8k qs_alX8m
                    }
                }
                }
                }
                }
                }
                }
                }
            }
        }
end Rec }

-- RHS size: {terms: 3, types: 3, coercions: 8, joins: 0/0}
$fSubstType''_$s$fSubstType''
  = C:Subst
      ($fDeBruijnTerm `cast` <Co:8>) $fSubstType''_$s$capplySubst

-- RHS size: {terms: 4, types: 4, coercions: 12, joins: 0/0}
$dSubst_rmk6a
  = $fSubstDom'
      $fSubstTerm
      $fSubstType''_$s$fSubstType''
      ($d~_rmk53 `cast` <Co:12>)

Rec {
-- RHS size: {terms: 30, types: 59, coercions: 18, joins: 0/0}
$fApplyExtLamInfo_$s$capply
  = \ tel_alXlj ds_dm2EB ->
      case ds_dm2EB of {
        [] -> tel_alXlj;
        : ipv_sm2MY ipv1_sm2MZ ->
          case tel_alXlj of {
            EmptyTel -> lvl199_rmk46;
            ExtendTel ds1_dm2Gg tel1_alXlk ->
              case tel1_alXlk of {
                Abs ds2_dddFd v_addbA ->
                  $fApplyExtLamInfo_$s$capply
                    ($fOrdTele_$capplySubst
                       $dSubst_rmk6a
                       (:#
                          (case ipv_sm2MY of { Arg ds3_d3o6D ds4_d3o6E ->
                           ds4_d3o6E `cast` <Co:18>
                           })
                          IdS)
                       v_addbA)
                    ipv1_sm2MZ;
                NoAbs ds2_dddFe v_addbC ->
                  $fApplyExtLamInfo_$s$capply v_addbC ipv1_sm2MZ
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 35, types: 52, coercions: 10, joins: 0/0}
$w$capply4
  = \ @ a_smea7 ww_smead ww1_smeah w_smea9 w1_smeaa ->
      case w1_smeaa of {
        [] -> w_smea9;
        : ipv_sm2MY ipv1_sm2MZ ->
          case w_smea9 of {
            EmptyTel -> lvl200_rmk47;
            ExtendTel ds_dm2Gg tel_alXlk ->
              case tel_alXlk of {
                Abs ds1_dddFd v_addbA ->
                  $w$capply4
                    ww_smead
                    @~ <Co:1>
                    ($fOrdTele_$capplySubst
                       ww_smead
                       (:#
                          (case ipv_sm2MY of { Arg ds2_d3o6D ds3_d3o6E ->
                           ds3_d3o6E `cast` <Co:8>
                           })
                          IdS)
                       v_addbA)
                    ipv1_sm2MZ;
                NoAbs ds1_dddFe v_addbC ->
                  $w$capply4 ww_smead @~ <Co:1> v_addbC ipv1_sm2MZ
              }
          }
      }
end Rec }

-- RHS size: {terms: 14, types: 32, coercions: 1, joins: 0/0}
$fApplyTele_$capply
  = \ @ a_smea7 w_smea8 w1_smea9 w2_smeaa ->
      case w_smea8 of { (ww1_smead, ww2_smeae) ->
      case ww2_smeae of { Eq# ww4_smeah ->
      $w$capply4 ww1_smead @~ <Co:1> w1_smea9 w2_smeaa
      }
      }

-- RHS size: {terms: 16, types: 27, coercions: 1, joins: 0/0}
$w$capplyE2
  = \ @ a_smeal ww_smear ww1_smeav w_smean w1_smeao ->
      case allApplyElims w1_smeao of {
        Nothing -> case $fApplyTele1 of wild2_00 { };
        Just v_aaOy -> $w$capply4 ww_smear @~ <Co:1> w_smean v_aaOy
      }

-- RHS size: {terms: 14, types: 32, coercions: 1, joins: 0/0}
$fApplyTele_$capplyE
  = \ @ a_smeal w_smeam w1_smean w2_smeao ->
      case w_smeam of { (ww1_smear, ww2_smeas) ->
      case ww2_smeas of { Eq# ww4_smeav ->
      $w$capplyE2 ww1_smear @~ <Co:1> w1_smean w2_smeao
      }
      }

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fApplyTele
  = \ @ a_alZAZ $d(%,%)_alZB0 ->
      C:Apply
        ($fApplyTele_$capply $d(%,%)_alZB0)
        ($fApplyTele_$capplyE $d(%,%)_alZB0)

Rec {
-- RHS size: {terms: 68, types: 135, coercions: 0, joins: 2/2}
$fEqSection_$s$c==
  = \ ds_dm0NN ds1_dm0NO ->
      case ds_dm0NN of {
        EmptyTel ->
          case ds1_dm0NO of {
            EmptyTel -> True;
            ExtendTel ipv_sm2Oh ipv1_sm2Oi -> False
          };
        ExtendTel a1_alXHb a2_alXHc ->
          case ds1_dm0NO of {
            EmptyTel -> False;
            ExtendTel b1_alXHd b2_alXHe ->
              case $fEqDom'_$c== $dEq_rmk67 a1_alXHb b1_alXHd of {
                False -> False;
                True ->
                  join {
                    fail_sm4Rs _
                      = join {
                          $j_smfBG karg_smeRF
                            = case a2_alXHc of {
                                Abs ds3_dddYL v_addbG -> $fEqSection_$s$c== v_addbG karg_smeRF;
                                NoAbs ds3_dddYM v_addbH ->
                                  $fEqSection_$s$c==
                                    ($fOrdTele_$capplySubst $dSubst_rmk6a absBody1 v_addbH)
                                    karg_smeRF
                              } } in
                        case b2_alXHe of {
                          Abs ds3_dddYL v_addbG -> jump $j_smfBG v_addbG;
                          NoAbs ds3_dddYM v_addbH ->
                            jump $j_smfBG
                              ($fOrdTele_$capplySubst $dSubst_rmk6a absBody1 v_addbH)
                        } } in
                  case a2_alXHc of {
                    Abs ipv_sm2Nv ipv1_sm2Nw -> jump fail_sm4Rs void#;
                    NoAbs ds2_dm11d a_alX7s ->
                      case b2_alXHe of {
                        Abs ipv_sm2Nz ipv1_sm2NA -> jump fail_sm4Rs void#;
                        NoAbs ds3_dm11e b_alX7t -> $fEqSection_$s$c== a_alX7s b_alX7t
                      }
                  }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 77, types: 83, coercions: 0, joins: 2/2}
$fEqTelV_$c==1
  = \ @ a_alYqJ $dSubst1_alYqK $dEq2_alYqL ds_dm0NN ds1_dm0NO ->
      case ds_dm0NN of {
        EmptyTel ->
          case ds1_dm0NO of {
            EmptyTel -> True;
            ExtendTel ipv_sm2Oh ipv1_sm2Oi -> False
          };
        ExtendTel a1_alXHb a2_alXHc ->
          case ds1_dm0NO of {
            EmptyTel -> False;
            ExtendTel b1_alXHd b2_alXHe ->
              case == $dEq2_alYqL a1_alXHb b1_alXHd of {
                False -> False;
                True ->
                  join {
                    fail_sm4Ro _
                      = join {
                          $j_smfBP karg_smeRO
                            = case a2_alXHc of {
                                Abs ds3_dddYL v_addbG ->
                                  $fEqTelV_$c==1 $dSubst1_alYqK $dEq2_alYqL v_addbG karg_smeRO;
                                NoAbs ds3_dddYM v_addbH ->
                                  $fEqTelV_$c==1
                                    $dSubst1_alYqK
                                    $dEq2_alYqL
                                    ($fOrdTele_$capplySubst $dSubst1_alYqK absBody1 v_addbH)
                                    karg_smeRO
                              } } in
                        case b2_alXHe of {
                          Abs ds3_dddYL v_addbG -> jump $j_smfBP v_addbG;
                          NoAbs ds3_dddYM v_addbH ->
                            jump $j_smfBP
                              ($fOrdTele_$capplySubst $dSubst1_alYqK absBody1 v_addbH)
                        } } in
                  case a2_alXHc of {
                    Abs ipv_sm2Nv ipv1_sm2Nw -> jump fail_sm4Ro void#;
                    NoAbs ds2_dm11d a4_alX7s ->
                      case b2_alXHe of {
                        Abs ipv_sm2Nz ipv1_sm2NA -> jump fail_sm4Ro void#;
                        NoAbs ds3_dm11e b_alX7t ->
                          $fEqTelV_$c==1 $dSubst1_alYqK $dEq2_alYqL a4_alX7s b_alX7t
                      }
                  }
              }
          }
      }
end Rec }

-- RHS size: {terms: 35, types: 58, coercions: 10, joins: 0/3}
$w$c==3
  = \ @ a_smeaM ww_smeaR ww1_smeaV w_smeaO ->
      let { $dEq2_sm4GA = $fEqDom' w_smeaO } in
      let { $d~1_sm4Gz = Eq# @~ <Co:1> } in
      let {
        $dSubst1_sm4GD
          = $fSubstDom' $fSubstTerm ww_smeaR ($d~1_sm4Gz `cast` <Co:9>) } in
      \ ds_dm0S8 ds1_dm0S9 ->
        case ds_dm0S8 of { TelV a1_alXK7 a2_alXK8 ->
        case ds1_dm0S9 of { TelV b1_alXK9 b2_alXKa ->
        case $fEqTelV_$c==1 $dSubst1_sm4GD $dEq2_sm4GA a1_alXK7 b1_alXK9
        of {
          False -> False;
          True -> == w_smeaO a2_alXK8 b2_alXKa
        }
        }
        }

-- RHS size: {terms: 12, types: 31, coercions: 1, joins: 0/0}
$fEqTelV_$c==
  = \ @ a_smeaM w_smeaN w1_smeaO ->
      case w_smeaN of { (ww1_smeaR, ww2_smeaS) ->
      case ww2_smeaS of { Eq# ww4_smeaV ->
      $w$c==3 ww1_smeaR @~ <Co:1> w1_smeaO
      }
      }

-- RHS size: {terms: 26, types: 57, coercions: 1, joins: 0/0}
$fEqTelV_$c/=
  = \ @ a_alYzH $d(%,%)_alYzI $dEq2_alYzJ eta1_B2 eta2_Xqt ->
      case eq_sel ($p2(%,%) $d(%,%)_alYzI) of co_alZHi { __DEFAULT ->
      case $d(%,%)_alYzI of { (ww1_smeaR, ww2_smeaS) ->
      case ww2_smeaS of { Eq# ww4_smeaV ->
      case $w$c==3 ww1_smeaR @~ <Co:1> $dEq2_alYzJ eta1_B2 eta2_Xqt of {
        False -> True;
        True -> False
      }
      }
      }
      }

-- RHS size: {terms: 10, types: 10, coercions: 0, joins: 0/0}
$fEqTelV
  = \ @ a_alYzH $d(%,%)_alYzI $dEq2_alYzJ ->
      C:Eq
        ($fEqTelV_$c== $d(%,%)_alYzI $dEq2_alYzJ)
        ($fEqTelV_$c/= $d(%,%)_alYzI $dEq2_alYzJ)

-- RHS size: {terms: 18, types: 36, coercions: 1, joins: 0/0}
$fOrdTelV_$cp1Ord
  = \ @ a_smeaZ w_smeb0 w1_smeb1 ->
      case w_smeb0 of ww_smeb3 { (ww1_smeb4, ww2_smeb5) ->
      case ww2_smeb5 of { Eq# ww4_smeb8 ->
      C:Eq
        ($w$c==3 ww1_smeb4 @~ <Co:1> ($p1Ord w1_smeb1))
        ($fEqTelV_$c/= ww_smeb3 ($p1Ord w1_smeb1))
      }
      }

-- RHS size: {terms: 10, types: 9, coercions: 0, joins: 0/0}
$fEqSection_$s$c/=
  = \ eta1_B2 eta2_B1 ->
      case $fEqSection_$s$c== eta1_B2 eta2_B1 of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 15, types: 12, coercions: 0, joins: 0/0}
$fEqTele_$c/=
  = \ @ a_alYqJ $dSubst1_alYqK $dEq2_alYqL eta1_B2 eta2_B1 ->
      case $fEqTelV_$c==1 $dSubst1_alYqK $dEq2_alYqL eta1_B2 eta2_B1 of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 10, types: 10, coercions: 0, joins: 0/0}
$fEqTele
  = \ @ a_alYqJ $dSubst1_alYqK $dEq2_alYqL ->
      C:Eq
        ($fEqTelV_$c==1 $dSubst1_alYqK $dEq2_alYqL)
        ($fEqTele_$c/= $dSubst1_alYqK $dEq2_alYqL)

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
$fOrdTele_$cp1Ord
  = \ @ a_alYpA $dSubst1_alYpB $dOrd_alYpC ->
      $fEqTele $dSubst1_alYpB ($p1Ord $dOrd_alYpC)

-- RHS size: {terms: 32, types: 20, coercions: 0, joins: 0/0}
$fOrdTele
  = \ @ a_alYpA $dSubst1_alYpB $dOrd_alYpC ->
      C:Ord
        ($fOrdTele_$cp1Ord $dSubst1_alYpB $dOrd_alYpC)
        ($fOrdTelV_$ccompare $dSubst1_alYpB $dOrd_alYpC)
        ($fOrdTele_$c< $dSubst1_alYpB $dOrd_alYpC)
        ($fOrdTele_$c<= $dSubst1_alYpB $dOrd_alYpC)
        (\ a1_alXH7 b_alXH8 ->
           $fOrdTele_$c< $dSubst1_alYpB $dOrd_alYpC b_alXH8 a1_alXH7)
        ($fOrdTele_$c>= $dSubst1_alYpB $dOrd_alYpC)
        ($fOrdTele_$cmax $dSubst1_alYpB $dOrd_alYpC)
        ($fOrdTele_$cmin $dSubst1_alYpB $dOrd_alYpC)

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
$fEqSection
  = C:Eq
      ($fEqSection_$s$c== `cast` <Co:7>)
      ($fEqSection_$s$c/= `cast` <Co:7>)

Rec {
-- RHS size: {terms: 34, types: 52, coercions: 34, joins: 0/0}
typeArgsWithTel
  = \ ds_dm0fh ds1_dm0fi ->
      case ds1_dm0fi of {
        [] -> lvl92_rmk1Z;
        : ipv_sm3ec ipv1_sm3ed ->
          case ds_dm0fh of {
            EmptyTel -> Nothing;
            ExtendTel dom_alXpU tel_alXpV ->
              case typeArgsWithTel
                     (case tel_alXpV of {
                        Abs ds2_dddLE v_addbx ->
                          $fOrdTele_$capplySubst
                            $dSubst_rmk6a
                            ($wsingletonS
                               ($fDeBruijnTerm `cast` <Co:16>) 0# (ipv_sm3ec `cast` <Co:18>))
                            v_addbx;
                        NoAbs ds2_dddLF v_addbz -> v_addbz
                      })
                     ipv1_sm3ed
              of {
                Nothing -> Nothing;
                Just a1_anJk -> Just (: dom_alXpU a1_anJk)
              }
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
eta_rmk6b = Wk 1# IdS

Rec {
-- RHS size: {terms: 62, types: 89, coercions: 18, joins: 0/0}
namedBindsToTel
  = \ ds_dm0hX t_alXpa ->
      case ds_dm0hX of {
        [] -> EmptyTel;
        : x_alXpb xs_alXpc ->
          ExtendTel
            (case x_alXpb of { Arg a1_a3gXn a2_a3gXo ->
             Dom
               a1_a3gXn
               (case a2_a3gXo of { Named ds1_dm0hU x1_alXpg ->
                case ds1_dm0hU of wild4_X49 {
                  Nothing ->
                    Just
                      (WithOrigin
                         Inserted
                         (Ranged
                            ($fHasRangeAmbiguousQName_$cgetRange2 x1_alXpg)
                            (nameToArgName x1_alXpg)));
                  Just ipv_sm2TQ -> wild4_X49
                }
                })
               False
               Nothing
               t_alXpa
             })
            (Abs
               (fullRenderAnn
                  PageMode
                  $fEqDoc3
                  $fEqDoc2
                  $fEqDoc1
                  []
                  (case x_alXpb of { Arg ds1_d3o6D ds2_d3o6E ->
                   case ds2_d3o6E of { Named ds3_d3o6x ds4_d3o6y ->
                   case ds4_d3o6y of
                   { Name ds5_d6aXw ds6_d6aXx ds7_d6aXy ds8_d6aXz ds9_d6aXA
                          ds10_d6aXB ->
                   $fPrettyName_$cpretty ds6_d6aXx
                   }
                   }
                   }))
               (namedBindsToTel
                  xs_alXpc
                  (case t_alXpa of { El s_alXdH t1_alXdI ->
                   El
                     ($fApplyRewriteRule_$s$capplySubst
                        (eta_rmk6b `cast` <Co:10>) s_alXdH)
                     ($fApplyExtLamInfo_$sapplySubstTerm
                        (eta_rmk6b `cast` <Co:8>) t1_alXdI)
                   })))
      }
end Rec }

-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
namedBindsToTel1
  = \ x_X2fi -> namedBindsToTel ($fIsListNonEmpty1 x_X2fi)

-- RHS size: {terms: 100, types: 116, coercions: 1, joins: 1/4}
$wprojDropParsApply
  = \ ww_smebq
      ww1_smebr
      ww2_smebs
      ww3_smebu
      w_smebl
      w1_smebm
      w2_smebn ->
      case ww3_smebu `cast` <Co:1> of {
        [] ->
          case ww_smebq of {
            Nothing -> projDropParsApply2;
            Just ipv_a15zP -> Def ww1_smebr (map Apply w2_smebn)
          };
        : a1_ii8Zm as_ii8Zn ->
          case $winitLast1 a1_ii8Zm as_ii8Zn of
          { (# ww5_igWAi, ww6_igWAj #) ->
          case ww6_igWAj of { Arg i_alXoM y_alXoN ->
          case $wdropCommon ww5_igWAi w2_smebn of
          { (# ww8_im0jC, ww9_im0jD #) ->
          let {
            z_a1Rx
              = let { karg_smeSO = map Apply ww9_im0jD } in
                join {
                  $j_sm5TC
                    = $fApplyTerm_$sapplyTermE
                        absurd
                        (Lam
                           i_alXoM
                           (Abs
                              y_alXoN
                              (Def
                                 ww1_smebr
                                 (: (Apply
                                       (case ww2_smebs of { Arg a2_a3gXr a3_a3gXs ->
                                        Arg a2_a3gXr projDropParsApply1
                                        }))
                                    []))))
                        karg_smeSO } in
                case ww_smebq of {
                  Nothing -> jump $j_sm5TC;
                  Just ipv_a15zP ->
                    case w1_smebm of {
                      __DEFAULT ->
                        $fApplyTerm_$sapplyTermE
                          absurd
                          (Lam
                             i_alXoM (Abs y_alXoN (Var 0# (: (Proj w_smebl ww1_smebr) []))))
                          karg_smeSO;
                      Irrelevant -> jump $j_sm5TC
                    }
                } } in
          letrec {
            go1_a1Ry
              = \ ds_a1Rz ->
                  case ds_a1Rz of {
                    [] -> z_a1Rx;
                    : y1_a1RC ys_a1RD ->
                      case y1_a1RC of { Arg ai_alXoS x_alXoT ->
                      Lam ai_alXoS (NoAbs x_alXoT (go1_a1Ry ys_a1RD))
                      }
                  }; } in
          go1_a1Ry ww8_im0jC
          }
          }
          }
      }

-- RHS size: {terms: 15, types: 12, coercions: 0, joins: 0/0}
projDropParsApply
  = \ w_smebk w1_smebl w2_smebm w3_smebn ->
      case w_smebk of
      { Projection ww1_smebq ww2_smebr ww3_smebs ww4_smebt ww5_smebu ->
      $wprojDropParsApply
        ww1_smebq ww2_smebr ww3_smebs ww5_smebu w1_smebl w2_smebm w3_smebn
      }

-- RHS size: {terms: 154, types: 118, coercions: 0, joins: 0/1}
$wprojections_rmk6c
  = \ ww_smebD ww1_smebF w_smebz ->
      letrec {
        go1_a1Ry
          = \ ds_a1Rz ->
              case ds_a1Rz of {
                [] -> [];
                : y_a1RC ys_a1RD ->
                  case y_a1RC of { Arg ai_alXjs f4_alXjt ->
                  : (case ai_alXjs of wild3_X1oZ
                     { ArgInfo ds1_d3o6M ds2_d3o6N ds3_d3o6O ds4_d3o6P ds5_d3o6Q ->
                     case ds2_d3o6N of { Modality ds6_d3o7g ds7_d3o7h ds8_d3o7i ->
                     case ww_smebD of {
                       IsData ->
                         case canProject f4_alXjt w_smebz of {
                           Nothing ->
                             case ds6_d3o7g of {
                               __DEFAULT -> Def f4_alXjt (: (Apply (Arg wild3_X1oZ w_smebz)) []);
                               Irrelevant ->
                                 DontCare (Def f4_alXjt (: (Apply (Arg wild3_X1oZ w_smebz)) []))
                             };
                           Just v_alXn3 ->
                             case v_alXn3 of { Arg ai1_alXn7 v1_alXn8 ->
                             case ai1_alXn7 of
                             { ArgInfo ds9_X3ozQ ds10_X3ozS ds11_X3ozU ds12_X3ozW ds13_X3ozY ->
                             case ds10_X3ozS of { Modality ds14_X3oAt ds15_X3oAv ds16_X3oAx ->
                             case ds14_X3oAt of {
                               __DEFAULT ->
                                 case ds6_d3o7g of {
                                   __DEFAULT -> $fApplyTerm_$sapplyTermE absurd v1_alXn8 [];
                                   Irrelevant ->
                                     case $fApplyTerm_$sapplyTermE absurd v1_alXn8 []
                                     of wild12_XJK {
                                       __DEFAULT -> DontCare wild12_XJK;
                                       DontCare ds17_d8PPv -> wild12_XJK
                                     }
                                 };
                               Irrelevant ->
                                 case v1_alXn8 of wild11_XJK {
                                   __DEFAULT ->
                                     case ds6_d3o7g of {
                                       __DEFAULT ->
                                         $fApplyTerm_$sapplyTermE absurd (DontCare wild11_XJK) [];
                                       Irrelevant ->
                                         case $fApplyTerm_$sapplyTermE
                                                absurd (DontCare wild11_XJK) []
                                         of wild13_X1bw {
                                           __DEFAULT -> DontCare wild13_X1bw;
                                           DontCare ds17_d8PPv -> wild13_X1bw
                                         }
                                     };
                                   DontCare ds17_d8PPv ->
                                     case ds6_d3o7g of {
                                       __DEFAULT -> $fApplyTerm_$sapplyTermE absurd wild11_XJK [];
                                       Irrelevant ->
                                         case $fApplyTerm_$sapplyTermE absurd wild11_XJK []
                                         of wild13_X1by {
                                           __DEFAULT -> DontCare wild13_X1by;
                                           DontCare ds18_X8Qhl -> wild13_X1by
                                         }
                                     }
                                 }
                             }
                             }
                             }
                             }
                         };
                       IsRecord ds9_dm2m6 ->
                         case ds6_d3o7g of {
                           __DEFAULT ->
                             $fApplyTerm_$sapplyTermE
                               absurd w_smebz (: (Proj ProjSystem f4_alXjt) []);
                           Irrelevant ->
                             case $fApplyTerm_$sapplyTermE
                                    absurd w_smebz (: (Proj ProjSystem f4_alXjt) [])
                             of wild7_XJK {
                               __DEFAULT -> DontCare wild7_XJK;
                               DontCare ds10_d8PPv -> wild7_XJK
                             }
                         }
                     }
                     }
                     })
                    (go1_a1Ry ys_a1RD)
                  }
              }; } in
      go1_a1Ry ww1_smebF

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstNLPat
  = C:Subst
      ($fDeBruijnNLPat `cast` <Co:3>) $fApplyRewriteRule_$capplySubst

-- RHS size: {terms: 20, types: 9, coercions: 7, joins: 0/0}
$fSubstNLPSort_$capplySubst
  = \ rho_alXc7 ds_dm1Ep ->
      case ds_dm1Ep of wild1_XoS {
        PUniv u_alXc8 l_alXc9 ->
          PUniv
            u_alXc8
            ($fApplyRewriteRule_$capplySubst
               (rho_alXc7 `cast` <Co:7>) l_alXc9);
        PInf f4_alXca n_alXcb -> wild1_XoS;
        PSizeUniv -> PSizeUniv;
        PLockUniv -> PLockUniv;
        PLevelUniv -> PLevelUniv;
        PIntervalUniv -> PIntervalUniv
      }

-- RHS size: {terms: 12, types: 7, coercions: 14, joins: 0/0}
$fSubstNLPType_$capplySubst
  = \ rho_alXcc ds_dm1EN ->
      case ds_dm1EN of { NLPType s_alXcd a_alXce ->
      NLPType
        ($fSubstNLPSort_$capplySubst (rho_alXcc `cast` <Co:7>) s_alXcd)
        ($fApplyRewriteRule_$capplySubst (rho_alXcc `cast` <Co:7>) a_alXce)
      }

-- RHS size: {terms: 226, types: 188, coercions: 70, joins: 0/1}
$fApplyRewriteRule_$capplySubst
  = \ rho_alXcf ds_dm1EU ->
      case ds_dm1EU of {
        PVar dt_dm2Ih bvs_alXcw ->
          case $wlookupS
                 $fSubstNLPat @~ <Co:1> (rho_alXcf `cast` <Co:3>) (I# dt_dm2Ih)
          of {
            PVar dt1_dm2Ij xs_alXck -> PVar dt1_dm2Ij (++ xs_alXck bvs_alXcw);
            PDef f4_alXcm es_alXcn -> lvl247_rmk4S;
            PLam i_alXco u_alXcp -> lvl243_rmk4O;
            PPi a_alXcq b_alXcr -> lvl239_rmk4K;
            PSort s_alXcs -> lvl235_rmk4G;
            PBoundVar dt1_dm2Ik es_alXcu -> lvl231_rmk4C;
            PTerm u_alXcl ->
              PTerm
                ($fApplyTerm_$sapplyTermE
                   absurd u_alXcl (map Apply (map lvl277_rmk5r bvs_alXcw)))
          };
        PDef f4_alXcx es_alXcy ->
          PDef
            f4_alXcx
            (map
               (\ ds1_dm1Ar ->
                  case ds1_dm1Ar of wild2_XeU {
                    Apply v_alXay ->
                      Apply
                        (case rho_alXcf `cast` <Co:5> of wild3_XeQ {
                           __DEFAULT ->
                             case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                             Arg
                               (case a1_a3gXn of
                                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                })
                               ($fApplyRewriteRule_$capplySubst
                                  (wild3_XeQ `cast` <Co:4>) a2_a3gXo)
                             };
                           IdS -> v_alXay
                         });
                    Proj ds2_dm1AZ ds3_dm1B0 -> wild2_XeU;
                    IApply x_alXaz y_alXaA r_alXaB ->
                      IApply
                        ($fApplyRewriteRule_$capplySubst rho_alXcf x_alXaz)
                        ($fApplyRewriteRule_$capplySubst rho_alXcf y_alXaA)
                        ($fApplyRewriteRule_$capplySubst rho_alXcf r_alXaB)
                  })
               es_alXcy);
        PLam i_alXcz u_alXcA ->
          PLam
            i_alXcz
            (case u_alXcA of {
               Abs x_alXar a_alXas ->
                 Abs
                   x_alXar
                   ($fApplyRewriteRule_$capplySubst
                      (case rho_alXcf of wild3_Xj {
                         __DEFAULT -> Lift 1# wild3_Xj;
                         IdS -> IdS;
                         Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v 1#) rho1_add9T
                       })
                      a_alXas);
               NoAbs x_alXau a_alXav ->
                 NoAbs x_alXau ($fApplyRewriteRule_$capplySubst rho_alXcf a_alXav)
             });
        PPi a_alXcB b_alXcC ->
          PPi
            (case a_alXcB of
             { Dom ds1_dm0pz ds2_dm0pA ds3_dm0pB ds4_dm0pC ds5_dm0pD ->
             Dom
               ds1_dm0pz
               ds2_dm0pA
               ds3_dm0pB
               (case ds4_dm0pC of {
                  Nothing -> Nothing;
                  Just a1_anJk ->
                    Just
                      ($fApplyExtLamInfo_$sapplySubstTerm
                         ($fFunctorSubstitution'_$cfmap
                            $fApplyRewriteRule2 (rho_alXcf `cast` <Co:3>))
                         a1_anJk)
                })
               ($fSubstNLPType_$capplySubst (rho_alXcf `cast` <Co:7>) ds5_dm0pD)
             })
            (case b_alXcC of {
               Abs x_alXar a1_alXas ->
                 Abs
                   x_alXar
                   (case a1_alXas of { NLPType s_alXcd a2_alXce ->
                    let {
                      rho1_sm4GK
                        = case rho_alXcf `cast` <Co:7> of wild4_Xj {
                            __DEFAULT -> Lift 1# wild4_Xj;
                            IdS -> IdS;
                            Lift dt_dde2v rho2_add9T -> Lift (+# dt_dde2v 1#) rho2_add9T
                          } } in
                    NLPType
                      ($fSubstNLPSort_$capplySubst (rho1_sm4GK `cast` <Co:7>) s_alXcd)
                      ($fApplyRewriteRule_$capplySubst
                         (rho1_sm4GK `cast` <Co:7>) a2_alXce)
                    });
               NoAbs x_alXau a1_alXav ->
                 NoAbs
                   x_alXau
                   ($fSubstNLPType_$capplySubst (rho_alXcf `cast` <Co:7>) a1_alXav)
             });
        PSort s_alXcD ->
          PSort
            ($fSubstNLPSort_$capplySubst (rho_alXcf `cast` <Co:7>) s_alXcD);
        PBoundVar dt_dm2Ii es_alXcF ->
          PBoundVar
            dt_dm2Ii
            (map
               (\ ds1_dm1Ar ->
                  case ds1_dm1Ar of wild2_XeU {
                    Apply v_alXay ->
                      Apply
                        (case rho_alXcf `cast` <Co:5> of wild3_XeQ {
                           __DEFAULT ->
                             case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                             Arg
                               (case a1_a3gXn of
                                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                })
                               ($fApplyRewriteRule_$capplySubst
                                  (wild3_XeQ `cast` <Co:4>) a2_a3gXo)
                             };
                           IdS -> v_alXay
                         });
                    Proj ds2_dm1AZ ds3_dm1B0 -> wild2_XeU;
                    IApply x_alXaz y_alXaA r_alXaB ->
                      IApply
                        ($fApplyRewriteRule_$capplySubst rho_alXcf x_alXaz)
                        ($fApplyRewriteRule_$capplySubst rho_alXcf y_alXaA)
                        ($fApplyRewriteRule_$capplySubst rho_alXcf r_alXaB)
                  })
               es_alXcF);
        PTerm u_alXcG ->
          PTerm
            ($fApplyExtLamInfo_$sapplySubstTerm
               ($fFunctorSubstitution'_$cfmap
                  $fApplyRewriteRule2 (rho_alXcf `cast` <Co:3>))
               u_alXcG)
      }
end Rec }

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstNLPSort
  = C:Subst
      ($fDeBruijnNLPat `cast` <Co:3>) $fSubstNLPSort_$capplySubst

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstNLPType
  = C:Subst
      ($fDeBruijnNLPat `cast` <Co:3>) $fSubstNLPType_$capplySubst

Rec {
-- RHS size: {terms: 18, types: 13, coercions: 0, joins: 0/0}
$wunsafeDrop1_rmk6f
  = \ @ a1_smec8 ww_smecd w_smeca ->
      case w_smeca of {
        [] -> [];
        : ipv1_a19Y5 ipv2_a19Y6 ->
          case ww_smecd of ds3_a19Y8 {
            __DEFAULT -> $wunsafeDrop1_rmk6f (-# ds3_a19Y8 1#) ipv2_a19Y6;
            1# -> ipv2_a19Y6
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 18, types: 13, coercions: 0, joins: 0/0}
$wunsafeDrop2_rmk6g
  = \ @ a1_smebZ ww_smec4 w_smec1 ->
      case w_smec1 of {
        [] -> [];
        : ipv1_a19Y5 ipv2_a19Y6 ->
          case ww_smec4 of ds3_a19Y8 {
            __DEFAULT -> $wunsafeDrop2_rmk6g (-# ds3_a19Y8 1#) ipv2_a19Y6;
            1# -> ipv2_a19Y6
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
$fApplyCompiledClauses'_$capplyE
  = \ t_alXix es_alXiy ->
      $fApplyCompiledClauses'_$capply
        t_alXix
        (case allApplyElims es_alXiy of {
           Nothing -> $fApplyCompiledClauses'1;
           Just v_aaOy -> v_aaOy
         })

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyCompiledClauses'
  = C:Apply
      $fApplyCompiledClauses'_$capply $fApplyCompiledClauses'_$capplyE

-- RHS size: {terms: 150, types: 145, coercions: 0, joins: 0/3}
$fApplyCompiledClauses'_$capply
  = \ cc_alXin args_alXio ->
      case cc_alXin of {
        Case n_alXiu bs_alXiv ->
          case n_alXiu of { Arg ds1_d3o6D ds2_d3o6E ->
          case ds2_d3o6E of { I# x_a1SQ ->
          case $wlenAcc args_alXio 0# of ww2_axAc { __DEFAULT ->
          case >=# x_a1SQ ww2_axAc of {
            __DEFAULT -> lvl216_rmk4n;
            1# ->
              Case
                (Arg ds1_d3o6D (I# (-# x_a1SQ ww2_axAc)))
                (case bs_alXiv of
                 { Branches ww1_sme2X ww3_sme2Y ww4_sme2Z ww5_sme30 ww6_sme31
                            ww7_sme32 ww8_sme33 ->
                 case $w$capply
                        $fApplyCompiledClauses'
                        ww1_sme2X
                        ww3_sme2Y
                        ww4_sme2Z
                        ww5_sme30
                        ww6_sme31
                        ww7_sme32
                        ww8_sme33
                        args_alXio
                 of
                 { (# ww10_smeoq, ww11_smeor, ww12_smeos, ww13_smeot, ww14_smeou,
                      ww15_smeov, ww16_smeow #) ->
                 Branches
                   ww10_smeoq
                   ww11_smeor
                   ww12_smeos
                   ww13_smeot
                   ww14_smeou
                   ww15_smeov
                   ww16_smeow
                 }
                 })
          }
          }
          }
          };
        Done hs_alXir t_alXis ->
          case $wlenAcc hs_alXir 0# of ww2_axAc { __DEFAULT ->
          case $wlenAcc args_alXio 0# of ww1_Xy0y { __DEFAULT ->
          case >=# ww2_axAc ww1_Xy0y of {
            __DEFAULT -> lvl220_rmk4r;
            1# ->
              Done
                (case <=# ww1_Xy0y 0# of {
                   __DEFAULT -> $wunsafeDrop2_rmk6g ww1_Xy0y hs_alXir;
                   1# -> hs_alXir
                 })
                (let { y_a1Vk = -# (-# ww2_axAc ww1_Xy0y) 1# } in
                 let { n_a1Vi = map unArg args_alXio } in
                 case ># 0# y_a1Vk of {
                   __DEFAULT ->
                     letrec {
                       go_a1Vm
                         = \ x_a1Vn ->
                             : (case >=# x_a1Vn 0# of {
                                  __DEFAULT -> var1;
                                  1# -> Var x_a1Vn []
                                })
                               (case ==# x_a1Vn y_a1Vk of {
                                  __DEFAULT -> go_a1Vm (+# x_a1Vn 1#);
                                  1# -> n_a1Vi
                                }); } in
                     $fApplyExtLamInfo_$sapplySubstTerm
                       (parallelS $fDeBruijnTerm (go_a1Vm 0#)) t_alXis;
                   1# ->
                     $fApplyExtLamInfo_$sapplySubstTerm
                       (parallelS $fDeBruijnTerm n_a1Vi) t_alXis
                 })
          }
          }
          };
        Fail hs_alXiq ->
          Fail
            (case $wlenAcc args_alXio 0# of ww2_axAc { __DEFAULT ->
             case <=# ww2_axAc 0# of {
               __DEFAULT -> $wunsafeDrop1_rmk6f ww2_axAc hs_alXiq;
               1# -> hs_alXiq
             }
             })
      }
end Rec }

-- RHS size: {terms: 32, types: 53, coercions: 4, joins: 0/0}
applyNLSubstToDom
  = \ @ a_smeci w_smecj w1_smeck w2_smecl ->
      case w_smecj of { (ww1_smeco, ww2_smecp) ->
      case ww2_smecp of { Eq# ww4_smecs ->
      case w2_smecl of
      { Dom ww6_smecx ww7_smecy ww8_smecz ww9_smecA ww10_smecB ->
      Dom
        ww6_smecx
        ww7_smecy
        ww8_smecz
        (case ww9_smecA of {
           Nothing -> Nothing;
           Just a1_anJk ->
             Just
               ($fApplyExtLamInfo_$sapplySubstTerm
                  ($fFunctorSubstitution'_$cfmap $fApplyRewriteRule2 w1_smeck)
                  a1_anJk)
         })
        (applySubst ww1_smeco (w1_smeck `cast` <Co:4>) ww10_smecB)
      }
      }
      }

-- RHS size: {terms: 27, types: 18, coercions: 0, joins: 0/0}
$wcompiledClauseBody
  = \ ww_smecN ww1_smecO ->
      case ww1_smecO of {
        Nothing -> Nothing;
        Just a1_anJk ->
          Just
            (case dbPatPerm' True ww_smecN of {
               Nothing -> case compiledClauseBody1 of wild3_00 { };
               Just v_aaOy ->
                 case v_aaOy of { Perm ww3_smdSY ww4_smdT3 ->
                 case ww3_smdSY of { I# ww6_smdT1 ->
                 $fApplyExtLamInfo_$sapplySubstTerm
                   ($w$srenamingR ww6_smdT1 ww4_smdT3) a1_anJk
                 }
                 }
             })
      }

-- RHS size: {terms: 7, types: 21, coercions: 0, joins: 0/0}
compiledClauseBody
  = \ w_smecH ->
      case w_smecH of
      { Clause ww1_smecK ww2_smecL ww3_smecM ww4_smecN ww5_smecO
               ww6_smecP ww7_smecQ ww8_smecR ww9_smecS ww10_smecT ww11_smecU
               ww12_smecV ->
      $wcompiledClauseBody ww4_smecN ww5_smecO
      }

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
lvl320_rmk6h = Wk 1# IdS

Rec {
-- RHS size: {terms: 56, types: 113, coercions: 3, joins: 0/2}
$wlamView
  = \ w_smecY ->
      case w_smecY of wild1_Xqm {
        __DEFAULT -> (# [], wild1_Xqm #);
        Lam h_alXpr ds_dm0gD ->
          case ds_dm0gD of {
            Abs x_alXps b_alXpt ->
              let {
                ds1_sm4GG
                  = case $wlamView b_alXpt of { (# ww1_smep2, ww2_smep3 #) ->
                    (ww1_smep2, ww2_smep3)
                    } } in
              (# : (Arg h_alXpr x_alXps)
                   (case ds1_sm4GG of { (x1_a6yTN, y_a6yTO) -> x1_a6yTN }),
                 case ds1_sm4GG of { (x1_a6yTR, y_a6yTS) -> y_a6yTS } #);
            NoAbs x_alXpv b_alXpw ->
              let {
                ds1_sm4GI
                  = case $wlamView
                           ($fApplyExtLamInfo_$sapplySubstTerm
                              (lvl320_rmk6h `cast` <Co:3>) b_alXpw)
                    of
                    { (# ww1_smep2, ww2_smep3 #) ->
                    (ww1_smep2, ww2_smep3)
                    } } in
              (# : (Arg h_alXpr x_alXpv)
                   (case ds1_sm4GI of { (x1_a6yTN, y_a6yTO) -> x1_a6yTN }),
                 case ds1_sm4GI of { (x1_a6yTR, y_a6yTS) -> y_a6yTS } #)
          }
      }
end Rec }

-- RHS size: {terms: 8, types: 16, coercions: 0, joins: 0/0}
lamView
  = \ w_smecY ->
      case $wlamView w_smecY of { (# ww1_smep2, ww2_smep3 #) ->
      (ww1_smep2, ww2_smep3)
      }

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
wild_rmk6i = Wk 1# IdS

Rec {
-- RHS size: {terms: 59, types: 76, coercions: 32, joins: 0/0}
bindsToTel'
  = \ @ a_alY6d f4_alXp3 ds_dm0i8 t_alXp4 ->
      case ds_dm0i8 of {
        [] -> [];
        : x_alXp6 xs_alXp7 ->
          : (case t_alXp4 of
             { Dom a1_a8M7x a2_a8M7y a3_a8M7z a4_a8M7A a5_a8M7B ->
             Dom
               a1_a8M7x a2_a8M7y a3_a8M7z a4_a8M7A (f4_alXp3 x_alXp6, a5_a8M7B)
             })
            (bindsToTel'
               f4_alXp3
               xs_alXp7
               (case t_alXp4 of
                { Dom ds1_dm1xB ds2_dm1xC ds3_dm1xD ds4_dm1xE ds5_dm1xF ->
                Dom
                  (case ds1_dm1xB of
                   { ArgInfo ds6_d3o7S ds7_d3o7T ds8_d3o7U ds9_d3o7V ds10_d3o7W ->
                   ArgInfo ds6_d3o7S ds7_d3o7T ds8_d3o7U UnknownFVs ds10_d3o7W
                   })
                  ds2_dm1xC
                  ds3_dm1xD
                  (case ds4_dm1xE of {
                     Nothing -> Nothing;
                     Just a1_anJk ->
                       Just
                         ($fApplyExtLamInfo_$sapplySubstTerm
                            (wild_rmk6i `cast` <Co:10>) a1_anJk)
                   })
                  (case ds5_dm1xF of { El s_alXdH t1_alXdI ->
                   El
                     ($fApplyRewriteRule_$s$capplySubst
                        (wild_rmk6i `cast` <Co:12>) s_alXdH)
                     ($fApplyExtLamInfo_$sapplySubstTerm
                        (wild_rmk6i `cast` <Co:10>) t1_alXdI)
                   })
                }))
      }
end Rec }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
bindsToTel = bindsToTel' nameToArgName

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
bindsToTel1
  = \ x_X2fs -> bindsToTel' nameToArgName ($fIsListNonEmpty1 x_X2fs)

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
bindsToTel'1
  = \ @ a_alY6A f4_alXp9 x_X2fv ->
      bindsToTel' f4_alXp9 ($fIsListNonEmpty1 x_X2fv)

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl321_rmk6j
  = $fFunctorSubstitution'_$cfmap $fApplyRewriteRule2 IdS

-- RHS size: {terms: 164, types: 124, coercions: 123, joins: 0/3}
$w$capplySubst4
  = \ w_smed7
      ww_smedb
      ww1_smedc
      ww2_smedd
      ww3_smede
      ww4_smedf
      ww5_smedg
      ww6_smedh ->
      let {
        n_sm4FY
          = case $w$csize ww1_smedc of ww7_s92fc { __DEFAULT ->
            I# ww7_s92fc
            } } in
      (# ww_smedb,
         $fOrdTele_$capplySubst
           $dSubst_rmk6a
           (($fFunctorSubstitution'_$cfmap
               $fApplyRewriteRule2 (w_smed7 `cast` <Co:3>))
            `cast` <Co:19>)
           ww1_smedc,
         ww2_smedd,
         map
           (let {
              rho_sm4G0
                = case n_sm4FY of { I# ds1_dddG3 ->
                  case ds1_dddG3 of ds2_XddGl {
                    __DEFAULT ->
                      case w_smed7 `cast` <Co:3> of wild2_Xj {
                        __DEFAULT -> Lift ds2_XddGl wild2_Xj;
                        IdS -> IdS;
                        Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v ds2_XddGl) rho1_add9T
                      };
                    0# -> w_smed7 `cast` <Co:3>
                  }
                  } } in
            \ ds_dm1Ar ->
              case ds_dm1Ar of wild1_XeU {
                Apply v_alXay ->
                  Apply
                    (case rho_sm4G0 `cast` <Co:9> of wild2_XeQ {
                       __DEFAULT ->
                         case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                         Arg
                           (case a1_a3gXn of
                            { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                            ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                            })
                           ($fApplyRewriteRule_$capplySubst
                              (wild2_XeQ `cast` <Co:4>) a2_a3gXo)
                         };
                       IdS -> v_alXay
                     });
                Proj ds1_dm1AZ ds2_dm1B0 -> wild1_XeU;
                IApply x_alXaz y_alXaA r_alXaB ->
                  IApply
                    ($fApplyRewriteRule_$capplySubst (rho_sm4G0 `cast` <Co:4>) x_alXaz)
                    ($fApplyRewriteRule_$capplySubst (rho_sm4G0 `cast` <Co:4>) y_alXaA)
                    ($fApplyRewriteRule_$capplySubst (rho_sm4G0 `cast` <Co:4>) r_alXaB)
              })
           ww3_smede,
         case n_sm4FY of { I# ds1_dddG3 ->
         case ds1_dddG3 of ds2_XddGl {
           __DEFAULT ->
             case w_smed7 `cast` <Co:3> of wild2_Xj {
               __DEFAULT ->
                 $fApplyExtLamInfo_$sapplySubstTerm
                   ($fFunctorSubstitution'_$cfmap
                      $fApplyRewriteRule2 (Lift ds2_XddGl wild2_Xj))
                   ww4_smedf;
               IdS -> $fApplyExtLamInfo_$sapplySubstTerm lvl321_rmk6j ww4_smedf;
               Lift dt_dde2v rho1_add9T ->
                 $fApplyExtLamInfo_$sapplySubstTerm
                   ($fFunctorSubstitution'_$cfmap
                      $fApplyRewriteRule2 (Lift (+# dt_dde2v ds2_XddGl) rho1_add9T))
                   ww4_smedf
             };
           0# ->
             $fApplyExtLamInfo_$sapplySubstTerm
               ($fFunctorSubstitution'_$cfmap
                  $fApplyRewriteRule2 (w_smed7 `cast` <Co:3>))
               ww4_smedf
         }
         },
         case ww5_smedg of { El s_alXdH t_alXdI ->
         let {
           eta1_B2
             = case n_sm4FY of { I# ds1_dddG3 ->
               case ds1_dddG3 of ds2_XddGl {
                 __DEFAULT ->
                   case w_smed7 `cast` <Co:3> of wild3_Xj {
                     __DEFAULT ->
                       ($fFunctorSubstitution'_$cfmap
                          $fApplyRewriteRule2 (Lift ds2_XddGl wild3_Xj))
                       `cast` <Co:10>;
                     IdS -> lvl321_rmk6j `cast` <Co:10>;
                     Lift dt_dde2v rho1_add9T ->
                       ($fFunctorSubstitution'_$cfmap
                          $fApplyRewriteRule2 (Lift (+# dt_dde2v ds2_XddGl) rho1_add9T))
                       `cast` <Co:10>
                   };
                 0# ->
                   ($fFunctorSubstitution'_$cfmap
                      $fApplyRewriteRule2 (w_smed7 `cast` <Co:3>))
                   `cast` <Co:10>
               }
               } } in
         El
           ($fApplyRewriteRule_$s$capplySubst
              (eta1_B2 `cast` <Co:10>) s_alXdH)
           ($fApplyExtLamInfo_$sapplySubstTerm
              (eta1_B2 `cast` <Co:8>) t_alXdI)
         },
         ww6_smedh #)

-- RHS size: {terms: 24, types: 34, coercions: 0, joins: 0/0}
$fSubstRewriteRule_$capplySubst
  = \ w_smed7 w1_smed8 ->
      case w1_smed8 of
      { RewriteRule ww1_smedb ww2_smedc ww3_smedd ww4_smede ww5_smedf
                    ww6_smedg ww7_smedh ->
      case $w$capplySubst4
             w_smed7
             ww1_smedb
             ww2_smedc
             ww3_smedd
             ww4_smede
             ww5_smedf
             ww6_smedg
             ww7_smedh
      of
      { (# ww9_smep5, ww10_smep6, ww11_smep7, ww12_smep8, ww13_smep9,
           ww14_smepa, ww15_smepb #) ->
      RewriteRule
        ww9_smep5
        ww10_smep6
        ww11_smep7
        ww12_smep8
        ww13_smep9
        ww14_smepa
        ww15_smepb
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstRewriteRule
  = C:Subst
      ($fDeBruijnNLPat `cast` <Co:3>) $fSubstRewriteRule_$capplySubst

-- RHS size: {terms: 121, types: 141, coercions: 34, joins: 0/4}
$w$capply3
  = \ w_smedn w1_smedo ->
      let {
        newContext_sm4FU
          = case w_smedn of
            { RewriteRule ds1_im2DW ds2_im2DX ds3_im2DY ds4_im2DZ ds5_im2E0
                          ds6_im2E1 ds7_im2E2 ->
            $fApplyExtLamInfo_$s$capply ds2_im2DX w1_smedo
            } } in
      let {
        sub_sm4FT
          = let {
              rho_sm4FW
                = parallelS
                    $fDeBruijnNLPat
                    (reverse1 (map $fApplyRewriteRule9 w1_smedo) []) } in
            case $w$csize newContext_sm4FU of ww_s92fc {
              __DEFAULT ->
                case rho_sm4FW of wild1_Xj {
                  __DEFAULT -> Lift ww_s92fc wild1_Xj;
                  IdS -> IdS;
                  Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v ww_s92fc) rho1_add9T
                };
              0# -> rho_sm4FW
            } } in
      (# case w_smedn of
         { RewriteRule ds1_im2CY ds2_im2CZ ds3_im2D0 ds4_im2D1 ds5_im2D2
                       ds6_im2D3 ds7_im2D4 ->
         ds1_im2CY
         },
         newContext_sm4FU,
         case w_smedn of
         { RewriteRule ds1_im2D8 ds2_im2D9 ds3_im2Da ds4_im2Db ds5_im2Dc
                       ds6_im2Dd ds7_im2De ->
         ds3_im2Da
         },
         case w_smedn of
         { RewriteRule ds1_im2Di ds2_im2Dj ds3_im2Dk ds4_im2Dl ds5_im2Dm
                       ds6_im2Dn ds7_im2Do ->
         map
           (\ ds_dm1Ar ->
              case ds_dm1Ar of wild2_XeU {
                Apply v_alXay ->
                  Apply
                    (case sub_sm4FT `cast` <Co:9> of wild3_XeQ {
                       __DEFAULT ->
                         case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                         Arg
                           (case a1_a3gXn of
                            { ArgInfo ds11_d3pmW ds12_d3pmX ds13_d3pmY ds14_d3pmZ ds15_d3pn0 ->
                            ArgInfo ds11_d3pmW ds12_d3pmX ds13_d3pmY UnknownFVs ds15_d3pn0
                            })
                           ($fApplyRewriteRule_$capplySubst
                              (wild3_XeQ `cast` <Co:4>) a2_a3gXo)
                         };
                       IdS -> v_alXay
                     });
                Proj ds11_dm1AZ ds12_dm1B0 -> wild2_XeU;
                IApply x_alXaz y_alXaA r_alXaB ->
                  IApply
                    ($fApplyRewriteRule_$capplySubst (sub_sm4FT `cast` <Co:4>) x_alXaz)
                    ($fApplyRewriteRule_$capplySubst (sub_sm4FT `cast` <Co:4>) y_alXaA)
                    ($fApplyRewriteRule_$capplySubst (sub_sm4FT `cast` <Co:4>) r_alXaB)
              })
           ds4_im2Dl
         },
         case w_smedn of
         { RewriteRule ds1_im2Ds ds2_im2Dt ds3_im2Du ds4_im2Dv ds5_im2Dw
                       ds6_im2Dx ds7_im2Dy ->
         $fApplyExtLamInfo_$sapplySubstTerm
           ($fFunctorSubstitution'_$cfmap $fApplyRewriteRule2 sub_sm4FT)
           ds5_im2Dw
         },
         case w_smedn of
         { RewriteRule ds1_im2DC ds2_im2DD ds3_im2DE ds4_im2DF ds5_im2DG
                       ds6_im2DH ds7_im2DI ->
         case ds6_im2DH of { El s_alXdH t_alXdI ->
         let {
           eta1_sm6qZ
             = $fFunctorSubstitution'_$cfmap $fApplyRewriteRule2 sub_sm4FT } in
         El
           ($fApplyRewriteRule_$s$capplySubst
              (eta1_sm6qZ `cast` <Co:9>) s_alXdH)
           ($fApplyExtLamInfo_$sapplySubstTerm eta1_sm6qZ t_alXdI)
         }
         },
         case w_smedn of
         { RewriteRule ds1_im2DM ds2_im2DN ds3_im2DO ds4_im2DP ds5_im2DQ
                       ds6_im2DR ds7_im2DS ->
         ds7_im2DS
         } #)

-- RHS size: {terms: 15, types: 24, coercions: 0, joins: 0/0}
$fApplyRewriteRule_$capply
  = \ w_smedn w1_smedo ->
      case $w$capply3 w_smedn w1_smedo of
      { (# ww1_smepd, ww2_smepe, ww3_smepf, ww4_smepg, ww5_smeph,
           ww6_smepi, ww7_smepj #) ->
      RewriteRule
        ww1_smepd
        ww2_smepe
        ww3_smepf
        ww4_smepg
        ww5_smeph
        ww6_smepi
        ww7_smepj
      }

-- RHS size: {terms: 21, types: 32, coercions: 0, joins: 0/0}
$fApplyRewriteRule_$capplyE
  = \ t_alXkU es_alXkV ->
      case $w$capply3
             t_alXkU
             (case allApplyElims es_alXkV of {
                Nothing -> $fApplyRewriteRule1;
                Just v_aaOy -> v_aaOy
              })
      of
      { (# ww1_smepd, ww2_smepe, ww3_smepf, ww4_smepg, ww5_smeph,
           ww6_smepi, ww7_smepj #) ->
      RewriteRule
        ww1_smepd
        ww2_smepe
        ww3_smepf
        ww4_smepg
        ww5_smeph
        ww6_smepi
        ww7_smepj
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyRewriteRule
  = C:Apply $fApplyRewriteRule_$capply $fApplyRewriteRule_$capplyE

Rec {
-- RHS size: {terms: 218, types: 173, coercions: 108, joins: 0/0}
$fSubstDisplayForm_$capplySubst1
  = \ rho_alXbA ds_dm1Dv ->
      case ds_dm1Dv of {
        DWithApp v_alXbO vs_alXbP es_alXbQ ->
          DWithApp
            ($fSubstDisplayForm_$capplySubst1 rho_alXbA v_alXbO)
            (map ($fSubstDisplayForm_$capplySubst1 rho_alXbA) vs_alXbP)
            (map
               (\ ds1_dm1Ar ->
                  case ds1_dm1Ar of wild2_XeU {
                    Apply v1_alXay ->
                      Apply
                        (case rho_alXbA `cast` <Co:12> of wild3_XeQ {
                           __DEFAULT ->
                             case v1_alXay of { Arg a1_a3gXn a2_a3gXo ->
                             Arg
                               (case a1_a3gXn of
                                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                })
                               ($fApplyExtLamInfo_$sapplySubstTerm
                                  (wild3_XeQ `cast` <Co:7>) a2_a3gXo)
                             };
                           IdS -> v1_alXay
                         });
                    Proj ds2_dm1AZ ds3_dm1B0 -> wild2_XeU;
                    IApply x_alXaz y_alXaA r_alXaB ->
                      IApply
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXbA `cast` <Co:3>) x_alXaz)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXbA `cast` <Co:3>) y_alXaA)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXbA `cast` <Co:3>) r_alXaB)
                  })
               es_alXbQ);
        DCon c_alXbH ci_alXbI vs_alXbJ ->
          DCon
            c_alXbH
            ci_alXbI
            (map
               (\ arg_alXam ->
                  case rho_alXbA `cast` <Co:5> of wild2_XeQ {
                    __DEFAULT ->
                      case arg_alXam of { Arg a1_a3gXn a2_a3gXo ->
                      Arg
                        (case a1_a3gXn of
                         { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                         ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                         })
                        ($fSubstDisplayForm_$capplySubst1
                           (wild2_XeQ `cast` <Co:4>) a2_a3gXo)
                      };
                    IdS -> arg_alXam
                  })
               vs_alXbJ);
        DDef c_alXbL es_alXbM ->
          DDef
            c_alXbL
            (map
               (\ ds1_dm1Ar ->
                  case ds1_dm1Ar of wild2_XeU {
                    Apply v_alXay ->
                      Apply
                        (case rho_alXbA `cast` <Co:5> of wild3_XeQ {
                           __DEFAULT ->
                             case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                             Arg
                               (case a1_a3gXn of
                                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                })
                               ($fSubstDisplayForm_$capplySubst1
                                  (wild3_XeQ `cast` <Co:4>) a2_a3gXo)
                             };
                           IdS -> v_alXay
                         });
                    Proj ds2_dm1AZ ds3_dm1B0 -> wild2_XeU;
                    IApply x_alXaz y_alXaA r_alXaB ->
                      IApply
                        ($fSubstDisplayForm_$capplySubst1 rho_alXbA x_alXaz)
                        ($fSubstDisplayForm_$capplySubst1 rho_alXbA y_alXaA)
                        ($fSubstDisplayForm_$capplySubst1 rho_alXbA r_alXaB)
                  })
               es_alXbM);
        DDot' v_alXbE es_alXbF ->
          DDot'
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXbA `cast` <Co:3>) v_alXbE)
            (map
               (\ ds1_dm1Ar ->
                  case ds1_dm1Ar of wild2_XeU {
                    Apply v1_alXay ->
                      Apply
                        (case rho_alXbA `cast` <Co:12> of wild3_XeQ {
                           __DEFAULT ->
                             case v1_alXay of { Arg a1_a3gXn a2_a3gXo ->
                             Arg
                               (case a1_a3gXn of
                                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                })
                               ($fApplyExtLamInfo_$sapplySubstTerm
                                  (wild3_XeQ `cast` <Co:7>) a2_a3gXo)
                             };
                           IdS -> v1_alXay
                         });
                    Proj ds2_dm1AZ ds3_dm1B0 -> wild2_XeU;
                    IApply x_alXaz y_alXaA r_alXaB ->
                      IApply
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXbA `cast` <Co:3>) x_alXaz)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXbA `cast` <Co:3>) y_alXaA)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXbA `cast` <Co:3>) r_alXaB)
                  })
               es_alXbF);
        DTerm' v_alXbB es_alXbC ->
          DTerm'
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXbA `cast` <Co:3>) v_alXbB)
            (map
               (\ ds1_dm1Ar ->
                  case ds1_dm1Ar of wild2_XeU {
                    Apply v1_alXay ->
                      Apply
                        (case rho_alXbA `cast` <Co:12> of wild3_XeQ {
                           __DEFAULT ->
                             case v1_alXay of { Arg a1_a3gXn a2_a3gXo ->
                             Arg
                               (case a1_a3gXn of
                                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                })
                               ($fApplyExtLamInfo_$sapplySubstTerm
                                  (wild3_XeQ `cast` <Co:7>) a2_a3gXo)
                             };
                           IdS -> v1_alXay
                         });
                    Proj ds2_dm1AZ ds3_dm1B0 -> wild2_XeU;
                    IApply x_alXaz y_alXaA r_alXaB ->
                      IApply
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXbA `cast` <Co:3>) x_alXaz)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXbA `cast` <Co:3>) y_alXaA)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXbA `cast` <Co:3>) r_alXaB)
                  })
               es_alXbC)
      }
end Rec }

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstDisplayTerm
  = C:Subst
      ($fDeBruijnTerm `cast` <Co:3>) $fSubstDisplayForm_$capplySubst1

-- RHS size: {terms: 75, types: 58, coercions: 29, joins: 0/1}
$w$capplySubst
  = \ w_smedv ww_smedz ww1_smedA ww2_smedB ->
      (# ww_smedz,
         map
           (let {
              rho_sm4Fu
                = case ww_smedz of { I# ds1_dddG3 ->
                  case ds1_dddG3 of ds2_XddGl {
                    __DEFAULT ->
                      case w_smedv `cast` <Co:3> of wild2_Xj {
                        __DEFAULT -> Lift ds2_XddGl wild2_Xj;
                        IdS -> IdS;
                        Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v ds2_XddGl) rho1_add9T
                      };
                    0# -> w_smedv `cast` <Co:3>
                  }
                  } } in
            \ ds_dm1Ar ->
              case ds_dm1Ar of wild1_XeU {
                Apply v_alXay ->
                  Apply
                    (case rho_sm4Fu `cast` <Co:9> of wild2_XeQ {
                       __DEFAULT ->
                         case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                         Arg
                           (case a1_a3gXn of
                            { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                            ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                            })
                           ($fApplyExtLamInfo_$sapplySubstTerm
                              (wild2_XeQ `cast` <Co:7>) a2_a3gXo)
                         };
                       IdS -> v_alXay
                     });
                Proj ds1_dm1AZ ds2_dm1B0 -> wild1_XeU;
                IApply x_alXaz y_alXaA r_alXaB ->
                  IApply
                    ($fApplyExtLamInfo_$sapplySubstTerm rho_sm4Fu x_alXaz)
                    ($fApplyExtLamInfo_$sapplySubstTerm rho_sm4Fu y_alXaA)
                    ($fApplyExtLamInfo_$sapplySubstTerm rho_sm4Fu r_alXaB)
              })
           ww1_smedA,
         $fSubstDisplayForm_$capplySubst1
           ((liftS ww_smedz (w_smedv `cast` <Co:3>)) `cast` <Co:4>)
           ww2_smedB #)

-- RHS size: {terms: 16, types: 18, coercions: 0, joins: 0/0}
$fSubstDisplayForm_$capplySubst
  = \ w_smedv w1_smedw ->
      case w1_smedw of { Display ww1_smedz ww2_smedA ww3_smedB ->
      case $w$capplySubst w_smedv ww1_smedz ww2_smedA ww3_smedB of
      { (# ww5_smepl, ww6_smepm, ww7_smepn #) ->
      Display ww5_smepl ww6_smepm ww7_smepn
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstDisplayForm
  = C:Subst
      ($fDeBruijnTerm `cast` <Co:3>) $fSubstDisplayForm_$capplySubst

-- RHS size: {terms: 83, types: 114, coercions: 0, joins: 0/3}
$w$capply1
  = \ ww_smedL ww1_smedM w_smedI ->
      case $wlenAcc w_smedI 0# of ww2_axAc { __DEFAULT ->
      case $w$csize ww_smedL of ww3_s92fc { __DEFAULT ->
      case ># ww2_axAc ww3_s92fc of {
        __DEFAULT ->
          (# $fApplyExtLamInfo_$s$capply ww_smedL w_smedI,
             let {
               rho_sm4Fq
                 = parallelS $fDeBruijnTerm (reverse1 (map unArg w_smedI) []) } in
             let {
               f4_sm4Fp
                 = case -# ww3_s92fc ww2_axAc of ds2_XddGl {
                     __DEFAULT ->
                       case rho_sm4Fq of wild1_Xj {
                         __DEFAULT -> Lift ds2_XddGl wild1_Xj;
                         IdS -> IdS;
                         Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v ds2_XddGl) rho1_add9T
                       };
                     0# -> rho_sm4Fq
                   } } in
             map
               (let {
                  f5_sm4Fo
                    = \ ds_a184M ->
                        (case ds_a184M of { (a1_a184O, b1_a184P) ->
                         $fApplyExtLamInfo_$sapplySubstTerm f4_sm4Fp a1_a184O
                         },
                         case ds_a184M of { (a1_a184S, b1_a184T) -> b1_a184T }) } in
                \ ds_a184M ->
                  (case ds_a184M of { (a1_a184O, b1_a184P) ->
                   map f5_sm4Fo a1_a184O
                   },
                   case ds_a184M of { (a1_a184S, b1_a184T) ->
                   $fApplyExtLamInfo_$sapplySubstTerm f4_sm4Fp b1_a184T
                   }))
               ww1_smedM #);
        1# -> case $fApplyExtLamInfo1 of wild1_00 { }
      }
      }
      }

-- RHS size: {terms: 14, types: 21, coercions: 0, joins: 0/0}
$fApplySystem_$capply
  = \ w_smedH w1_smedI ->
      case w_smedH of { System ww1_smedL ww2_smedM ->
      case $w$capply1 ww1_smedL ww2_smedM w1_smedI of
      { (# ww4_smepp, ww5_smepq #) ->
      System ww4_smepp ww5_smepq
      }
      }

-- RHS size: {terms: 21, types: 32, coercions: 0, joins: 0/0}
$fApplySystem_$capplyE
  = \ t_alXif es_alXig ->
      case t_alXif of { System ww1_smedL ww2_smedM ->
      case allApplyElims es_alXig of {
        Nothing -> case $fApplySystem1 of wild2_00 { };
        Just v_aaOy ->
          case $w$capply1 ww1_smedL ww2_smedM v_aaOy of
          { (# ww4_smepp, ww5_smepq #) ->
          System ww4_smepp ww5_smepq
          }
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplySystem
  = C:Apply $fApplySystem_$capply $fApplySystem_$capplyE

-- RHS size: {terms: 29, types: 31, coercions: 0, joins: 0/0}
$fApplyExtLamInfo_$capply
  = \ w_smedS w1_smedT ->
      case w_smedS of { ExtLamInfo ww1_smedW ww2_smedX ww3_smedY ->
      case ww3_smedY of {
        Nothing -> ExtLamInfo ww1_smedW ww2_smedX Nothing;
        Just x_aRy5 ->
          case x_aRy5 of { System ww5_smhGi ww6_smhGj ->
          case $w$capply1 ww5_smhGi ww6_smhGj w1_smedT of
          { (# ww8_smepp, ww9_smepq #) ->
          ExtLamInfo ww1_smedW ww2_smedX (Just (System ww8_smepp ww9_smepq))
          }
          }
      }
      }

-- RHS size: {terms: 36, types: 42, coercions: 0, joins: 0/0}
$fApplyExtLamInfo_$capplyE
  = \ w_smee4 w1_smee5 ->
      case w_smee4 of { ExtLamInfo ww1_smee8 ww2_smee9 ww3_smeea ->
      case ww3_smeea of {
        Nothing -> ExtLamInfo ww1_smee8 ww2_smee9 Nothing;
        Just x_aRy5 ->
          case x_aRy5 of { System ww5_smhGm ww6_smhGn ->
          case allApplyElims w1_smee5 of {
            Nothing -> case $fApplyExtLamInfo2 of wild3_00 { };
            Just v_aaOy ->
              case $w$capply1 ww5_smhGm ww6_smhGn v_aaOy of
              { (# ww8_smepp, ww9_smepq #) ->
              ExtLamInfo ww1_smee8 ww2_smee9 (Just (System ww8_smepp ww9_smepq))
              }
          }
          }
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyExtLamInfo
  = C:Apply $fApplyExtLamInfo_$capply $fApplyExtLamInfo_$capplyE

-- RHS size: {terms: 3, types: 8, coercions: 0, joins: 0/0}
lvl322_rmk6k = Wk 1# IdS

Rec {
-- RHS size: {terms: 50, types: 55, coercions: 84, joins: 0/0}
$wsubTel_rmk6l
  = \ ww_smeel w_smeeh w1_smeei ->
      case w1_smeei of {
        EmptyTel -> lvl76_rmk1E;
        ExtendTel ipv_sm3jv ipv1_sm3jw ->
          case ww_smeel of wild2_Xsh {
            __DEFAULT ->
              ExtendTel
                ipv_sm3jv
                (case ipv1_sm3jw of {
                   Abs a1_a8M6g a2_a8M6h ->
                     Abs
                       a1_a8M6g
                       ($wsubTel_rmk6l
                          (-# wild2_Xsh 1#)
                          (($fApplyExtLamInfo_$sapplySubstTerm
                              (lvl322_rmk6k `cast` <Co:12>) (w_smeeh `cast` <Co:9>))
                           `cast` <Co:11>)
                          a2_a8M6h);
                   NoAbs a1_a8M6k a2_a8M6l ->
                     NoAbs
                       a1_a8M6k
                       ($wsubTel_rmk6l
                          (-# wild2_Xsh 1#)
                          (($fApplyExtLamInfo_$sapplySubstTerm
                              (lvl322_rmk6k `cast` <Co:12>) (w_smeeh `cast` <Co:9>))
                           `cast` <Co:11>)
                          a2_a8M6l)
                 });
            0# ->
              case ipv1_sm3jw of {
                Abs ds1_dddLE v_addbx ->
                  $fOrdTele_$capplySubst
                    $dSubst_rmk6a
                    ($wsingletonS
                       ($fDeBruijnTerm `cast` <Co:15>) 0# (w_smeeh `cast` <Co:5>))
                    v_addbx;
                NoAbs ds1_dddLF v_addbz -> v_addbz
              }
          }
      }
end Rec }

-- RHS size: {terms: 22, types: 12, coercions: 0, joins: 0/0}
$w$c<
  = \ ww_smees ww1_smeet ww2_smeex ww3_smeey ->
      case compareInteger ww_smees ww2_smeex of {
        LT -> True;
        EQ ->
          case $fOrd[]_$ccompare $fOrdPlusLevel' ww1_smeet ww3_smeey of {
            __DEFAULT -> False;
            LT -> True
          };
        GT -> False
      }

-- RHS size: {terms: 13, types: 12, coercions: 0, joins: 0/0}
$fOrdLevel'_$c<
  = \ w_smeeo w1_smeep ->
      case w_smeeo of { Max ww1_smees ww2_smeet ->
      case w1_smeep of { Max ww4_smeex ww5_smeey ->
      $w$c< ww1_smees ww2_smeet ww4_smeex ww5_smeey
      }
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$fOrdLevel'_$c>
  = \ a_alXHT b_alXHU -> $fOrdLevel'_$c< b_alXHU a_alXHT

-- RHS size: {terms: 22, types: 12, coercions: 0, joins: 0/0}
$w$c<=
  = \ ww_smeeF ww1_smeeG ww2_smeeK ww3_smeeL ->
      case compareInteger ww2_smeeK ww_smeeF of {
        LT -> False;
        EQ ->
          case $fOrd[]_$ccompare $fOrdPlusLevel' ww3_smeeL ww1_smeeG of {
            __DEFAULT -> True;
            LT -> False
          };
        GT -> True
      }

-- RHS size: {terms: 13, types: 12, coercions: 0, joins: 0/0}
$fOrdLevel'_$c<=
  = \ w_smeeB w1_smeeC ->
      case w_smeeB of { Max ww1_smeeF ww2_smeeG ->
      case w1_smeeC of { Max ww4_smeeK ww5_smeeL ->
      $w$c<= ww1_smeeF ww2_smeeG ww4_smeeK ww5_smeeL
      }
      }

-- RHS size: {terms: 26, types: 16, coercions: 0, joins: 0/0}
$fOrdLevel'_$cmin
  = \ w_smeeO w1_smeeP ->
      case w_smeeO of ww_smeeR { Max ww1_smeeS ww2_smeeT ->
      case w1_smeeP of ww3_smeeW { Max ww4_smeeX ww5_smeeY ->
      case compareInteger ww4_smeeX ww1_smeeS of {
        LT -> ww3_smeeW;
        EQ ->
          case $fOrd[]_$ccompare $fOrdPlusLevel' ww5_smeeY ww2_smeeT of {
            __DEFAULT -> ww_smeeR;
            LT -> ww3_smeeW
          };
        GT -> ww_smeeR
      }
      }
      }

-- RHS size: {terms: 26, types: 16, coercions: 0, joins: 0/0}
$fOrdLevel'_$cmax
  = \ w_smef4 w1_smef5 ->
      case w_smef4 of ww_smef7 { Max ww1_smef8 ww2_smef9 ->
      case w1_smef5 of ww3_smefc { Max ww4_smefd ww5_smefe ->
      case compareInteger ww4_smefd ww1_smef8 of {
        LT -> ww_smef7;
        EQ ->
          case $fOrd[]_$ccompare $fOrdPlusLevel' ww5_smefe ww2_smef9 of {
            __DEFAULT -> ww3_smefc;
            LT -> ww_smef7
          };
        GT -> ww3_smefc
      }
      }
      }

-- RHS size: {terms: 22, types: 12, coercions: 0, joins: 0/0}
$w$c>=
  = \ ww_smefo ww1_smefp ww2_smeft ww3_smefu ->
      case compareInteger ww_smefo ww2_smeft of {
        LT -> False;
        EQ ->
          case $fOrd[]_$ccompare $fOrdPlusLevel' ww1_smefp ww3_smefu of {
            __DEFAULT -> True;
            LT -> False
          };
        GT -> True
      }

-- RHS size: {terms: 13, types: 12, coercions: 0, joins: 0/0}
$fOrdLevel'_$c>=
  = \ w_smefk w1_smefl ->
      case w_smefk of { Max ww1_smefo ww2_smefp ->
      case w1_smefl of { Max ww4_smeft ww5_smefu ->
      $w$c>= ww1_smefo ww2_smefp ww4_smeft ww5_smefu
      }
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
$fOrdLevel'
  = C:Ord
      $fEqLevel'
      $fOrdLevel'_$ccompare
      $fOrdLevel'_$c<
      $fOrdLevel'_$c<=
      $fOrdLevel'_$c>
      $fOrdLevel'_$c>=
      $fOrdLevel'_$cmax
      $fOrdLevel'_$cmin

-- RHS size: {terms: 183, types: 114, coercions: 0, joins: 4/4}
$fOrdDom'_$c<
  = \ @ a_alYni $dOrd_alYnj a1_alXGB b_alXGC ->
      case a1_alXGB of
      { Dom a2_alXGD a3_alXGE a4_alXGF a5_alXGG a6_alXGH ->
      case b_alXGC of
      { Dom b1_alXGI b2_alXGJ b3_alXGK b4_alXGL b5_alXGM ->
      case a2_alXGD of
      { ArgInfo ww1_s3M5k ww2_s3M5l ww3_s3M5m ww4_s3M5n ww5_s3M5o ->
      case b1_alXGI of
      { ArgInfo ww7_s3M5s ww8_s3M5t ww9_s3M5u ww10_s3M5v ww11_s3M5w ->
      case $w$ccompare
             ww1_s3M5k
             ww2_s3M5l
             ww3_s3M5m
             ww4_s3M5n
             ww5_s3M5o
             ww7_s3M5s
             ww8_s3M5t
             ww9_s3M5u
             ww10_s3M5v
             ww11_s3M5w
      of {
        LT -> True;
        EQ ->
          join {
            $j_sm5AT
              = join {
                  $j1_sm5AP
                    = case a5_alXGG of {
                        Nothing ->
                          case b4_alXGL of {
                            Nothing -> < $dOrd_alYnj a6_alXGH b5_alXGM;
                            Just ipv_a1vWD -> True
                          };
                        Just a7_a1vWx ->
                          case b4_alXGL of {
                            Nothing -> False;
                            Just b7_a1vWA ->
                              case $fOrdPlusLevel'_$ccompare a7_a1vWx b7_a1vWA of {
                                LT -> True;
                                EQ -> < $dOrd_alYnj a6_alXGH b5_alXGM;
                                GT -> False
                              }
                          }
                      } } in
                case a4_alXGF of {
                  False ->
                    case b3_alXGK of {
                      False -> jump $j1_sm5AP;
                      True -> True
                    };
                  True ->
                    case b3_alXGK of {
                      False -> False;
                      True -> jump $j1_sm5AP
                    }
                } } in
          case a3_alXGE of {
            Nothing ->
              case b2_alXGJ of {
                Nothing -> jump $j_sm5AT;
                Just ipv_a1vWD -> True
              };
            Just a7_a1vWx ->
              case b2_alXGJ of {
                Nothing -> False;
                Just b7_a1vWA ->
                  case a7_a1vWx of { WithOrigin ww17_s3Law ww18_s3Lax ->
                  case b7_a1vWA of { WithOrigin ww20_s3LaB ww21_s3LaC ->
                  join {
                    $j1_s3vhW a#_a3gZt
                      = join {
                          $j2_s3vhU b#_a3gZu
                            = case <# a#_a3gZt b#_a3gZu of {
                                __DEFAULT ->
                                  case ==# a#_a3gZt b#_a3gZu of {
                                    __DEFAULT -> False;
                                    1# ->
                                      case ww18_s3Lax of { Ranged ds_d3o6r ds1_d3o6s ->
                                      case ww21_s3LaC of { Ranged ds2_X3oXB ds3_X3oXD ->
                                      case $fOrd[]_$s$ccompare1 ds1_d3o6s ds3_X3oXD of {
                                        LT -> True;
                                        EQ -> jump $j_sm5AT;
                                        GT -> False
                                      }
                                      }
                                      }
                                  };
                                1# -> True
                              } } in
                        case ww20_s3LaB of {
                          UserWritten -> jump $j2_s3vhU 0#;
                          Inserted -> jump $j2_s3vhU 1#;
                          Reflected -> jump $j2_s3vhU 2#;
                          CaseSplit -> jump $j2_s3vhU 3#;
                          Substitution -> jump $j2_s3vhU 4#;
                          ExpandedPun -> jump $j2_s3vhU 5#;
                          Generalization -> jump $j2_s3vhU 6#
                        } } in
                  case ww17_s3Law of {
                    UserWritten -> jump $j1_s3vhW 0#;
                    Inserted -> jump $j1_s3vhW 1#;
                    Reflected -> jump $j1_s3vhW 2#;
                    CaseSplit -> jump $j1_s3vhW 3#;
                    Substitution -> jump $j1_s3vhW 4#;
                    ExpandedPun -> jump $j1_s3vhW 5#;
                    Generalization -> jump $j1_s3vhW 6#
                  }
                  }
                  }
              }
          };
        GT -> False
      }
      }
      }
      }
      }

-- RHS size: {terms: 13, types: 10, coercions: 0, joins: 0/0}
$fOrdDom'_$c<=
  = \ @ a_alYni $dOrd_alYnj a1_alXGN b_alXGO ->
      case $fOrdDom'_$c< $dOrd_alYnj b_alXGO a1_alXGN of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 13, types: 10, coercions: 0, joins: 0/0}
$fOrdDom'_$cmin
  = \ @ a_alYni $dOrd_alYnj x_a3Yw y_a3Yx ->
      case $fOrdDom'_$c< $dOrd_alYnj y_a3Yx x_a3Yw of {
        False -> x_a3Yw;
        True -> y_a3Yx
      }

-- RHS size: {terms: 13, types: 10, coercions: 0, joins: 0/0}
$fOrdDom'_$cmax
  = \ @ a_alYni $dOrd_alYnj x_a3Yp y_a3Yq ->
      case $fOrdDom'_$c< $dOrd_alYnj y_a3Yq x_a3Yp of {
        False -> y_a3Yq;
        True -> x_a3Yp
      }

-- RHS size: {terms: 13, types: 10, coercions: 0, joins: 0/0}
$fOrdDom'_$c>=
  = \ @ a_alYni $dOrd_alYnj a1_alXGR b_alXGS ->
      case $fOrdDom'_$c< $dOrd_alYnj a1_alXGR b_alXGS of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 183, types: 114, coercions: 0, joins: 4/4}
$fOrdDom'_$ccompare
  = \ @ a_alYni $dOrd_alYnj a1_alXGp b_alXGq ->
      case a1_alXGp of
      { Dom a2_alXGr a3_alXGs a4_alXGt a5_alXGu a6_alXGv ->
      case b_alXGq of
      { Dom b1_alXGw b2_alXGx b3_alXGy b4_alXGz b5_alXGA ->
      case a2_alXGr of
      { ArgInfo ww1_s3M5k ww2_s3M5l ww3_s3M5m ww4_s3M5n ww5_s3M5o ->
      case b1_alXGw of
      { ArgInfo ww7_s3M5s ww8_s3M5t ww9_s3M5u ww10_s3M5v ww11_s3M5w ->
      case $w$ccompare
             ww1_s3M5k
             ww2_s3M5l
             ww3_s3M5m
             ww4_s3M5n
             ww5_s3M5o
             ww7_s3M5s
             ww8_s3M5t
             ww9_s3M5u
             ww10_s3M5v
             ww11_s3M5w
      of {
        LT -> LT;
        EQ ->
          join {
            $j_sm5Cd
              = join {
                  $j1_sm5C9
                    = case a5_alXGu of {
                        Nothing ->
                          case b4_alXGz of {
                            Nothing -> compare $dOrd_alYnj a6_alXGv b5_alXGA;
                            Just ipv_a1vWD -> LT
                          };
                        Just a7_a1vWx ->
                          case b4_alXGz of {
                            Nothing -> GT;
                            Just b7_a1vWA ->
                              case $fOrdPlusLevel'_$ccompare a7_a1vWx b7_a1vWA of {
                                LT -> LT;
                                EQ -> compare $dOrd_alYnj a6_alXGv b5_alXGA;
                                GT -> GT
                              }
                          }
                      } } in
                case a4_alXGt of {
                  False ->
                    case b3_alXGy of {
                      False -> jump $j1_sm5C9;
                      True -> LT
                    };
                  True ->
                    case b3_alXGy of {
                      False -> GT;
                      True -> jump $j1_sm5C9
                    }
                } } in
          case a3_alXGs of {
            Nothing ->
              case b2_alXGx of {
                Nothing -> jump $j_sm5Cd;
                Just ipv_a1vWD -> LT
              };
            Just a7_a1vWx ->
              case b2_alXGx of {
                Nothing -> GT;
                Just b7_a1vWA ->
                  case a7_a1vWx of { WithOrigin ww17_s3Law ww18_s3Lax ->
                  case b7_a1vWA of { WithOrigin ww20_s3LaB ww21_s3LaC ->
                  join {
                    $j1_s3vhW a#_a3gZt
                      = join {
                          $j2_s3vhU b#_a3gZu
                            = case <# a#_a3gZt b#_a3gZu of {
                                __DEFAULT ->
                                  case ==# a#_a3gZt b#_a3gZu of {
                                    __DEFAULT -> GT;
                                    1# ->
                                      case ww18_s3Lax of { Ranged ds_d3o6r ds1_d3o6s ->
                                      case ww21_s3LaC of { Ranged ds2_X3oXF ds3_X3oXH ->
                                      case $fOrd[]_$s$ccompare1 ds1_d3o6s ds3_X3oXH of {
                                        LT -> LT;
                                        EQ -> jump $j_sm5Cd;
                                        GT -> GT
                                      }
                                      }
                                      }
                                  };
                                1# -> LT
                              } } in
                        case ww20_s3LaB of {
                          UserWritten -> jump $j2_s3vhU 0#;
                          Inserted -> jump $j2_s3vhU 1#;
                          Reflected -> jump $j2_s3vhU 2#;
                          CaseSplit -> jump $j2_s3vhU 3#;
                          Substitution -> jump $j2_s3vhU 4#;
                          ExpandedPun -> jump $j2_s3vhU 5#;
                          Generalization -> jump $j2_s3vhU 6#
                        } } in
                  case ww17_s3Law of {
                    UserWritten -> jump $j1_s3vhW 0#;
                    Inserted -> jump $j1_s3vhW 1#;
                    Reflected -> jump $j1_s3vhW 2#;
                    CaseSplit -> jump $j1_s3vhW 3#;
                    Substitution -> jump $j1_s3vhW 4#;
                    ExpandedPun -> jump $j1_s3vhW 5#;
                    Generalization -> jump $j1_s3vhW 6#
                  }
                  }
                  }
              }
          };
        GT -> GT
      }
      }
      }
      }
      }

-- RHS size: {terms: 23, types: 18, coercions: 0, joins: 0/0}
$fOrdDom'
  = \ @ a_alYni $dOrd_alYnj ->
      C:Ord
        ($fOrdDom'_$cp1Ord $dOrd_alYnj)
        ($fOrdDom'_$ccompare $dOrd_alYnj)
        ($fOrdDom'_$c< $dOrd_alYnj)
        ($fOrdDom'_$c<= $dOrd_alYnj)
        (\ a1_alXGP b_alXGQ -> $fOrdDom'_$c< $dOrd_alYnj b_alXGQ a1_alXGP)
        ($fOrdDom'_$c>= $dOrd_alYnj)
        ($fOrdDom'_$cmax $dOrd_alYnj)
        ($fOrdDom'_$cmin $dOrd_alYnj)

-- RHS size: {terms: 37, types: 57, coercions: 10, joins: 0/3}
$w$ccompare2
  = \ @ a_smehp ww_smehu ww1_smehy w_smehr ->
      let { $dOrd_sm4FM = $fOrdDom' w_smehr } in
      let { $d~1_sm4FL = Eq# @~ <Co:1> } in
      let {
        $dSubst1_sm4FP
          = $fSubstDom' $fSubstTerm ww_smehu ($d~1_sm4FL `cast` <Co:9>) } in
      \ a1_alXJP b_alXJQ ->
        case a1_alXJP of { TelV a2_alXJR a3_alXJS ->
        case b_alXJQ of { TelV b1_alXJT b2_alXJU ->
        case $fOrdTelV_$ccompare
               $dSubst1_sm4FP $dOrd_sm4FM a2_alXJR b1_alXJT
        of {
          LT -> LT;
          EQ -> compare w_smehr a3_alXJS b2_alXJU;
          GT -> GT
        }
        }
        }

-- RHS size: {terms: 12, types: 31, coercions: 1, joins: 0/0}
$fOrdTelV_$ccompare1
  = \ @ a_smehp w_smehq w1_smehr ->
      case w_smehq of { (ww1_smehu, ww2_smehv) ->
      case ww2_smehv of { Eq# ww4_smehy ->
      $w$ccompare2 ww1_smehu @~ <Co:1> w1_smehr
      }
      }

-- RHS size: {terms: 37, types: 57, coercions: 10, joins: 0/3}
$w$c<1
  = \ @ a_smehG ww_smehL ww1_smehP w_smehI ->
      let { $dOrd_sm4FE = $fOrdDom' w_smehI } in
      let { $d~1_sm4FD = Eq# @~ <Co:1> } in
      let {
        $dSubst1_sm4FH
          = $fSubstDom' $fSubstTerm ww_smehL ($d~1_sm4FD `cast` <Co:9>) } in
      \ a1_alXJV b_alXJW ->
        case a1_alXJV of { TelV a2_alXJX a3_alXJY ->
        case b_alXJW of { TelV b1_alXJZ b2_alXK0 ->
        case $fOrdTelV_$ccompare
               $dSubst1_sm4FH $dOrd_sm4FE a2_alXJX b1_alXJZ
        of {
          LT -> True;
          EQ -> < w_smehI a3_alXJY b2_alXK0;
          GT -> False
        }
        }
        }

-- RHS size: {terms: 12, types: 31, coercions: 1, joins: 0/0}
$fOrdTelV_$c<
  = \ @ a_smehG w_smehH w1_smehI ->
      case w_smehH of { (ww1_smehL, ww2_smehM) ->
      case ww2_smehM of { Eq# ww4_smehP ->
      $w$c<1 ww1_smehL @~ <Co:1> w1_smehI
      }
      }

-- RHS size: {terms: 16, types: 20, coercions: 1, joins: 0/0}
$w$c<=1
  = \ @ a_smehT ww_smei0 ww1_smei4 w_smehV w1_smehW w2_smehX ->
      case $w$c<1 ww_smei0 @~ <Co:1> w_smehV w2_smehX w1_smehW of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 16, types: 35, coercions: 1, joins: 0/0}
$fOrdTelV_$c<=
  = \ @ a_smehT w_smehU w1_smehV w2_smehW w3_smehX ->
      case w_smehU of { (ww1_smei0, ww2_smei1) ->
      case ww2_smei1 of { Eq# ww4_smei4 ->
      $w$c<=1 ww1_smei0 @~ <Co:1> w1_smehV w2_smehW w3_smehX
      }
      }

-- RHS size: {terms: 16, types: 20, coercions: 1, joins: 0/0}
$w$c>=1
  = \ @ a_smei8 ww_smeif ww1_smeij w_smeia w1_smeib w2_smeic ->
      case $w$c<1 ww_smeif @~ <Co:1> w_smeia w1_smeib w2_smeic of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 16, types: 35, coercions: 1, joins: 0/0}
$fOrdTelV_$c>=
  = \ @ a_smei8 w_smei9 w1_smeia w2_smeib w3_smeic ->
      case w_smei9 of { (ww1_smeif, ww2_smeig) ->
      case ww2_smeig of { Eq# ww4_smeij ->
      $w$c>=1 ww1_smeif @~ <Co:1> w1_smeia w2_smeib w3_smeic
      }
      }

-- RHS size: {terms: 16, types: 20, coercions: 1, joins: 0/0}
$w$cmax
  = \ @ a_smein ww_smeiu ww1_smeiy w_smeip w1_smeiq w2_smeir ->
      case $w$c<1 ww_smeiu @~ <Co:1> w_smeip w2_smeir w1_smeiq of {
        False -> w2_smeir;
        True -> w1_smeiq
      }

-- RHS size: {terms: 16, types: 35, coercions: 1, joins: 0/0}
$fOrdTelV_$cmax
  = \ @ a_smein w_smeio w1_smeip w2_smeiq w3_smeir ->
      case w_smeio of { (ww1_smeiu, ww2_smeiv) ->
      case ww2_smeiv of { Eq# ww4_smeiy ->
      $w$cmax ww1_smeiu @~ <Co:1> w1_smeip w2_smeiq w3_smeir
      }
      }

-- RHS size: {terms: 21, types: 56, coercions: 1, joins: 0/0}
$fOrdTelV_$c>
  = \ @ a_alYyC $d(%,%)_alYyD $dOrd_alYyE eta1_B2 eta2_B1 ->
      case eq_sel ($p2(%,%) $d(%,%)_alYyD) of co_alZGV { __DEFAULT ->
      case $d(%,%)_alYyD of { (ww1_smehL, ww2_smehM) ->
      case ww2_smehM of { Eq# ww4_smehP ->
      $w$c<1 ww1_smehL @~ <Co:1> $dOrd_alYyE eta2_B1 eta1_B2
      }
      }
      }

-- RHS size: {terms: 16, types: 20, coercions: 1, joins: 0/0}
$w$cmin
  = \ @ a_smeiC ww_smeiJ ww1_smeiN w_smeiE w1_smeiF w2_smeiG ->
      case $w$c<1 ww_smeiJ @~ <Co:1> w_smeiE w2_smeiG w1_smeiF of {
        False -> w1_smeiF;
        True -> w2_smeiG
      }

-- RHS size: {terms: 16, types: 35, coercions: 1, joins: 0/0}
$fOrdTelV_$cmin
  = \ @ a_smeiC w_smeiD w1_smeiE w2_smeiF w3_smeiG ->
      case w_smeiD of { (ww1_smeiJ, ww2_smeiK) ->
      case ww2_smeiK of { Eq# ww4_smeiN ->
      $w$cmin ww1_smeiJ @~ <Co:1> w1_smeiE w2_smeiF w3_smeiG
      }
      }

-- RHS size: {terms: 28, types: 16, coercions: 0, joins: 0/0}
$fOrdTelV
  = \ @ a_alYyC $d(%,%)_alYyD $dOrd_alYyE ->
      C:Ord
        ($fOrdTelV_$cp1Ord $d(%,%)_alYyD $dOrd_alYyE)
        ($fOrdTelV_$ccompare1 $d(%,%)_alYyD $dOrd_alYyE)
        ($fOrdTelV_$c< $d(%,%)_alYyD $dOrd_alYyE)
        ($fOrdTelV_$c<= $d(%,%)_alYyD $dOrd_alYyE)
        ($fOrdTelV_$c> $d(%,%)_alYyD $dOrd_alYyE)
        ($fOrdTelV_$c>= $d(%,%)_alYyD $dOrd_alYyE)
        ($fOrdTelV_$cmax $d(%,%)_alYyD $dOrd_alYyE)
        ($fOrdTelV_$cmin $d(%,%)_alYyD $dOrd_alYyE)

Rec {
-- RHS size: {terms: 167, types: 94, coercions: 0, joins: 2/2}
$fOrdSubstitution'_$ccompare
  = \ a_alXJ7 b_alXJ8 ->
      case a_alXJ7 of {
        IdS ->
          case b_alXJ8 of {
            __DEFAULT -> LT;
            IdS -> EQ
          };
        EmptyS a1_alXJ9 ->
          case b_alXJ8 of {
            __DEFAULT -> LT;
            IdS -> GT;
            EmptyS b1_alXJa -> EQ
          };
        :# a1_alXJb a2_alXJc ->
          join {
            $j_sm5Xs b#_alXJd
              = case ># b#_alXJd 2# of {
                  __DEFAULT ->
                    case b_alXJ8 of {
                      __DEFAULT -> GT;
                      :# b1_alXJe b2_alXJf ->
                        case $fOrdPlusLevel'_$ccompare a1_alXJb b1_alXJe of {
                          LT -> LT;
                          EQ -> $fOrdSubstitution'_$ccompare a2_alXJc b2_alXJf;
                          GT -> GT
                        }
                    };
                  1# -> LT
                } } in
          case b_alXJ8 of {
            IdS -> jump $j_sm5Xs 0#;
            EmptyS ds_dlZRH -> jump $j_sm5Xs 1#;
            :# ds_dlZRI ds1_dlZRJ -> jump $j_sm5Xs 2#;
            Strengthen ds_dlZRK dt_dm2Hn ds1_dlZRM -> jump $j_sm5Xs 3#;
            Wk dt_dm2Ho ds_dlZRO -> jump $j_sm5Xs 4#;
            Lift dt_dm2Hp ds_dlZRQ -> jump $j_sm5Xs 5#
          };
        Strengthen a1_alXJg dt_dm2HO a3_alXJi ->
          join {
            $j_sm5Xy b#_alXJj
              = case <# b#_alXJj 3# of {
                  __DEFAULT ->
                    case b_alXJ8 of {
                      __DEFAULT -> LT;
                      Strengthen b1_alXJk dt1_dm2HP b3_alXJm ->
                        case <# dt_dm2HO dt1_dm2HP of {
                          __DEFAULT ->
                            case ==# dt_dm2HO dt1_dm2HP of {
                              __DEFAULT -> GT;
                              1# -> $fOrdSubstitution'_$ccompare a3_alXJi b3_alXJm
                            };
                          1# -> LT
                        }
                    };
                  1# -> GT
                } } in
          case b_alXJ8 of {
            IdS -> jump $j_sm5Xy 0#;
            EmptyS ds_dlZRH -> jump $j_sm5Xy 1#;
            :# ds_dlZRI ds1_dlZRJ -> jump $j_sm5Xy 2#;
            Strengthen ds_dlZRK dt1_dm2Hn ds1_dlZRM -> jump $j_sm5Xy 3#;
            Wk dt1_dm2Ho ds_dlZRO -> jump $j_sm5Xy 4#;
            Lift dt1_dm2Hp ds_dlZRQ -> jump $j_sm5Xy 5#
          };
        Wk dt_dm2HQ a2_alXJo ->
          case b_alXJ8 of {
            __DEFAULT -> GT;
            Wk dt1_dm2HR b2_alXJq ->
              case <# dt_dm2HQ dt1_dm2HR of {
                __DEFAULT ->
                  case ==# dt_dm2HQ dt1_dm2HR of {
                    __DEFAULT -> GT;
                    1# -> $fOrdSubstitution'_$ccompare a2_alXJo b2_alXJq
                  };
                1# -> LT
              };
            Lift dt1_dm2HS ds_dm0Pp -> LT
          };
        Lift dt_dm2HT a2_alXJs ->
          case b_alXJ8 of {
            __DEFAULT -> GT;
            Lift dt1_dm2HU b2_alXJu ->
              case <# dt_dm2HT dt1_dm2HU of {
                __DEFAULT ->
                  case ==# dt_dm2HT dt1_dm2HU of {
                    __DEFAULT -> GT;
                    1# -> $fOrdSubstitution'_$ccompare a2_alXJs b2_alXJu
                  };
                1# -> LT
              }
          }
      }
end Rec }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdSubstitution'_$c>=
  = \ x_atgT y_atgU ->
      case $fOrdSubstitution'_$ccompare x_atgT y_atgU of {
        __DEFAULT -> True;
        LT -> False
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdSubstitution'_$c>
  = \ x_atgO y_atgP ->
      case $fOrdSubstitution'_$ccompare x_atgO y_atgP of {
        __DEFAULT -> False;
        GT -> True
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdSubstitution'_$c<=
  = \ x_atgJ y_atgK ->
      case $fOrdSubstitution'_$ccompare x_atgJ y_atgK of {
        __DEFAULT -> True;
        GT -> False
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdSubstitution'_$cmax
  = \ x_a3Yp y_a3Yq ->
      case $fOrdSubstitution'_$ccompare x_a3Yp y_a3Yq of {
        __DEFAULT -> y_a3Yq;
        GT -> x_a3Yp
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdSubstitution'_$c<
  = \ x_atgE y_atgF ->
      case $fOrdSubstitution'_$ccompare x_atgE y_atgF of {
        __DEFAULT -> False;
        LT -> True
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdSubstitution'_$cmin
  = \ x_a3Yw y_a3Yx ->
      case $fOrdSubstitution'_$ccompare x_a3Yw y_a3Yx of {
        __DEFAULT -> x_a3Yw;
        GT -> y_a3Yx
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
$fOrdSubstitution'
  = C:Ord
      $fEqSubstitution'
      $fOrdSubstitution'_$ccompare
      $fOrdSubstitution'_$c<
      $fOrdSubstitution'_$c<=
      $fOrdSubstitution'_$c>
      $fOrdSubstitution'_$c>=
      $fOrdSubstitution'_$cmax
      $fOrdSubstitution'_$cmin

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdSort'_$c>=
  = \ x_atgT y_atgU ->
      case $fOrdSort'_$ccompare x_atgT y_atgU of {
        __DEFAULT -> True;
        LT -> False
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdSort'_$c>
  = \ x_atgO y_atgP ->
      case $fOrdSort'_$ccompare x_atgO y_atgP of {
        __DEFAULT -> False;
        GT -> True
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdSort'_$c<=
  = \ x_atgJ y_atgK ->
      case $fOrdSort'_$ccompare x_atgJ y_atgK of {
        __DEFAULT -> True;
        GT -> False
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdSort'_$cmax
  = \ x_a3Yp y_a3Yq ->
      case $fOrdSort'_$ccompare x_a3Yp y_a3Yq of {
        __DEFAULT -> y_a3Yq;
        GT -> x_a3Yp
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdSort'_$cmin
  = \ x_a3Yw y_a3Yx ->
      case $fOrdSort'_$ccompare x_a3Yw y_a3Yx of {
        __DEFAULT -> x_a3Yw;
        GT -> y_a3Yx
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$fOrdSort'_$c<
  = \ x_atgE y_atgF ->
      case $fOrdSort'_$ccompare x_atgE y_atgF of {
        __DEFAULT -> False;
        LT -> True
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
$fOrdSort'
  = C:Ord
      $fEqSort'
      $fOrdSort'_$ccompare
      $fOrdSort'_$c<
      $fOrdSort'_$c<=
      $fOrdSort'_$c>
      $fOrdSort'_$c>=
      $fOrdSort'_$cmax
      $fOrdSort'_$cmin

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstPattern'
  = C:Subst
      ($fDeBruijnPattern'_$s$fDeBruijnPattern' `cast` <Co:3>)
      $fSubstPattern'_$capplySubst

-- RHS size: {terms: 338, types: 363, coercions: 137, joins: 2/2}
$fSubstPattern'_$capplySubst
  = \ ds_dm1lP eta1_B1 ->
      case ds_dm1lP of wild1_XrS {
        __DEFAULT ->
          case eta1_B1 of wild2_X7R {
            VarP i_alX98 x_alX99 ->
              case $wlookupS
                     $fSubstPattern'
                     @~ <Co:1>
                     (wild1_XrS `cast` <Co:3>)
                     (case x_alX99 of { DBPatVar ds1_d8Q2x dt_d8QPz -> I# dt_d8QPz })
              of wild3_X7S {
                __DEFAULT ->
                  join {
                    $j_sm5va ds1_dm0lO
                      = case ds1_dm0lO of {
                          __DEFAULT ->
                            case wild3_X7S of {
                              DotP ds2_dm0lt u_alXoq -> DotP i_alX98 u_alXoq;
                              ConP c_alXor ds2_dm0lu ps_alXow ->
                                case ds2_dm0lu of
                                { ConPatternInfo ds3_dm0lv r_alXos ft_alXot b_alXou l_alXov ->
                                ConP
                                  c_alXor
                                  (ConPatternInfo i_alX98 r_alXos ft_alXot b_alXou l_alXov)
                                  ps_alXow
                                };
                              LitP ds2_dm0lx l_alXoz -> LitP i_alX98 l_alXoz;
                              ProjP ds2_dm0ly ds3_dm0lz -> usePatternInfo1;
                              IApplyP ds2_dm0lA t_alXoA u_alXoB x1_alXoC ->
                                IApplyP i_alX98 t_alXoA u_alXoB x1_alXoC;
                              DefP ds2_dm0lw q_alXox ps_alXoy -> DefP i_alX98 q_alXox ps_alXoy
                            };
                          PatOSplit -> wild3_X7S;
                          PatOAbsurd -> wild3_X7S
                        } } in
                  case wild3_X7S of wild4_XJr {
                    DotP i1_a8KTK ds1_d8PSL ->
                      case i1_a8KTK of { PatternInfo ds2_d8Q2A ds3_d8Q2B ->
                      jump $j_sm5va ds2_d8Q2A
                      };
                    ConP ds1_d8PSN ci_a8KTM ds2_d8PSO ->
                      case ci_a8KTM of
                      { ConPatternInfo ds3_d8Q20 ds4_d8Q21 ds5_d8Q22 ds6_d8Q23
                                       ds7_d8Q24 ->
                      case ds3_d8Q20 of { PatternInfo ds8_d8Q2A ds9_d8Q2B ->
                      jump $j_sm5va ds8_d8Q2A
                      }
                      };
                    LitP i1_a8KTL ds1_d8PSM ->
                      case i1_a8KTL of { PatternInfo ds2_d8Q2A ds3_d8Q2B ->
                      jump $j_sm5va ds2_d8Q2A
                      };
                    ProjP ds1_d8PSP ds2_d8PSQ -> wild4_XJr;
                    IApplyP i1_a8KTN ds1_d8PSR ds2_d8PSS ds3_d8PST ->
                      case i1_a8KTN of { PatternInfo ds4_d8Q2A ds5_d8Q2B ->
                      jump $j_sm5va ds4_d8Q2A
                      };
                    DefP i1_a8KTO ds1_d8PSU ds2_d8PSV ->
                      case i1_a8KTO of { PatternInfo ds3_d8Q2A ds4_d8Q2B ->
                      jump $j_sm5va ds3_d8Q2A
                      }
                  };
                VarP o_alX95 x1_alX96 ->
                  case x1_alX96 of wild4_XIo { DBPatVar ds1_d8Q2u dt_d8QPy ->
                  case eqString ds1_d8Q2u $fUnderscoreDoc_$cunderscore1 of {
                    False ->
                      case o_alX95 of { PatternInfo ds2_d8Q2A ds3_d8Q2B ->
                      case ds2_d8Q2A of {
                        __DEFAULT -> VarP i_alX98 wild4_XIo;
                        PatOSplit -> wild3_X7S;
                        PatOAbsurd -> wild3_X7S
                      }
                      };
                    True ->
                      case o_alX95 of wild6_XIm { PatternInfo ds2_d8Q2A ds3_d8Q2B ->
                      case ds2_d8Q2A of {
                        __DEFAULT ->
                          VarP
                            i_alX98
                            (DBPatVar
                               (case x_alX99 of { DBPatVar ds4_X8QVC dt1_X8RIH -> ds4_X8QVC })
                               dt_d8QPy);
                        PatOSplit ->
                          VarP
                            wild6_XIm
                            (DBPatVar
                               (case x_alX99 of { DBPatVar ds4_X8QVC dt1_X8RIH -> ds4_X8QVC })
                               dt_d8QPy);
                        PatOAbsurd ->
                          VarP
                            wild6_XIm
                            (DBPatVar
                               (case x_alX99 of { DBPatVar ds4_X8QVC dt1_X8RIH -> ds4_X8QVC })
                               dt_d8QPy)
                      }
                      }
                  }
                  }
              };
            DotP i_alX9a u_alX9b ->
              DotP
                i_alX9a
                ($fApplyExtLamInfo_$sapplySubstTerm
                   ($fFunctorSubstitution'_$cfmap
                      patternToTerm (wild1_XrS `cast` <Co:3>))
                   u_alX9b);
            ConP c_alX9c ci_alX9d ps_alX9e ->
              ConP
                c_alX9c
                (case ci_alX9d of
                 { ConPatternInfo ds1_dm1m0 ds2_dm1m1 ds3_dm1m2 ds4_dm1m3
                                  ds5_dm1m4 ->
                 ConPatternInfo
                   ds1_dm1m0
                   ds2_dm1m1
                   ds3_dm1m2
                   (case ds4_dm1m3 of {
                      Nothing -> Nothing;
                      Just a1_anJk ->
                        Just
                          (case ($fFunctorSubstitution'_$cfmap
                                   patternToTerm (wild1_XrS `cast` <Co:3>))
                                `cast` <Co:17>
                           of wild5_XeQ {
                             __DEFAULT ->
                               case a1_anJk of { Arg a2_a3gXn a3_a3gXo ->
                               Arg
                                 (case a2_a3gXn of
                                  { ArgInfo ds6_d3pmW ds7_d3pmX ds8_d3pmY ds9_d3pmZ ds10_d3pn0 ->
                                  ArgInfo ds6_d3pmW ds7_d3pmX ds8_d3pmY UnknownFVs ds10_d3pn0
                                  })
                                 (case a3_a3gXo of { El s_alXdH t_alXdI ->
                                  El
                                    ($fApplyRewriteRule_$s$capplySubst
                                       (wild5_XeQ `cast` <Co:16>) s_alXdH)
                                    ($fApplyExtLamInfo_$sapplySubstTerm
                                       (wild5_XeQ `cast` <Co:14>) t_alXdI)
                                  })
                               };
                             IdS -> a1_anJk
                           })
                    })
                   ds5_dm1m4
                 })
                (map
                   (\ arg_alXam ->
                      case wild1_XrS `cast` <Co:17> of wild3_XeQ {
                        __DEFAULT ->
                          case arg_alXam of { Arg a1_a3gXn a2_a3gXo ->
                          Arg
                            (case a1_a3gXn of
                             { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                             ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                             })
                            (case a2_a3gXo of { Named a4_a3gWE a5_a3gWF ->
                             Named
                               a4_a3gWE
                               ($fSubstPattern'_$capplySubst (wild3_XeQ `cast` <Co:15>) a5_a3gWF)
                             })
                          };
                        IdS -> arg_alXam
                      })
                   ps_alX9e);
            LitP ds1_dm1ng ds2_dm1nh -> wild2_X7R;
            ProjP ds1_dm1ni ds2_dm1nj -> wild2_X7R;
            IApplyP i_alX9k t_alX9l u_alX9m x_alX9n ->
              case $wlookupS
                     $fSubstPattern'
                     @~ <Co:1>
                     (wild1_XrS `cast` <Co:3>)
                     (case x_alX9n of { DBPatVar ds1_d8Q2x dt_d8QPz -> I# dt_d8QPz })
              of {
                __DEFAULT -> lvl225_rmk4w;
                VarP o_alX95 x1_alX96 ->
                  case x1_alX96 of wild4_XIo { DBPatVar ds1_d8Q2u dt_d8QPy ->
                  join {
                    $w$j_smeiZ w_smeiY
                      = IApplyP
                          i_alX9k
                          ($fApplyExtLamInfo_$sapplySubstTerm
                             ($fFunctorSubstitution'_$cfmap
                                patternToTerm (wild1_XrS `cast` <Co:3>))
                             t_alX9l)
                          ($fApplyExtLamInfo_$sapplySubstTerm
                             ($fFunctorSubstitution'_$cfmap
                                patternToTerm (wild1_XrS `cast` <Co:3>))
                             u_alX9m)
                          w_smeiY } in
                  case eqString ds1_d8Q2u $fUnderscoreDoc_$cunderscore1 of {
                    False -> jump $w$j_smeiZ wild4_XIo;
                    True ->
                      jump $w$j_smeiZ
                        (DBPatVar
                           (case x_alX9n of { DBPatVar ds2_X8QVG dt1_X8RIL -> ds2_X8QVG })
                           dt_d8QPy)
                  }
                  };
                IApplyP ds1_dm1mN ds2_dm1mO ds3_dm1mP y_alX9o ->
                  IApplyP
                    i_alX9k
                    ($fApplyExtLamInfo_$sapplySubstTerm
                       ($fFunctorSubstitution'_$cfmap
                          patternToTerm (wild1_XrS `cast` <Co:3>))
                       t_alX9l)
                    ($fApplyExtLamInfo_$sapplySubstTerm
                       ($fFunctorSubstitution'_$cfmap
                          patternToTerm (wild1_XrS `cast` <Co:3>))
                       u_alX9m)
                    y_alX9o
              };
            DefP i_alX9f q_alX9g ps_alX9h ->
              DefP
                i_alX9f
                q_alX9g
                (map
                   (\ arg_alXam ->
                      case wild1_XrS `cast` <Co:17> of wild3_XeQ {
                        __DEFAULT ->
                          case arg_alXam of { Arg a1_a3gXn a2_a3gXo ->
                          Arg
                            (case a1_a3gXn of
                             { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                             ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                             })
                            (case a2_a3gXo of { Named a4_a3gWE a5_a3gWF ->
                             Named
                               a4_a3gWE
                               ($fSubstPattern'_$capplySubst (wild3_XeQ `cast` <Co:15>) a5_a3gWF)
                             })
                          };
                        IdS -> arg_alXam
                      })
                   ps_alX9h)
          };
        IdS -> eta1_B1
      }
end Rec }

Rec {
-- RHS size: {terms: 205, types: 233, coercions: 152, joins: 0/4}
$smkSub_rmk6n
  = \ ds_dm2f0 ds1_dm2f1 ds2_dm2f2 ds3_dm2f3 ->
      case ds2_dm2f2 of {
        [] ->
          case ds3_dm2f3 of {
            [] -> IdS;
            : ipv_sm3kl ipv1_sm3km -> lvl54_rmk1i
          };
        : p_alXj3 ps_alXj4 ->
          case ds3_dm2f3 of {
            [] -> lvl54_rmk1i;
            : v_alXj5 vs_alXj6 ->
              case p_alXj3 of { Arg ds4_d3o6D ds5_d3o6E ->
              case ds5_d3o6E of { Named ds6_d3o6x ds7_d3o6y ->
              case ds7_d3o6y of {
                VarP ds8_dm2k8 ds9_dm2k9 ->
                  case ds9_dm2k9 of { DBPatVar ds10_dm2ka dt_dm2Is ->
                  let {
                    v'_sm4E1
                      = case ds1_dm2f1 of { I# x_aALc ->
                        case x_aALc of lwild_sm61b {
                          __DEFAULT ->
                            $fApplyExtLamInfo_$sapplySubstTerm
                              ((Wk (-# lwild_sm61b 1#) IdS) `cast` <Co:3>) v_alXj5;
                          1# ->
                            $fApplyExtLamInfo_$sapplySubstTerm (IdS `cast` <Co:3>) v_alXj5
                        }
                        } } in
                  $wcomposeS
                    $fSubstTerm
                    @~ <Co:1>
                    ($smkSub_rmk6n
                       ds_dm2f0
                       (case ds1_dm2f1 of { I# x_aALc -> I# (-# x_aALc 1#) })
                       (map
                          (let {
                             ds11_sm4E4
                               = $wsingletonS
                                   ($fDeBruijnPattern'_$s$fDeBruijnPattern' `cast` <Co:23>)
                                   dt_dm2Is
                                   ((DotP defaultPatternInfo v'_sm4E1) `cast` <Co:26>) } in
                           \ arg_alXam ->
                             case ds11_sm4E4 `cast` <Co:6> of wild7_XeQ {
                               __DEFAULT ->
                                 case arg_alXam of { Arg a1_a3gXn a2_a3gXo ->
                                 Arg
                                   (case a1_a3gXn of
                                    { ArgInfo ds12_d3pmW ds13_d3pmX ds14_d3pmY ds15_d3pmZ
                                              ds16_d3pn0 ->
                                    ArgInfo ds12_d3pmW ds13_d3pmX ds14_d3pmY UnknownFVs ds16_d3pn0
                                    })
                                   (case a2_a3gXo of { Named a4_a3gWE a5_a3gWF ->
                                    Named
                                      a4_a3gWE
                                      ($fSubstPattern'_$capplySubst
                                         (wild7_XeQ `cast` <Co:14>) a5_a3gWF)
                                    })
                                 };
                               IdS -> arg_alXam
                             })
                          ps_alXj4)
                       vs_alXj6)
                    ($wsingletonS $fDeBruijnTerm dt_dm2Is (ds_dm2f0 v'_sm4E1))
                  };
                DotP ds8_dm2kb ds9_dm2kc ->
                  $smkSub_rmk6n ds_dm2f0 ds1_dm2f1 ps_alXj4 vs_alXj6;
                ConP c_alXj9 ds8_dm2kd ps'_alXja ->
                  case c_alXj9 of
                  { ConHead ww1_smebC ww2_smebD ww3_smebE ww4_smebF ->
                  $smkSub_rmk6n
                    ds_dm2f0
                    ds1_dm2f1
                    (++ ps'_alXja ps_alXj4)
                    (++ ($wprojections_rmk6c ww2_smebD ww4_smebF v_alXj5) vs_alXj6)
                  };
                LitP ds8_dm2kh ds9_dm2ki -> lvl62_rmk1q;
                ProjP ds8_dm2kj ds9_dm2kk -> lvl58_rmk1m;
                IApplyP ds8_dm2kl ds9_dm2km ds10_dm2kn ds11_dm2ko ->
                  case ds11_dm2ko of { DBPatVar ds12_dm2kp dt_dm2It ->
                  let {
                    v'_sm4E7
                      = case ds1_dm2f1 of { I# x_aALc ->
                        case x_aALc of lwild_sm61l {
                          __DEFAULT ->
                            $fApplyExtLamInfo_$sapplySubstTerm
                              ((Wk (-# lwild_sm61l 1#) IdS) `cast` <Co:3>) v_alXj5;
                          1# ->
                            $fApplyExtLamInfo_$sapplySubstTerm (IdS `cast` <Co:3>) v_alXj5
                        }
                        } } in
                  $wcomposeS
                    $fSubstTerm
                    @~ <Co:1>
                    ($smkSub_rmk6n
                       ds_dm2f0
                       (case ds1_dm2f1 of { I# x_aALc -> I# (-# x_aALc 1#) })
                       (map
                          (let {
                             ds13_sm4Ea
                               = $wsingletonS
                                   ($fDeBruijnPattern'_$s$fDeBruijnPattern' `cast` <Co:23>)
                                   dt_dm2It
                                   ((DotP defaultPatternInfo v'_sm4E7) `cast` <Co:26>) } in
                           \ arg_alXam ->
                             case ds13_sm4Ea `cast` <Co:6> of wild7_XeQ {
                               __DEFAULT ->
                                 case arg_alXam of { Arg a1_a3gXn a2_a3gXo ->
                                 Arg
                                   (case a1_a3gXn of
                                    { ArgInfo ds14_d3pmW ds15_d3pmX ds16_d3pmY ds17_d3pmZ
                                              ds18_d3pn0 ->
                                    ArgInfo ds14_d3pmW ds15_d3pmX ds16_d3pmY UnknownFVs ds18_d3pn0
                                    })
                                   (case a2_a3gXo of { Named a4_a3gWE a5_a3gWF ->
                                    Named
                                      a4_a3gWE
                                      ($fSubstPattern'_$capplySubst
                                         (wild7_XeQ `cast` <Co:14>) a5_a3gWF)
                                    })
                                 };
                               IdS -> arg_alXam
                             })
                          ps_alXj4)
                       vs_alXj6)
                    ($wsingletonS $fDeBruijnTerm dt_dm2It (ds_dm2f0 v'_sm4E7))
                  };
                DefP ds8_dm2ke ds9_dm2kf ds10_dm2kg -> lvl66_rmk1u
              }
              }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 205, types: 239, coercions: 152, joins: 0/4}
$smkSub1_rmk6o
  = \ ds_dm2f0 ds1_dm2f1 ds2_dm2f2 ds3_dm2f3 ->
      case ds2_dm2f2 of {
        [] ->
          case ds3_dm2f3 of {
            [] -> IdS;
            : ipv_sm3kl ipv1_sm3km -> lvl67_rmk1v
          };
        : p_alXj3 ps_alXj4 ->
          case ds3_dm2f3 of {
            [] -> lvl67_rmk1v;
            : v_alXj5 vs_alXj6 ->
              case p_alXj3 of { Arg ds4_d3o6D ds5_d3o6E ->
              case ds5_d3o6E of { Named ds6_d3o6x ds7_d3o6y ->
              case ds7_d3o6y of {
                VarP ds8_dm2k8 ds9_dm2k9 ->
                  case ds9_dm2k9 of { DBPatVar ds10_dm2ka dt_dm2Is ->
                  let {
                    v'_sm4Cr
                      = case ds1_dm2f1 of { I# x_aALc ->
                        case x_aALc of lwild_sm61B {
                          __DEFAULT ->
                            $fApplyExtLamInfo_$sapplySubstTerm
                              ((Wk (-# lwild_sm61B 1#) IdS) `cast` <Co:3>) v_alXj5;
                          1# ->
                            $fApplyExtLamInfo_$sapplySubstTerm (IdS `cast` <Co:3>) v_alXj5
                        }
                        } } in
                  $wcomposeS
                    $fSubstPattern'
                    @~ <Co:1>
                    ($smkSub1_rmk6o
                       ds_dm2f0
                       (case ds1_dm2f1 of { I# x_aALc -> I# (-# x_aALc 1#) })
                       (map
                          (let {
                             ds11_sm4Cu
                               = $wsingletonS
                                   ($fDeBruijnPattern'_$s$fDeBruijnPattern' `cast` <Co:23>)
                                   dt_dm2Is
                                   ((DotP defaultPatternInfo v'_sm4Cr) `cast` <Co:26>) } in
                           \ arg_alXam ->
                             case ds11_sm4Cu `cast` <Co:6> of wild7_XeQ {
                               __DEFAULT ->
                                 case arg_alXam of { Arg a1_a3gXn a2_a3gXo ->
                                 Arg
                                   (case a1_a3gXn of
                                    { ArgInfo ds12_d3pmW ds13_d3pmX ds14_d3pmY ds15_d3pmZ
                                              ds16_d3pn0 ->
                                    ArgInfo ds12_d3pmW ds13_d3pmX ds14_d3pmY UnknownFVs ds16_d3pn0
                                    })
                                   (case a2_a3gXo of { Named a4_a3gWE a5_a3gWF ->
                                    Named
                                      a4_a3gWE
                                      ($fSubstPattern'_$capplySubst
                                         (wild7_XeQ `cast` <Co:14>) a5_a3gWF)
                                    })
                                 };
                               IdS -> arg_alXam
                             })
                          ps_alXj4)
                       vs_alXj6)
                    ($wsingletonS
                       $fDeBruijnPattern'_$s$fDeBruijnPattern'
                       dt_dm2Is
                       (ds_dm2f0 v'_sm4Cr))
                  };
                DotP ds8_dm2kb ds9_dm2kc ->
                  $smkSub1_rmk6o ds_dm2f0 ds1_dm2f1 ps_alXj4 vs_alXj6;
                ConP c_alXj9 ds8_dm2kd ps'_alXja ->
                  case c_alXj9 of
                  { ConHead ww1_smebC ww2_smebD ww3_smebE ww4_smebF ->
                  $smkSub1_rmk6o
                    ds_dm2f0
                    ds1_dm2f1
                    (++ ps'_alXja ps_alXj4)
                    (++ ($wprojections_rmk6c ww2_smebD ww4_smebF v_alXj5) vs_alXj6)
                  };
                LitP ds8_dm2kh ds9_dm2ki -> lvl69_rmk1x;
                ProjP ds8_dm2kj ds9_dm2kk -> lvl68_rmk1w;
                IApplyP ds8_dm2kl ds9_dm2km ds10_dm2kn ds11_dm2ko ->
                  case ds11_dm2ko of { DBPatVar ds12_dm2kp dt_dm2It ->
                  let {
                    v'_sm4Cx
                      = case ds1_dm2f1 of { I# x_aALc ->
                        case x_aALc of lwild_sm61L {
                          __DEFAULT ->
                            $fApplyExtLamInfo_$sapplySubstTerm
                              ((Wk (-# lwild_sm61L 1#) IdS) `cast` <Co:3>) v_alXj5;
                          1# ->
                            $fApplyExtLamInfo_$sapplySubstTerm (IdS `cast` <Co:3>) v_alXj5
                        }
                        } } in
                  $wcomposeS
                    $fSubstPattern'
                    @~ <Co:1>
                    ($smkSub1_rmk6o
                       ds_dm2f0
                       (case ds1_dm2f1 of { I# x_aALc -> I# (-# x_aALc 1#) })
                       (map
                          (let {
                             ds13_sm4CA
                               = $wsingletonS
                                   ($fDeBruijnPattern'_$s$fDeBruijnPattern' `cast` <Co:23>)
                                   dt_dm2It
                                   ((DotP defaultPatternInfo v'_sm4Cx) `cast` <Co:26>) } in
                           \ arg_alXam ->
                             case ds13_sm4CA `cast` <Co:6> of wild7_XeQ {
                               __DEFAULT ->
                                 case arg_alXam of { Arg a1_a3gXn a2_a3gXo ->
                                 Arg
                                   (case a1_a3gXn of
                                    { ArgInfo ds14_d3pmW ds15_d3pmX ds16_d3pmY ds17_d3pmZ
                                              ds18_d3pn0 ->
                                    ArgInfo ds14_d3pmW ds15_d3pmX ds16_d3pmY UnknownFVs ds18_d3pn0
                                    })
                                   (case a2_a3gXo of { Named a4_a3gWE a5_a3gWF ->
                                    Named
                                      a4_a3gWE
                                      ($fSubstPattern'_$capplySubst
                                         (wild7_XeQ `cast` <Co:14>) a5_a3gWF)
                                    })
                                 };
                               IdS -> arg_alXam
                             })
                          ps_alXj4)
                       vs_alXj6)
                    ($wsingletonS
                       $fDeBruijnPattern'_$s$fDeBruijnPattern'
                       dt_dm2It
                       (ds_dm2f0 v'_sm4Cx))
                  };
                DefP ds8_dm2ke ds9_dm2kf ds10_dm2kg -> lvl70_rmk1y
              }
              }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 209, types: 233, coercions: 172, joins: 0/2}
newTel_rmk6p
  = \ n_alXjd tel_alXje ds_dm2cw ds1_dm2cx ->
      case ds_dm2cw of {
        [] ->
          case ds1_dm2cx of {
            [] -> tel_alXje;
            : ipv_sm3kB ipv1_sm3kC -> lvl77_rmk1K
          };
        : p_alXjh ps_alXji ->
          case ds1_dm2cx of {
            [] -> lvl77_rmk1K;
            : v_alXjj vs_alXjk ->
              case p_alXjh of { Arg ds2_d3o6D ds3_d3o6E ->
              case ds3_d3o6E of { Named ds4_d3o6x ds5_d3o6y ->
              case ds5_d3o6y of {
                VarP ds6_dm2ee ds7_dm2ef ->
                  case ds7_dm2ef of { DBPatVar ds8_dm2eg dt_dm2Iq ->
                  case $w$csize tel_alXje of ww_s92fc { __DEFAULT ->
                  newTel_rmk6p
                    (case n_alXjd of { I# x_aALc -> I# (-# x_aALc 1#) })
                    ($wsubTel_rmk6l
                       (-# (-# ww_s92fc 1#) dt_dm2Iq) (v_alXjj `cast` <Co:11>) tel_alXje)
                    (map
                       (let {
                          ds9_sm4zr
                            = $wsingletonS
                                ($fDeBruijnPattern'_$s$fDeBruijnPattern' `cast` <Co:23>)
                                dt_dm2Iq
                                ((DotP
                                    defaultPatternInfo
                                    (case n_alXjd of { I# x_aALc ->
                                     case x_aALc of lwild_sm623 {
                                       __DEFAULT ->
                                         $fApplyExtLamInfo_$sapplySubstTerm
                                           ((Wk (-# lwild_sm623 1#) IdS) `cast` <Co:3>) v_alXjj;
                                       1# ->
                                         $fApplyExtLamInfo_$sapplySubstTerm
                                           (IdS `cast` <Co:3>) v_alXjj
                                     }
                                     }))
                                 `cast` <Co:26>) } in
                        \ arg_alXam ->
                          case ds9_sm4zr `cast` <Co:6> of wild7_XeQ {
                            __DEFAULT ->
                              case arg_alXam of { Arg a1_a3gXn a2_a3gXo ->
                              Arg
                                (case a1_a3gXn of
                                 { ArgInfo ds10_d3pmW ds11_d3pmX ds12_d3pmY ds13_d3pmZ ds14_d3pn0 ->
                                 ArgInfo ds10_d3pmW ds11_d3pmX ds12_d3pmY UnknownFVs ds14_d3pn0
                                 })
                                (case a2_a3gXo of { Named a4_a3gWE a5_a3gWF ->
                                 Named
                                   a4_a3gWE
                                   ($fSubstPattern'_$capplySubst
                                      (wild7_XeQ `cast` <Co:14>) a5_a3gWF)
                                 })
                              };
                            IdS -> arg_alXam
                          })
                       ps_alXji)
                    vs_alXjk
                  }
                  };
                DotP ds6_dm2eh ds7_dm2ei ->
                  newTel_rmk6p n_alXjd tel_alXje ps_alXji vs_alXjk;
                ConP c_alXjm ds6_dm2ej ps'_alXjn ->
                  case c_alXjm of
                  { ConHead ww1_smebC ww2_smebD ww3_smebE ww4_smebF ->
                  newTel_rmk6p
                    n_alXjd
                    tel_alXje
                    (++ ps'_alXjn ps_alXji)
                    (++ ($wprojections_rmk6c ww2_smebD ww4_smebF v_alXjj) vs_alXjk)
                  };
                LitP ds6_dm2en ds7_dm2eo -> lvl45_rmk15;
                ProjP ds6_dm2ep ds7_dm2eq -> lvl49_rmk19;
                IApplyP ds6_dm2er ds7_dm2es ds8_dm2et ds9_dm2eu ->
                  case ds9_dm2eu of { DBPatVar ds10_dm2ev dt_dm2Ir ->
                  case $w$csize tel_alXje of ww_s92fc { __DEFAULT ->
                  newTel_rmk6p
                    (case n_alXjd of { I# x_aALc -> I# (-# x_aALc 1#) })
                    ($wsubTel_rmk6l
                       (-# (-# ww_s92fc 1#) dt_dm2Ir) (v_alXjj `cast` <Co:11>) tel_alXje)
                    (map
                       (let {
                          ds11_sm4zt
                            = $wsingletonS
                                ($fDeBruijnPattern'_$s$fDeBruijnPattern' `cast` <Co:23>)
                                dt_dm2Ir
                                ((DotP
                                    defaultPatternInfo
                                    (case n_alXjd of { I# x_aALc ->
                                     case x_aALc of lwild_sm62e {
                                       __DEFAULT ->
                                         $fApplyExtLamInfo_$sapplySubstTerm
                                           ((Wk (-# lwild_sm62e 1#) IdS) `cast` <Co:3>) v_alXjj;
                                       1# ->
                                         $fApplyExtLamInfo_$sapplySubstTerm
                                           (IdS `cast` <Co:3>) v_alXjj
                                     }
                                     }))
                                 `cast` <Co:26>) } in
                        \ arg_alXam ->
                          case ds11_sm4zt `cast` <Co:6> of wild7_XeQ {
                            __DEFAULT ->
                              case arg_alXam of { Arg a1_a3gXn a2_a3gXo ->
                              Arg
                                (case a1_a3gXn of
                                 { ArgInfo ds12_d3pmW ds13_d3pmX ds14_d3pmY ds15_d3pmZ ds16_d3pn0 ->
                                 ArgInfo ds12_d3pmW ds13_d3pmX ds14_d3pmY UnknownFVs ds16_d3pn0
                                 })
                                (case a2_a3gXo of { Named a4_a3gWE a5_a3gWF ->
                                 Named
                                   a4_a3gWE
                                   ($fSubstPattern'_$capplySubst
                                      (wild7_XeQ `cast` <Co:14>) a5_a3gWF)
                                 })
                              };
                            IdS -> arg_alXam
                          })
                       ps_alXji)
                    vs_alXjk
                  }
                  };
                DefP ds6_dm2ek ds7_dm2el ds8_dm2em -> lvl53_rmk1d
              }
              }
              }
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl324_rmk6q = $fPrettyArg_$cprettyList $fPrettyTerm

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl325_rmk6r
  = "\n\
    \  args = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl326_rmk6s = "piApply t = "#

Rec {
-- RHS size: {terms: 69, types: 59, coercions: 27, joins: 0/2}
$wpiApply
  = \ ww_smeji ww1_smejj w_smejf ->
      case w_smejf of wild1_XqS {
        [] -> El ww_smeji ww1_smejj;
        : ipv_sm3d9 ipv1_sm3da ->
          case ww1_smejj of wild2_X7r {
            __DEFAULT ->
              trace
                (unpackAppendCString#
                   lvl326_rmk6s
                   (++
                      (fullRenderAnn
                         PageMode
                         $fEqDoc3
                         $fEqDoc2
                         $fEqDoc1
                         []
                         ($fPrettyLevel'_$cprettyPrec2 $fFoldableLevel'5 wild2_X7r))
                      (unpackAppendCString#
                         lvl325_rmk6r
                         (fullRenderAnn
                            PageMode $fEqDoc3 $fEqDoc2 $fEqDoc1 [] (lvl324_rmk6q wild1_XqS)))))
                lvl98_rmk25;
            Pi ds_dm0rF b_alXnc ->
              case b_alXnc of {
                Abs ds1_dddFd v_addbA ->
                  case v_addbA of { El s_alXdH t_alXdI ->
                  let {
                    rho_sm4Gk
                      = case ipv_sm3d9 of { Arg ds2_d3o6D ds3_d3o6E -> ds3_d3o6E } } in
                  let { rho1_sm4Gj = :# (rho_sm4Gk `cast` <Co:9>) IdS } in
                  $wpiApply
                    ($fApplyRewriteRule_$s$capplySubst
                       (rho1_sm4Gj `cast` <Co:10>) s_alXdH)
                    ($fApplyExtLamInfo_$sapplySubstTerm
                       (rho1_sm4Gj `cast` <Co:8>) t_alXdI)
                    ipv1_sm3da
                  };
                NoAbs ds1_dddFe v_addbC ->
                  case v_addbC of { El ww3_XmeNQ ww4_XmeNS ->
                  $wpiApply ww3_XmeNQ ww4_XmeNS ipv1_sm3da
                  }
              }
          }
      }
end Rec }

-- RHS size: {terms: 9, types: 6, coercions: 0, joins: 0/0}
piApply
  = \ w_smeje w1_smejf ->
      case w_smeje of { El ww1_smeji ww2_smejj ->
      $wpiApply ww1_smeji ww2_smejj w1_smejf
      }

Rec {
-- RHS size: {terms: 52, types: 74, coercions: 18, joins: 0/0}
$wtelView'UpTo
  = \ ww_smejq w_smejn ->
      case ww_smejq of ds_Xm0qf {
        __DEFAULT ->
          case w_smejn of wild1_XIi { El ds1_d8Q2L ds2_d8Q2M ->
          case ds2_d8Q2M of {
            __DEFAULT -> (# EmptyTel, wild1_XIi #);
            Pi a_alXoX b_alXoY ->
              case $wtelView'UpTo
                     (-# ds_Xm0qf 1#)
                     (case b_alXoY of {
                        Abs ds4_dddYL v_addbG -> v_addbG;
                        NoAbs ds4_dddYM v_addbH ->
                          case v_addbH of { El s_alXdH t_alXdI ->
                          El
                            ($fApplyRewriteRule_$s$capplySubst
                               (absBody1 `cast` <Co:10>) s_alXdH)
                            ($fApplyExtLamInfo_$sapplySubstTerm
                               (absBody1 `cast` <Co:8>) t_alXdI)
                          }
                      })
              of
              { (# ww2_smepG, ww3_smepH #) ->
              (# ExtendTel
                   a_alXoX
                   (Abs
                      (case b_alXoY of {
                         Abs ds4_d8Q2O ds5_d8Q2P -> ds4_d8Q2O;
                         NoAbs ds4_d8Q2Q ds5_d8Q2R -> ds4_d8Q2Q
                       })
                      ww2_smepG),
                 ww3_smepH #)
              }
          }
          };
        0# -> (# EmptyTel, w_smejn #)
      }
end Rec }

-- RHS size: {terms: 13, types: 16, coercions: 0, joins: 0/0}
telView'UpTo
  = \ w_smejm w1_smejn ->
      case w_smejm of { I# ww1_smejq ->
      case $wtelView'UpTo ww1_smejq w1_smejn of
      { (# ww3_smepG, ww4_smepH #) ->
      TelV ww3_smepG ww4_smepH
      }
      }

-- RHS size: {terms: 9, types: 13, coercions: 0, joins: 0/0}
telView'
  = \ w_smejn ->
      case $wtelView'UpTo -1# w_smejn of { (# ww1_smepG, ww2_smepH #) ->
      TelV ww1_smepG ww2_smepH
      }

Rec {
-- RHS size: {terms: 103, types: 107, coercions: 56, joins: 1/4}
telePiVisible
  = \ ds_dm0h0 t_alXpI ->
      case ds_dm0h0 of {
        EmptyTel -> t_alXpI;
        ExtendTel u_alXpJ tel_alXpK ->
          case u_alXpJ of wild2_XA2
          { Dom ds1_d8Q3i ds2_d8Q3j ds3_d8Q3k ds4_d8Q3l ds5_d8Q3m ->
          case ds1_d8Q3i of wild3_X1p4
          { ArgInfo ds6_d3o6G ds7_d3o6H ds8_d3o6I ds9_d3o6J ds10_d3o6K ->
          let {
            b_sm4Gg
              = case tel_alXpK of {
                  Abs a1_a8M6g a2_a8M6h ->
                    Abs a1_a8M6g (telePiVisible a2_a8M6h t_alXpI);
                  NoAbs a1_a8M6k a2_a8M6l ->
                    NoAbs a1_a8M6k (telePiVisible a2_a8M6l t_alXpI)
                } } in
          case ds6_d3o6G of {
            __DEFAULT ->
              case b_sm4Gg of wild5_X2o {
                Abs x_addbM v_addbN ->
                  case v_addbN of { El ww1_s9zGN ww2_s9zGO ->
                  join {
                    $j_sm5VL
                      = El
                          (let {
                             s1_sm4Gv
                               = case ds5_d8Q3m of { El s39_a8KRC a2_a8KRD ->
                                 s39_a8KRC `cast` <Co:8>
                                 } } in
                           let { s2_sm4Gu = Abs x_addbM ww1_s9zGN } in
                           case $wpiSort' (s1_sm4Gv `cast` <Co:6>) s2_sm4Gu of {
                             Left x1_acvT ->
                               PiSort
                                 (Dom
                                    wild3_X1p4
                                    ds2_d8Q3j
                                    ds3_d8Q3k
                                    ds4_d8Q3l
                                    (case ds5_d8Q3m of { El ds11_d8Q2L ds12_d8Q2M -> ds12_d8Q2M }))
                                 (s1_sm4Gv `cast` <Co:6>)
                                 s2_sm4Gu;
                             Right y_acvV -> y_acvV
                           })
                          (Pi wild2_XA2 wild5_X2o) } in
                  case ((($fFreeDom'_$cfreeVars'1 $fIsVarSet()Any ww1_s9zGN)
                         `cast` <Co:7>)
                          mkPi1)
                       `cast` <Co:2>
                  of {
                    False ->
                      case ((($fFreeClause_$cfreeVars'1 $fIsVarSet()Any ww2_s9zGO)
                             `cast` <Co:7>)
                              mkPi1)
                           `cast` <Co:2>
                      of {
                        False ->
                          El
                            ($fApplyRewriteRule_$s$capplySubst
                               (mkAbs1 `cast` <Co:10>) ww1_s9zGN)
                            ($fApplyExtLamInfo_$sapplySubstTerm
                               (mkAbs1 `cast` <Co:8>) ww2_s9zGO);
                        True -> jump $j_sm5VL
                      };
                    True -> jump $j_sm5VL
                  }
                  };
                NoAbs x_addbK v_addbL -> v_addbL
              };
            NotHidden -> El (mkPiSort wild2_XA2 b_sm4Gg) (Pi wild2_XA2 b_sm4Gg)
          }
          }
          }
      }
end Rec }

-- RHS size: {terms: 34, types: 24, coercions: 36, joins: 0/0}
telePi1
  = \ ds_dddZd ->
      case ds_dddZd of wild1_X2o {
        Abs x_addbM v_addbN ->
          case v_addbN of { El ww1_s9zGN ww2_s9zGO ->
          case ((($fFreeDom'_$cfreeVars'1 $fIsVarSet()Any ww1_s9zGN)
                 `cast` <Co:7>)
                  mkPi1)
               `cast` <Co:2>
          of {
            False ->
              case ((($fFreeClause_$cfreeVars'1 $fIsVarSet()Any ww2_s9zGO)
                     `cast` <Co:7>)
                      mkPi1)
                   `cast` <Co:2>
              of {
                False ->
                  NoAbs
                    x_addbM
                    (El
                       ($fApplyRewriteRule_$s$capplySubst
                          (mkAbs1 `cast` <Co:10>) ww1_s9zGN)
                       ($fApplyExtLamInfo_$sapplySubstTerm
                          (mkAbs1 `cast` <Co:8>) ww2_s9zGO));
                True -> wild1_X2o
              };
            True -> wild1_X2o
          }
          };
        NoAbs x_addbK v_addbL -> wild1_X2o
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
telePi = telePi' telePi1

-- RHS size: {terms: 93, types: 99, coercions: 70, joins: 0/4}
$wmkPi
  = \ ww_smejD ww1_smejE ww2_smejF ww3_smejG ww4_smejH w_smejA ->
      let {
        x_sm4G3
          = case ww4_smejH of { (x1_a19Vf, ds1_a19Vg) -> x1_a19Vf } } in
      (# let {
           s1_sm4Gc
             = case ww4_smejH of { (ds1_aqgj, y_aqgk) ->
               case y_aqgk of { El s39_a8KRC a2_a8KRD -> s39_a8KRC `cast` <Co:8> }
               } } in
         let {
           s2_sm4Gb
             = case w_smejA of { El s39_a8KRC a2_a8KRD ->
               s39_a8KRC `cast` <Co:8>
               } } in
         let { s4_sm4Ga = Abs x_sm4G3 (s2_sm4Gb `cast` <Co:6>) } in
         case $wpiSort' (s1_sm4Gc `cast` <Co:6>) s4_sm4Ga of {
           Left x1_acvT ->
             PiSort
               (Dom
                  ww_smejD
                  ww1_smejE
                  ww2_smejF
                  ww3_smejG
                  (case ww4_smejH of { (ds1_aqgj, y_aqgk) ->
                   case y_aqgk of { El ds2_d8Q2L ds3_d8Q2M -> ds3_d8Q2M }
                   }))
               (s1_sm4Gc `cast` <Co:6>)
               s4_sm4Ga;
           Right y_acvV -> y_acvV
         },
         Pi
           (Dom
              ww_smejD
              ww1_smejE
              ww2_smejF
              ww3_smejG
              (case ww4_smejH of { (ds1_aqgj, y_aqgk) -> y_aqgk }))
           (case w_smejA of ww5_s9zGM { El ww6_s9zGN ww7_s9zGO ->
            case ((($fFreeDom'_$cfreeVars'1 $fIsVarSet()Any ww6_s9zGN)
                   `cast` <Co:7>)
                    mkPi1)
                 `cast` <Co:2>
            of {
              False ->
                case ((($fFreeClause_$cfreeVars'1 $fIsVarSet()Any ww7_s9zGO)
                       `cast` <Co:7>)
                        mkPi1)
                     `cast` <Co:2>
                of {
                  False ->
                    NoAbs
                      x_sm4G3
                      (El
                         ($fApplyRewriteRule_$s$capplySubst
                            (mkAbs1 `cast` <Co:10>) ww6_s9zGN)
                         ($fApplyExtLamInfo_$sapplySubstTerm
                            (mkAbs1 `cast` <Co:8>) ww7_s9zGO));
                  True -> Abs x_sm4G3 ww5_s9zGM
                };
              True -> Abs x_sm4G3 ww5_s9zGM
            }
            }) #)

-- RHS size: {terms: 17, types: 29, coercions: 0, joins: 0/0}
mkPi
  = \ w_smejz w1_smejA ->
      case w_smejz of
      { Dom ww1_smejD ww2_smejE ww3_smejF ww4_smejG ww5_smejH ->
      case $wmkPi
             ww1_smejD ww2_smejE ww3_smejF ww4_smejG ww5_smejH w1_smejA
      of
      { (# ww7_smepJ, ww8_smepK #) ->
      El ww7_smepJ ww8_smepK
      }
      }

-- RHS size: {terms: 20, types: 14, coercions: 15, joins: 0/0}
$fSubstCompareAs_$capplySubst
  = \ rho_alXaD ds_dm1B1 ->
      case ds_dm1B1 of {
        AsTermsOf a_alXaE ->
          AsTermsOf
            (case a_alXaE of { El s_alXdH t_alXdI ->
             El
               ($fApplyRewriteRule_$s$capplySubst
                  (rho_alXaD `cast` <Co:12>) s_alXdH)
               ($fApplyExtLamInfo_$sapplySubstTerm
                  (rho_alXaD `cast` <Co:3>) t_alXdI)
             });
        AsSizes -> AsSizes;
        AsTypes -> AsTypes
      }

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstCompareAs
  = C:Subst
      ($fDeBruijnTerm `cast` <Co:3>) $fSubstCompareAs_$capplySubst

-- RHS size: {terms: 44, types: 52, coercions: 50, joins: 0/0}
$fSubstConPatternInfo_$capplySubst
  = \ w_smejP w1_smejQ ->
      case w1_smejQ of
      { ConPatternInfo ww1_smejT ww2_smejU ww3_smejV ww4_smejW
                       ww5_smejX ->
      ConPatternInfo
        ww1_smejT
        ww2_smejU
        ww3_smejV
        (case ww4_smejW of {
           Nothing -> Nothing;
           Just a1_anJk ->
             Just
               (case w_smejP `cast` <Co:20> of wild2_XeQ {
                  __DEFAULT ->
                    case a1_anJk of { Arg a2_a3gXn a3_a3gXo ->
                    Arg
                      (case a2_a3gXn of
                       { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                       ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                       })
                      (case a3_a3gXo of { El s_alXdH t_alXdI ->
                       El
                         ($fApplyRewriteRule_$s$capplySubst
                            (wild2_XeQ `cast` <Co:16>) s_alXdH)
                         ($fApplyExtLamInfo_$sapplySubstTerm
                            (wild2_XeQ `cast` <Co:14>) t_alXdI)
                       })
                    };
                  IdS -> a1_anJk
                })
         })
        ww5_smejX
      }

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstConPatternInfo
  = C:Subst
      ($fDeBruijnTerm `cast` <Co:3>) $fSubstConPatternInfo_$capplySubst

Rec {
-- RHS size: {terms: 90, types: 143, coercions: 80, joins: 0/0}
$fSubstPattern'0_$capplySubst
  = \ rho_alXcN ds_dm1HL ->
      case ds_dm1HL of wild1_Xv7 {
        __DEFAULT -> wild1_Xv7;
        DotP o_alXcU t_alXcV ->
          DotP
            o_alXcU
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXcN `cast` <Co:3>) t_alXcV);
        ConP c_alXcO mt_alXcP ps_alXcQ ->
          ConP
            c_alXcO
            ($fSubstConPatternInfo_$capplySubst
               (rho_alXcN `cast` <Co:7>) mt_alXcP)
            (map
               (\ arg_alXam ->
                  case rho_alXcN `cast` <Co:17> of wild2_XeQ {
                    __DEFAULT ->
                      case arg_alXam of { Arg a1_a3gXn a2_a3gXo ->
                      Arg
                        (case a1_a3gXn of
                         { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                         ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                         })
                        (case a2_a3gXo of { Named a4_a3gWE a5_a3gWF ->
                         Named
                           a4_a3gWE
                           ($fSubstPattern'0_$capplySubst (wild2_XeQ `cast` <Co:15>) a5_a3gWF)
                         })
                      };
                    IdS -> arg_alXam
                  })
               ps_alXcQ);
        IApplyP o_alXd5 t_alXd6 u_alXd7 x_alXd8 ->
          IApplyP
            o_alXd5
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXcN `cast` <Co:3>) t_alXd6)
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXcN `cast` <Co:3>) u_alXd7)
            x_alXd8;
        DefP o_alXcR q_alXcS ps_alXcT ->
          DefP
            o_alXcR
            q_alXcS
            (map
               (\ arg_alXam ->
                  case rho_alXcN `cast` <Co:17> of wild2_XeQ {
                    __DEFAULT ->
                      case arg_alXam of { Arg a1_a3gXn a2_a3gXo ->
                      Arg
                        (case a1_a3gXn of
                         { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                         ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                         })
                        (case a2_a3gXo of { Named a4_a3gWE a5_a3gWF ->
                         Named
                           a4_a3gWE
                           ($fSubstPattern'0_$capplySubst (wild2_XeQ `cast` <Co:15>) a5_a3gWF)
                         })
                      };
                    IdS -> arg_alXam
                  })
               ps_alXcT)
      }
end Rec }

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstPattern'0
  = C:Subst
      ($fDeBruijnTerm `cast` <Co:3>) $fSubstPattern'0_$capplySubst

-- RHS size: {terms: 99, types: 93, coercions: 88, joins: 0/0}
$w$capplySubst1
  = \ w_smek5
      ww_smek9
      ww1_smeka
      ww2_smekb
      ww3_smekc
      ww4_smekd
      ww5_smeke ->
      (# $fApplyRewriteRule_$s$capplySubst
           (w_smek5 `cast` <Co:12>) ww_smek9,
         ww1_smeka,
         map
           (\ arg_alXam ->
              case w_smek5 `cast` <Co:12> of wild1_XeQ {
                __DEFAULT ->
                  case arg_alXam of { Arg a1_a3gXn a2_a3gXo ->
                  Arg
                    (case a1_a3gXn of
                     { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                     ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                     })
                    ($fApplyExtLamInfo_$sapplySubstTerm
                       (wild1_XeQ `cast` <Co:7>) a2_a3gXo)
                  };
                IdS -> arg_alXam
              })
           ww2_smekb,
         case w_smek5 `cast` <Co:12> of wild1_XeQ {
           __DEFAULT ->
             case ww3_smekc of { Arg a1_a3gXn a2_a3gXo ->
             Arg
               (case a1_a3gXn of
                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                })
               ($fApplyExtLamInfo_$sapplySubstTerm
                  (wild1_XeQ `cast` <Co:7>) a2_a3gXo)
             };
           IdS -> ww3_smekc
         },
         case w_smek5 `cast` <Co:12> of wild1_XeQ {
           __DEFAULT ->
             case ww4_smekd of { Arg a1_a3gXn a2_a3gXo ->
             Arg
               (case a1_a3gXn of
                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                })
               ($fApplyExtLamInfo_$sapplySubstTerm
                  (wild1_XeQ `cast` <Co:7>) a2_a3gXo)
             };
           IdS -> ww4_smekd
         },
         case w_smek5 `cast` <Co:12> of wild1_XeQ {
           __DEFAULT ->
             case ww5_smeke of { Arg a1_a3gXn a2_a3gXo ->
             Arg
               (case a1_a3gXn of
                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                })
               ($fApplyExtLamInfo_$sapplySubstTerm
                  (wild1_XeQ `cast` <Co:7>) a2_a3gXo)
             };
           IdS -> ww5_smeke
         } #)

-- RHS size: {terms: 22, types: 39, coercions: 0, joins: 0/0}
$fSubstEqualityTypeData_$capplySubst
  = \ w_smek5 w1_smek6 ->
      case w1_smek6 of
      { EqualityTypeData ww1_smek9 ww2_smeka ww3_smekb ww4_smekc
                         ww5_smekd ww6_smeke ->
      case $w$capplySubst1
             w_smek5 ww1_smek9 ww2_smeka ww3_smekb ww4_smekc ww5_smekd ww6_smeke
      of
      { (# ww8_smepS, ww9_smepT, ww10_smepU, ww11_smepV, ww12_smepW,
           ww13_smepX #) ->
      EqualityTypeData
        ww8_smepS ww9_smepT ww10_smepU ww11_smepV ww12_smepW ww13_smepX
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstEqualityTypeData
  = C:Subst
      ($fDeBruijnTerm `cast` <Co:3>) $fSubstEqualityTypeData_$capplySubst

-- RHS size: {terms: 33, types: 24, coercions: 37, joins: 0/0}
$fSubstEqualityView_$capplySubst
  = \ rho_alX9A ds_dm1ob ->
      case ds_dm1ob of {
        EqualityViewType eqt_alX9D ->
          EqualityViewType
            ($fSubstEqualityTypeData_$capplySubst
               (rho_alX9A `cast` <Co:7>) eqt_alX9D);
        OtherType t_alX9B ->
          OtherType
            (case t_alX9B of { El s_alXdH t1_alXdI ->
             El
               ($fApplyRewriteRule_$s$capplySubst
                  (rho_alX9A `cast` <Co:12>) s_alXdH)
               ($fApplyExtLamInfo_$sapplySubstTerm
                  (rho_alX9A `cast` <Co:3>) t1_alXdI)
             });
        IdiomType t_alX9C ->
          IdiomType
            (case t_alX9C of { El s_alXdH t1_alXdI ->
             El
               ($fApplyRewriteRule_$s$capplySubst
                  (rho_alX9A `cast` <Co:12>) s_alXdH)
               ($fApplyExtLamInfo_$sapplySubstTerm
                  (rho_alX9A `cast` <Co:3>) t1_alXdI)
             })
      }

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstEqualityView
  = C:Subst
      ($fDeBruijnTerm `cast` <Co:3>) $fSubstEqualityView_$capplySubst

-- RHS size: {terms: 21, types: 17, coercions: 18, joins: 0/0}
$fSubstCandidate_$capplySubst
  = \ w_smekm w1_smekn ->
      case w1_smekn of
      { Candidate ww1_smekq ww2_smekr ww3_smeks ww4_smekt ->
      Candidate
        ww1_smekq
        ($fApplyExtLamInfo_$sapplySubstTerm
           (w_smekm `cast` <Co:3>) ww2_smekr)
        (case ww3_smeks of { El s_alXdH t_alXdI ->
         El
           ($fApplyRewriteRule_$s$capplySubst
              (w_smekm `cast` <Co:12>) s_alXdH)
           ($fApplyExtLamInfo_$sapplySubstTerm
              (w_smekm `cast` <Co:3>) t_alXdI)
         })
        ww4_smekt
      }

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstCandidate
  = C:Subst
      ($fDeBruijnTerm `cast` <Co:3>) $fSubstCandidate_$capplySubst

-- RHS size: {terms: 48, types: 58, coercions: 50, joins: 0/0}
$w$capplySubst2
  = \ w_smekz ww_smekD ww1_smekE ww2_smekF ->
      (# ww_smekD,
         $fApplyExtLamInfo_$sapplySubstTerm
           (w_smekz `cast` <Co:3>) ww1_smekE,
         case w_smekz `cast` <Co:15> of wild1_Xg0 {
           __DEFAULT ->
             case ww2_smekF of
             { Dom ds_dm1xB ds1_dm1xC ds2_dm1xD ds3_dm1xE ds4_dm1xF ->
             Dom
               (case ds_dm1xB of
                { ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U ds8_d3o7V ds9_d3o7W ->
                ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U UnknownFVs ds9_d3o7W
                })
               ds1_dm1xC
               ds2_dm1xD
               (case ds3_dm1xE of {
                  Nothing -> Nothing;
                  Just a1_anJk ->
                    Just
                      ($fApplyExtLamInfo_$sapplySubstTerm
                         (wild1_Xg0 `cast` <Co:10>) a1_anJk)
                })
               (case ds4_dm1xF of { El s_alXdH t_alXdI ->
                El
                  ($fApplyRewriteRule_$s$capplySubst
                     (wild1_Xg0 `cast` <Co:12>) s_alXdH)
                  ($fApplyExtLamInfo_$sapplySubstTerm
                     (wild1_Xg0 `cast` <Co:10>) t_alXdI)
                })
             };
           IdS -> ww2_smekF
         } #)

-- RHS size: {terms: 16, types: 21, coercions: 0, joins: 0/0}
$fSubstLetBinding_$capplySubst
  = \ w_smekz w1_smekA ->
      case w1_smekA of { LetBinding ww1_smekD ww2_smekE ww3_smekF ->
      case $w$capplySubst2 w_smekz ww1_smekD ww2_smekE ww3_smekF of
      { (# ww5_smeq4, ww6_smeq5, ww7_smeq6 #) ->
      LetBinding ww5_smeq4 ww6_smeq5 ww7_smeq6
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstLetBinding
  = C:Subst
      ($fDeBruijnTerm `cast` <Co:3>) $fSubstLetBinding_$capplySubst

-- RHS size: {terms: 389, types: 331, coercions: 364, joins: 0/0}
$fSubstConstraint_$capplySubst
  = \ rho_alXaH eta1_B1 ->
      case eta1_B1 of wild1_Xul {
        ValueCmp cmp_alXaL a_alXaM u_alXaN v_alXaO ->
          ValueCmp
            cmp_alXaL
            ($fSubstCompareAs_$capplySubst (rho_alXaH `cast` <Co:7>) a_alXaM)
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXaH `cast` <Co:3>) u_alXaN)
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXaH `cast` <Co:3>) v_alXaO);
        ValueCmpOnFace cmp_alXaP p_alXaQ t_alXaR u_alXaS v_alXaT ->
          ValueCmpOnFace
            cmp_alXaP
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXaH `cast` <Co:3>) p_alXaQ)
            (case t_alXaR of { El s_alXdH t1_alXdI ->
             El
               ($fApplyRewriteRule_$s$capplySubst
                  (rho_alXaH `cast` <Co:12>) s_alXdH)
               ($fApplyExtLamInfo_$sapplySubstTerm
                  (rho_alXaH `cast` <Co:3>) t1_alXdI)
             })
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXaH `cast` <Co:3>) u_alXaS)
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXaH `cast` <Co:3>) v_alXaT);
        ElimCmp ps_alXaU fs_alXaV a_alXaW v_alXaX e1_alXaY e2_alXaZ ->
          ElimCmp
            ps_alXaU
            fs_alXaV
            (case a_alXaW of { El s_alXdH t_alXdI ->
             El
               ($fApplyRewriteRule_$s$capplySubst
                  (rho_alXaH `cast` <Co:12>) s_alXdH)
               ($fApplyExtLamInfo_$sapplySubstTerm
                  (rho_alXaH `cast` <Co:3>) t_alXdI)
             })
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXaH `cast` <Co:3>) v_alXaX)
            (map
               (\ ds_dm1Ar ->
                  case ds_dm1Ar of wild2_XeU {
                    Apply v1_alXay ->
                      Apply
                        (case rho_alXaH `cast` <Co:12> of wild3_XeQ {
                           __DEFAULT ->
                             case v1_alXay of { Arg a1_a3gXn a2_a3gXo ->
                             Arg
                               (case a1_a3gXn of
                                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                })
                               ($fApplyExtLamInfo_$sapplySubstTerm
                                  (wild3_XeQ `cast` <Co:7>) a2_a3gXo)
                             };
                           IdS -> v1_alXay
                         });
                    Proj ds1_dm1AZ ds2_dm1B0 -> wild2_XeU;
                    IApply x_alXaz y_alXaA r_alXaB ->
                      IApply
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXaH `cast` <Co:3>) x_alXaz)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXaH `cast` <Co:3>) y_alXaA)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXaH `cast` <Co:3>) r_alXaB)
                  })
               e1_alXaY)
            (map
               (\ ds_dm1Ar ->
                  case ds_dm1Ar of wild2_XeU {
                    Apply v1_alXay ->
                      Apply
                        (case rho_alXaH `cast` <Co:12> of wild3_XeQ {
                           __DEFAULT ->
                             case v1_alXay of { Arg a1_a3gXn a2_a3gXo ->
                             Arg
                               (case a1_a3gXn of
                                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                })
                               ($fApplyExtLamInfo_$sapplySubstTerm
                                  (wild3_XeQ `cast` <Co:7>) a2_a3gXo)
                             };
                           IdS -> v1_alXay
                         });
                    Proj ds1_dm1AZ ds2_dm1B0 -> wild2_XeU;
                    IApply x_alXaz y_alXaA r_alXaB ->
                      IApply
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXaH `cast` <Co:3>) x_alXaz)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXaH `cast` <Co:3>) y_alXaA)
                        ($fApplyExtLamInfo_$sapplySubstTerm
                           (rho_alXaH `cast` <Co:3>) r_alXaB)
                  })
               e2_alXaZ);
        SortCmp cmp_alXb0 s1_alXb1 s2_alXb2 ->
          SortCmp
            cmp_alXb0
            ($fApplyRewriteRule_$s$capplySubst
               (rho_alXaH `cast` <Co:12>) s1_alXb1)
            ($fApplyRewriteRule_$s$capplySubst
               (rho_alXaH `cast` <Co:12>) s2_alXb2);
        LevelCmp cmp_alXb3 l1_alXb4 l2_alXb5 ->
          LevelCmp
            cmp_alXb3
            (case l1_alXb4 of { Max n_alXdi as_alXdj ->
             Max
               n_alXdi
               (map
                  (\ ds_dm1IK ->
                     case ds_dm1IK of { Plus n1_alXde l_alXdf ->
                     Plus
                       n1_alXde
                       ($fApplyExtLamInfo_$sapplySubstTerm
                          (rho_alXaH `cast` <Co:3>) l_alXdf)
                     })
                  as_alXdj)
             })
            (case l2_alXb5 of { Max n_alXdi as_alXdj ->
             Max
               n_alXdi
               (map
                  (\ ds_dm1IK ->
                     case ds_dm1IK of { Plus n1_alXde l_alXdf ->
                     Plus
                       n1_alXde
                       ($fApplyExtLamInfo_$sapplySubstTerm
                          (rho_alXaH `cast` <Co:3>) l_alXdf)
                     })
                  as_alXdj)
             });
        HasBiggerSort s_alXbd ->
          HasBiggerSort
            ($fApplyRewriteRule_$s$capplySubst
               (rho_alXaH `cast` <Co:12>) s_alXbd);
        HasPTSRule a_alXbe s_alXbf ->
          HasPTSRule
            (case rho_alXaH `cast` <Co:15> of wild2_Xg0 {
               __DEFAULT ->
                 case a_alXbe of
                 { Dom ds_dm1xB ds1_dm1xC ds2_dm1xD ds3_dm1xE ds4_dm1xF ->
                 Dom
                   (case ds_dm1xB of
                    { ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U ds8_d3o7V ds9_d3o7W ->
                    ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U UnknownFVs ds9_d3o7W
                    })
                   ds1_dm1xC
                   ds2_dm1xD
                   (case ds3_dm1xE of {
                      Nothing -> Nothing;
                      Just a1_anJk ->
                        Just
                          ($fApplyExtLamInfo_$sapplySubstTerm
                             (wild2_Xg0 `cast` <Co:10>) a1_anJk)
                    })
                   (case ds4_dm1xF of { El s1_alXdH t_alXdI ->
                    El
                      ($fApplyRewriteRule_$s$capplySubst
                         (wild2_Xg0 `cast` <Co:12>) s1_alXdH)
                      ($fApplyExtLamInfo_$sapplySubstTerm
                         (wild2_Xg0 `cast` <Co:10>) t_alXdI)
                    })
                 };
               IdS -> a_alXbe
             })
            (case s_alXbf of {
               Abs x_alXar a1_alXas ->
                 Abs
                   x_alXar
                   ($fApplyRewriteRule_$s$capplySubst
                      (case rho_alXaH `cast` <Co:12> of wild3_Xj {
                         __DEFAULT -> Lift 1# wild3_Xj;
                         IdS -> IdS;
                         Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v 1#) rho1_add9T
                       })
                      a1_alXas);
               NoAbs x_alXau a1_alXav ->
                 NoAbs
                   x_alXau
                   ($fApplyRewriteRule_$s$capplySubst
                      (rho_alXaH `cast` <Co:12>) a1_alXav)
             });
        CheckDataSort q_alXbn s_alXbo ->
          CheckDataSort
            q_alXbn
            ($fApplyRewriteRule_$s$capplySubst
               (rho_alXaH `cast` <Co:12>) s_alXbo);
        CheckMetaInst m_alXbp -> wild1_Xul;
        CheckType t_alXbq ->
          CheckType
            (case t_alXbq of { El s_alXdH t1_alXdI ->
             El
               ($fApplyRewriteRule_$s$capplySubst
                  (rho_alXaH `cast` <Co:12>) s_alXdH)
               ($fApplyExtLamInfo_$sapplySubstTerm
                  (rho_alXaH `cast` <Co:3>) t1_alXdI)
             });
        UnBlock ds_dm1CC -> wild1_Xul;
        IsEmpty r_alXb6 a_alXb7 ->
          IsEmpty
            r_alXb6
            (case a_alXb7 of { El s_alXdH t_alXdI ->
             El
               ($fApplyRewriteRule_$s$capplySubst
                  (rho_alXaH `cast` <Co:12>) s_alXdH)
               ($fApplyExtLamInfo_$sapplySubstTerm
                  (rho_alXaH `cast` <Co:3>) t_alXdI)
             });
        CheckSizeLtSat t_alXb8 ->
          CheckSizeLtSat
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXaH `cast` <Co:3>) t_alXb8);
        FindInstance m_alXb9 cands_alXba ->
          FindInstance
            m_alXb9
            (case cands_alXba of {
               Nothing -> Nothing;
               Just a1_anJk ->
                 Just
                   (map
                      ($fSubstCandidate_$capplySubst (rho_alXaH `cast` <Co:7>)) a1_anJk)
             });
        CheckFunDef ds_dm1CD ds1_dm1CE ds2_dm1CF ds3_dm1CG -> wild1_Xul;
        UnquoteTactic t_alXbk h_alXbl g_alXbm ->
          UnquoteTactic
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXaH `cast` <Co:3>) t_alXbk)
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXaH `cast` <Co:3>) h_alXbl)
            (case g_alXbm of { El s_alXdH t1_alXdI ->
             El
               ($fApplyRewriteRule_$s$capplySubst
                  (rho_alXaH `cast` <Co:12>) s_alXdH)
               ($fApplyExtLamInfo_$sapplySubstTerm
                  (rho_alXaH `cast` <Co:3>) t1_alXdI)
             });
        CheckLockedVars a_alXbg b_alXbh c_alXbi d_alXbj ->
          CheckLockedVars
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXaH `cast` <Co:3>) a_alXbg)
            (case b_alXbh of { El s_alXdH t_alXdI ->
             El
               ($fApplyRewriteRule_$s$capplySubst
                  (rho_alXaH `cast` <Co:12>) s_alXdH)
               ($fApplyExtLamInfo_$sapplySubstTerm
                  (rho_alXaH `cast` <Co:3>) t_alXdI)
             })
            (case rho_alXaH `cast` <Co:12> of wild2_XeQ {
               __DEFAULT ->
                 case c_alXbi of { Arg a1_a3gXn a2_a3gXo ->
                 Arg
                   (case a1_a3gXn of
                    { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                    ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                    })
                   ($fApplyExtLamInfo_$sapplySubstTerm
                      (wild2_XeQ `cast` <Co:7>) a2_a3gXo)
                 };
               IdS -> c_alXbi
             })
            (case d_alXbj of { El s_alXdH t_alXdI ->
             El
               ($fApplyRewriteRule_$s$capplySubst
                  (rho_alXaH `cast` <Co:12>) s_alXdH)
               ($fApplyExtLamInfo_$sapplySubstTerm
                  (rho_alXaH `cast` <Co:3>) t_alXdI)
             });
        UsableAtModality cc_alXbr ms_alXbs mod_alXbt m_alXbu ->
          UsableAtModality
            cc_alXbr
            (case ms_alXbs of {
               Nothing -> Nothing;
               Just a1_anJk ->
                 Just
                   ($fApplyRewriteRule_$s$capplySubst
                      (rho_alXaH `cast` <Co:12>) a1_anJk)
             })
            mod_alXbt
            ($fApplyExtLamInfo_$sapplySubstTerm
               (rho_alXaH `cast` <Co:3>) m_alXbu)
      }

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstConstraint
  = C:Subst
      ($fDeBruijnTerm `cast` <Co:3>) $fSubstConstraint_$capplySubst

-- RHS size: {terms: 48, types: 58, coercions: 50, joins: 0/0}
$w$capplySubst3
  = \ w_smekN ww_smekR ww1_smekS ww2_smekT ->
      (# ww_smekR,
         $fApplyExtLamInfo_$sapplySubstTerm
           (w_smekN `cast` <Co:3>) ww1_smekS,
         case w_smekN `cast` <Co:15> of wild1_Xg0 {
           __DEFAULT ->
             case ww2_smekT of
             { Dom ds_dm1xB ds1_dm1xC ds2_dm1xD ds3_dm1xE ds4_dm1xF ->
             Dom
               (case ds_dm1xB of
                { ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U ds8_d3o7V ds9_d3o7W ->
                ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U UnknownFVs ds9_d3o7W
                })
               ds1_dm1xC
               ds2_dm1xD
               (case ds3_dm1xE of {
                  Nothing -> Nothing;
                  Just a1_anJk ->
                    Just
                      ($fApplyExtLamInfo_$sapplySubstTerm
                         (wild1_Xg0 `cast` <Co:10>) a1_anJk)
                })
               (case ds4_dm1xF of { El s_alXdH t_alXdI ->
                El
                  ($fApplyRewriteRule_$s$capplySubst
                     (wild1_Xg0 `cast` <Co:12>) s_alXdH)
                  ($fApplyExtLamInfo_$sapplySubstTerm
                     (wild1_Xg0 `cast` <Co:10>) t_alXdI)
                })
             };
           IdS -> ww2_smekT
         } #)

-- RHS size: {terms: 16, types: 21, coercions: 0, joins: 0/0}
$fSubstProblemEq_$capplySubst
  = \ w_smekN w1_smekO ->
      case w1_smekO of { ProblemEq ww1_smekR ww2_smekS ww3_smekT ->
      case $w$capplySubst3 w_smekN ww1_smekR ww2_smekS ww3_smekT of
      { (# ww5_smeq8, ww6_smeq9, ww7_smeqa #) ->
      ProblemEq ww5_smeq8 ww6_smeq9 ww7_smeqa
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
$fSubstProblemEq
  = C:Subst
      ($fDeBruijnTerm `cast` <Co:3>) $fSubstProblemEq_$capplySubst

-- RHS size: {terms: 3, types: 7, coercions: 0, joins: 0/0}
lvl327_rmk6t = reverse1 [] []

-- RHS size: {terms: 159, types: 175, coercions: 81, joins: 0/6}
$fApplyClause_$capply
  = \ cls_alXiz args_alXiM ->
      case cls_alXiz of
      { Clause rl_alXiA rf_alXiB tel_alXiC ps_alXiD b_alXiE t_alXiF
               catchall_alXiG exact_alXiH recursive_alXiI unreachable_alXiJ
               ell_alXiK wm_alXiL ->
      case $wlenAcc args_alXiM 0# of ww2_axAc { __DEFAULT ->
      case $wlenAcc ps_alXiD 0# of ww1_Xy4f { __DEFAULT ->
      case ># ww2_axAc ww1_Xy4f of {
        __DEFAULT ->
          let {
            n_sm4zf
              = case $w$csize tel_alXiC of ww_s92fc { __DEFAULT ->
                I# ww_s92fc
                } } in
          let {
            rps_sm4ze
              = case <# 0# ww2_axAc of {
                  __DEFAULT -> lvl327_rmk6t;
                  1# -> reverse1 ($wunsafeTake ww2_axAc ps_alXiD) []
                } } in
          let { rargs_sm4zd = map unArg (reverse1 args_alXiM []) } in
          let {
            rho_sm4zc = $smkSub_rmk6n id n_sm4zf rps_sm4ze rargs_sm4zd } in
          Clause
            rl_alXiA
            rf_alXiB
            (newTel_rmk6p n_sm4zf tel_alXiC rps_sm4ze rargs_sm4zd)
            (let {
               ds_sm4zn = $smkSub1_rmk6o dotP n_sm4zf rps_sm4ze rargs_sm4zd } in
             let {
               arg_sm62u
                 = \ w_smekZ ->
                     case w_smekZ of ww_smel1 { Arg ww3_smel2 ww4_smel3 ->
                     case ds_sm4zn `cast` <Co:20> of wild2_XeQ {
                       __DEFAULT ->
                         Arg
                           (case ww3_smel2 of
                            { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                            ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                            })
                           (case ww4_smel3 of { Named a1_a3gWE a2_a3gWF ->
                            Named
                              a1_a3gWE
                              ($fSubstPattern'_$capplySubst (wild2_XeQ `cast` <Co:14>) a2_a3gWF)
                            });
                       IdS -> ww_smel1
                     }
                     } } in
             case <=# ww2_axAc 0# of {
               __DEFAULT -> map arg_sm62u ($wunsafeDrop ww2_axAc ps_alXiD);
               1# -> map arg_sm62u ps_alXiD
             })
            (case b_alXiE of {
               Nothing -> Nothing;
               Just a1_anJk ->
                 Just ($fApplyExtLamInfo_$sapplySubstTerm rho_sm4zc a1_anJk)
             })
            (case t_alXiF of {
               Nothing -> Nothing;
               Just a1_anJk ->
                 Just
                   (case rho_sm4zc `cast` <Co:17> of wild3_XeQ {
                      __DEFAULT ->
                        case a1_anJk of { Arg a2_a3gXn a3_a3gXo ->
                        Arg
                          (case a2_a3gXn of
                           { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                           ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                           })
                          (case a3_a3gXo of { El s_alXdH t1_alXdI ->
                           El
                             ($fApplyRewriteRule_$s$capplySubst
                                (wild3_XeQ `cast` <Co:16>) s_alXdH)
                             ($fApplyExtLamInfo_$sapplySubstTerm
                                (wild3_XeQ `cast` <Co:14>) t1_alXdI)
                           })
                        };
                      IdS -> a1_anJk
                    })
             })
            catchall_alXiG
            exact_alXiH
            recursive_alXiI
            unreachable_alXiJ
            ell_alXiK
            wm_alXiL;
        1# -> lvl39_rmk0Z
      }
      }
      }
      }

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
$fApplyClause_$capplyE
  = \ t_alXjC es_alXjD ->
      case allApplyElims es_alXjD of {
        Nothing -> case $fApplyClause1 of wild2_00 { };
        Just v_aaOy -> $fApplyClause_$capply t_alXjC v_aaOy
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyClause
  = C:Apply $fApplyClause_$capply $fApplyClause_$capplyE

-- RHS size: {terms: 38, types: 56, coercions: 0, joins: 0/2}
$fApplyFunctionInverse'_$capply
  = \ ds_dm2aF args_alXhE ->
      case ds_dm2aF of {
        NotInjective -> NotInjective;
        Inverse inv_alXhF ->
          Inverse
            (let {
               lvl328_sm5qj
                 = \ ds1_dm29H -> $fApplyClause_$capply ds1_dm29H args_alXhE } in
             letrec {
               go15_a15wV
                 = \ ds1_a15wW ->
                     case ds1_a15wW of {
                       Bin dt_a15wY kx_a15wZ x_a15x0 l_a15x1 r_a15x2 ->
                         case go15_a15wV l_a15x1 of dt1_a15x4 { __DEFAULT ->
                         case go15_a15wV r_a15x2 of dt2_a15x5 { __DEFAULT ->
                         Bin
                           dt_a15wY kx_a15wZ (map lvl328_sm5qj x_a15x0) dt1_a15x4 dt2_a15x5
                         }
                         };
                       Tip -> Tip
                     }; } in
             go15_a15wV inv_alXhF)
      }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
$fApplyFunctionInverse'_$capplyE
  = \ t_alXhH es_alXhI ->
      $fApplyFunctionInverse'_$capply
        t_alXhH
        (case allApplyElims es_alXhI of {
           Nothing -> $fApplyFunctionInverse'1;
           Just v_aaOy -> v_aaOy
         })

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyFunctionInverse'
  = C:Apply
      $fApplyFunctionInverse'_$capply $fApplyFunctionInverse'_$capplyE

Rec {
-- RHS size: {terms: 404, types: 287, coercions: 0, joins: 0/3}
$fApplyDefinition_$capply1
  = \ d_alXjN ds_dm2nZ ->
      case ds_dm2nZ of wild1_XA3 {
        [] -> d_alXjN;
        : arg1_alXjQ args1_alXjR ->
          case d_alXjN of wild2_im25y {
            AxiomDefn ds1_im25z ->
              case ds1_im25z of { AxiomData axiomConstTransp2_im25C ->
              wild2_im25y
              };
            DataOrRecSigDefn ds1_im25k ->
              case ds1_im25k of { DataOrRecSigData datarecPars2_im25n ->
              DataOrRecSigDefn
                (DataOrRecSigData
                   (case datarecPars2_im25n of { I# x_aALc ->
                    case $wlenAcc wild1_XA3 0# of ww2_axAc { __DEFAULT ->
                    I# (-# x_aALc ww2_axAc)
                    }
                    }))
              };
            GeneralizableVar -> GeneralizableVar;
            AbstractDefn d1_alXjT ->
              AbstractDefn ($fApplyDefinition_$capply1 d1_alXjT wild1_XA3);
            FunctionDefn ds1_im1Tq ->
              case ds1_im1Tq of
              { FunctionData funClauses2_im1TJ funCompiled2_im1TK
                             funSplitTree2_im1TL funTreeless2_im1TM funCovering2_im1TN
                             funInv2_im1TO funMutual2_im1TP funAbstr2_im1TQ funProjection2_im1TR
                             funErasure2_im1TS funFlags2_im1TT funTerminates2_im1TU
                             funExtLam2_im1TV funWith2_im1TW funIsKanOp2_im1TX
                             funOpaque2_im1TY ->
              case funProjection2_im1TR of wild4_X9b {
                Left ds2_dm2zk ->
                  FunctionDefn
                    (FunctionData
                       (map
                          (\ ds3_dm29H -> $fApplyClause_$capply ds3_dm29H wild1_XA3)
                          funClauses2_im1TJ)
                       (case funCompiled2_im1TK of {
                          Nothing -> Nothing;
                          Just a1_anJk ->
                            Just ($fApplyCompiledClauses'_$capply a1_anJk wild1_XA3)
                        })
                       funSplitTree2_im1TL
                       funTreeless2_im1TM
                       (map
                          (\ ds3_dm29H -> $fApplyClause_$capply ds3_dm29H wild1_XA3)
                          funCovering2_im1TN)
                       ($fApplyFunctionInverse'_$capply funInv2_im1TO wild1_XA3)
                       funMutual2_im1TP
                       funAbstr2_im1TQ
                       wild4_X9b
                       funErasure2_im1TS
                       funFlags2_im1TT
                       funTerminates2_im1TU
                       (case funExtLam2_im1TV of {
                          Nothing -> Nothing;
                          Just a1_anJk ->
                            Just
                              (case a1_anJk of { ExtLamInfo ds3_im1Sp ds4_im1Sq ds5_im1Sr ->
                               case ds5_im1Sr of {
                                 Nothing -> ExtLamInfo ds3_im1Sp ds4_im1Sq Nothing;
                                 Just x_im1Sv ->
                                   case x_im1Sv of { System ww1_smhGM ww2_smhGN ->
                                   case $w$capply1 ww1_smhGM ww2_smhGN wild1_XA3 of
                                   { (# ww4_smepp, ww5_smepq #) ->
                                   ExtLamInfo
                                     ds3_im1Sp ds4_im1Sq (Just (System ww4_smepp ww5_smepq))
                                   }
                                   }
                               }
                               })
                        })
                       funWith2_im1TW
                       funIsKanOp2_im1TX
                       funOpaque2_im1TY);
                Right p0_alXk4 ->
                  case p0_alXk4 of
                  { Projection ds2_dm2Ay ds3_dm2Az ds4_dm2AA ds5_dm2AB ds6_dm2AC ->
                  case ds5_dm2AB of { I# x_aALc ->
                  case $wlenAcc wild1_XA3 0# of ww2_axAc { __DEFAULT ->
                  let { x1_a3Zs = -# x_aALc ww2_axAc } in
                  case <# x1_a3Zs 0# of {
                    __DEFAULT ->
                      case ># x1_a3Zs 0# of {
                        __DEFAULT ->
                          let { larg_sm4z1 = last1 arg1_alXjQ args1_alXjR } in
                          let { args'_sm4z0 = : larg_sm4z1 [] } in
                          FunctionDefn
                            (FunctionData
                               (map
                                  (\ ds7_dm29H -> $fApplyClause_$capply ds7_dm29H args'_sm4z0)
                                  funClauses2_im1TJ)
                               (case funCompiled2_im1TK of {
                                  Nothing -> Nothing;
                                  Just a1_anJk ->
                                    Just ($fApplyCompiledClauses'_$capply a1_anJk args'_sm4z0)
                                })
                               funSplitTree2_im1TL
                               funTreeless2_im1TM
                               (map
                                  (\ ds7_dm29H -> $fApplyClause_$capply ds7_dm29H args'_sm4z0)
                                  funCovering2_im1TN)
                               ($fApplyFunctionInverse'_$capply funInv2_im1TO args'_sm4z0)
                               funMutual2_im1TP
                               funAbstr2_im1TQ
                               (case larg_sm4z1 of { Arg ds7_d3o6D ds8_d3o6E ->
                                case ds8_d3o6E of {
                                  __DEFAULT -> lvl14_rmk0A;
                                  Var dt_dm2Iu ds9_dm2sZ ->
                                    case dt_dm2Iu of {
                                      __DEFAULT -> lvl14_rmk0A;
                                      0# ->
                                        case ds9_dm2sZ of {
                                          [] ->
                                            Right
                                              (Projection
                                                 ds2_dm2Ay
                                                 ds3_dm2Az
                                                 ds4_dm2AA
                                                 $fShowTelV1
                                                 ($fApplyProjLams_$capply ds6_dm2AC wild1_XA3));
                                          : ipv_sm3ms ipv1_sm3mt -> lvl14_rmk0A
                                        }
                                    }
                                }
                                })
                               funErasure2_im1TS
                               funFlags2_im1TT
                               funTerminates2_im1TU
                               (case funExtLam2_im1TV of {
                                  Nothing -> Nothing;
                                  Just a1_anJk ->
                                    Just
                                      (case a1_anJk of { ExtLamInfo ds7_im1Sp ds8_im1Sq ds9_im1Sr ->
                                       case ds9_im1Sr of {
                                         Nothing -> ExtLamInfo ds7_im1Sp ds8_im1Sq Nothing;
                                         Just x2_im1Sv -> case lvl20_rmk0G of wild10_00 { }
                                       }
                                       })
                                })
                               funWith2_im1TW
                               funIsKanOp2_im1TX
                               funOpaque2_im1TY);
                        1# ->
                          FunctionDefn
                            (FunctionData
                               funClauses2_im1TJ
                               funCompiled2_im1TK
                               funSplitTree2_im1TL
                               funTreeless2_im1TM
                               funCovering2_im1TN
                               funInv2_im1TO
                               funMutual2_im1TP
                               funAbstr2_im1TQ
                               (Right
                                  (Projection
                                     ds2_dm2Ay
                                     ds3_dm2Az
                                     ds4_dm2AA
                                     (I# x1_a3Zs)
                                     ($fApplyProjLams_$capply ds6_dm2AC wild1_XA3)))
                               funErasure2_im1TS
                               funFlags2_im1TT
                               funTerminates2_im1TU
                               funExtLam2_im1TV
                               funWith2_im1TW
                               funIsKanOp2_im1TX
                               funOpaque2_im1TY)
                      };
                    1# ->
                      FunctionDefn
                        (FunctionData
                           funClauses2_im1TJ
                           funCompiled2_im1TK
                           funSplitTree2_im1TL
                           funTreeless2_im1TM
                           funCovering2_im1TN
                           funInv2_im1TO
                           funMutual2_im1TP
                           funAbstr2_im1TQ
                           lvl25_rmk0L
                           funErasure2_im1TS
                           funFlags2_im1TT
                           funTerminates2_im1TU
                           funExtLam2_im1TV
                           funWith2_im1TW
                           funIsKanOp2_im1TX
                           funOpaque2_im1TY)
                  }
                  }
                  }
                  }
              }
              };
            DatatypeDefn ds1_im1WS ->
              case ds1_im1WS of
              { DatatypeData dataPars2_im1WV dataIxs2_im1WW dataClause2_im1WX
                             dataCons2_im1WY dataSort2_im1WZ dataMutual2_im1X0 dataAbstr2_im1X1
                             dataPathCons2_im1X2 dataTranspIx2_im1X3 dataTransp2_im1X4 ->
              DatatypeDefn
                (DatatypeData
                   (case dataPars2_im1WV of { I# x_aALc ->
                    case $wlenAcc wild1_XA3 0# of ww2_axAc { __DEFAULT ->
                    I# (-# x_aALc ww2_axAc)
                    }
                    })
                   dataIxs2_im1WW
                   (case dataClause2_im1WX of {
                      Nothing -> Nothing;
                      Just a1_anJk -> Just ($fApplyClause_$capply a1_anJk wild1_XA3)
                    })
                   dataCons2_im1WY
                   dataSort2_im1WZ
                   dataMutual2_im1X0
                   dataAbstr2_im1X1
                   dataPathCons2_im1X2
                   dataTranspIx2_im1X3
                   dataTransp2_im1X4)
              };
            RecordDefn ds1_im1Yc ->
              case ds1_im1Yc of
              { RecordData recPars2_im1Yf recClause2_im1Yg recConHead2_im1Yh
                           recNamedCon2_im1Yi recFields2_im1Yj recTel2_im1Yk recMutual2_im1Yl
                           recEtaEquality'1_im1Ym recPatternMatching2_im1Yn
                           recInduction2_im1Yo recTerminates2_im1Yp recAbstr2_im1Yq
                           recComp2_im1Yr ->
              RecordDefn
                (RecordData
                   (case recPars2_im1Yf of { I# x_aALc ->
                    case $wlenAcc wild1_XA3 0# of ww2_axAc { __DEFAULT ->
                    I# (-# x_aALc ww2_axAc)
                    }
                    })
                   (case recClause2_im1Yg of {
                      Nothing -> Nothing;
                      Just a1_anJk -> Just ($fApplyClause_$capply a1_anJk wild1_XA3)
                    })
                   recConHead2_im1Yh
                   recNamedCon2_im1Yi
                   recFields2_im1Yj
                   ($fApplyExtLamInfo_$s$capply recTel2_im1Yk wild1_XA3)
                   recMutual2_im1Yl
                   recEtaEquality'1_im1Ym
                   recPatternMatching2_im1Yn
                   recInduction2_im1Yo
                   recTerminates2_im1Yp
                   recAbstr2_im1Yq
                   recComp2_im1Yr)
              };
            ConstructorDefn ds1_im1Zv ->
              case ds1_im1Zv of
              { ConstructorData conPars2_im1ZJ conArity2_im1ZK conSrcCon2_im1ZL
                                conData2_im1ZM conAbstr2_im1ZN conComp2_im1ZO conProj2_im1ZP
                                conForced2_im1ZQ conErased2_im1ZR conErasure2_im1ZS
                                conInline2_im1ZT ->
              ConstructorDefn
                (ConstructorData
                   (case conPars2_im1ZJ of { I# x_aALc ->
                    case $wlenAcc wild1_XA3 0# of ww2_axAc { __DEFAULT ->
                    I# (-# x_aALc ww2_axAc)
                    }
                    })
                   conArity2_im1ZK
                   conSrcCon2_im1ZL
                   conData2_im1ZM
                   conAbstr2_im1ZN
                   conComp2_im1ZO
                   conProj2_im1ZP
                   conForced2_im1ZQ
                   conErased2_im1ZR
                   conErasure2_im1ZS
                   conInline2_im1ZT)
              };
            PrimitiveDefn ds1_im20N ->
              case ds1_im20N of
              { PrimitiveData primAbstr2_im20Q primName2_im20R primClauses2_im20S
                              primInv2_im20T primCompiled2_im20U primOpaque2_im20V ->
              PrimitiveDefn
                (PrimitiveData
                   primAbstr2_im20Q
                   primName2_im20R
                   (map
                      (\ ds2_dm29H -> $fApplyClause_$capply ds2_dm29H wild1_XA3)
                      primClauses2_im20S)
                   primInv2_im20T
                   primCompiled2_im20U
                   primOpaque2_im20V)
              };
            PrimitiveSortDefn ipv_sm3MH ->
              case ipv_sm3MH of
              { PrimitiveSortData primSortName2_im24B primSortSort2_im24C ->
              wild2_im25y
              }
          }
      }
end Rec }

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
$fApplyDefn_$capplyE
  = \ t_alXkh es_alXki ->
      case allApplyElims es_alXki of {
        Nothing -> case $fApplyDefn1 of wild2_00 { };
        Just v_aaOy -> $fApplyDefinition_$capply1 t_alXkh v_aaOy
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyDefn
  = C:Apply $fApplyDefinition_$capply1 $fApplyDefn_$capplyE

-- RHS size: {terms: 49, types: 35, coercions: 0, joins: 0/0}
$fApplyDefinition_$capply
  = \ ds_dm2E4 args_alXlf ->
      case ds_dm2E4 of
      { Defn info_alXkW x_alXkX t_alXkY pol_alXkZ occ_alXl0 gens_alXl1
             gpars_alXl2 df_alXl3 m_alXl4 c_alXl5 inst_alXl6 copy_alXl7 ma_alXl8
             nc_alXl9 inj_alXla copat_alXlb blk_alXlc lang_alXld d_alXle ->
      Defn
        info_alXkW
        x_alXkX
        (piApply t_alXkY args_alXlf)
        ($fApplyDefinition_$capply4 pol_alXkZ args_alXlf)
        ($fApplyDefinition_$capply3 occ_alXl0 args_alXlf)
        ($fApplyDefinition_$capply2 gens_alXl1 args_alXlf)
        (case $wlenAcc args_alXlf 0# of ww2_axAc { __DEFAULT ->
         case <=# ww2_axAc 0# of {
           __DEFAULT -> $wunsafeDrop ww2_axAc gpars_alXl2;
           1# -> gpars_alXl2
         }
         })
        df_alXl3
        m_alXl4
        c_alXl5
        inst_alXl6
        copy_alXl7
        ma_alXl8
        nc_alXl9
        inj_alXla
        copat_alXlb
        blk_alXlc
        lang_alXld
        ($fApplyDefinition_$capply1 d_alXle args_alXlf)
      }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
$fApplyDefinition_$capplyE
  = \ t_alXlg es_alXlh ->
      $fApplyDefinition_$capply
        t_alXlg
        (case allApplyElims es_alXlh of {
           Nothing -> $fApplyDefinition1;
           Just v_aaOy -> v_aaOy
         })

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyDefinition
  = C:Apply $fApplyDefinition_$capply $fApplyDefinition_$capplyE

Rec {
-- RHS size: {terms: 167, types: 184, coercions: 99, joins: 1/5}
$w$capplySubst5
  = \ @ a_smelT ww_smem0 w_smelV w1_smelW w2_smelX ->
      case w2_smelX of wild1_XlS {
        Univ u_alXdp n_alXdq ->
          Univ
            u_alXdp
            (case n_alXdq of { Max n1_alXdi as_alXdj ->
             Max
               n1_alXdi
               (map
                  ($fSubstLevel'_$capplySubst1 w_smelV (w1_smelW `cast` <Co:9>))
                  as_alXdj)
             });
        Inf u_alXdr n_alXds -> wild1_XlS;
        SizeUniv -> SizeUniv;
        LockUniv -> LockUniv;
        LevelUniv -> LevelUniv;
        IntervalUniv -> IntervalUniv;
        PiSort a1_alXdt s1_alXdu s2_alXdv ->
          join {
            $j_smf8p s4_sm4IR
              = let {
                  s5_sm4IS = $w$capplySubst5 @~ <Co:1> w_smelV w1_smelW s1_alXdu } in
                case $wpiSort' (s5_sm4IS `cast` <Co:2>) (s4_sm4IR `cast` <Co:3>)
                of {
                  Left x_acvT ->
                    (PiSort
                       (case w1_smelW `cast` <Co:10> of wild3_Xg0 {
                          __DEFAULT ->
                            case a1_alXdt of
                            { Dom ds_dm1xB ds1_dm1xC ds2_dm1xD ds3_dm1xE ds4_dm1xF ->
                            (Dom
                               (case ds_dm1xB of
                                { ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U ds8_d3o7V ds9_d3o7W ->
                                ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U UnknownFVs ds9_d3o7W
                                })
                               ds1_dm1xC
                               ds2_dm1xD
                               (case ds3_dm1xE of {
                                  Nothing -> Nothing;
                                  Just a2_anJk ->
                                    Just (applySubst w_smelV (wild3_Xg0 `cast` <Co:5>) a2_anJk)
                                })
                               (applySubst w_smelV (wild3_Xg0 `cast` <Co:5>) ds4_dm1xF))
                            `cast` <Co:3>
                            };
                          IdS -> a1_alXdt `cast` <Co:3>
                        })
                       (s5_sm4IS `cast` <Co:2>)
                       (s4_sm4IR `cast` <Co:3>))
                    `cast` <Co:3>;
                  Right y_acvV -> y_acvV `cast` <Co:3>
                } } in
          case s2_alXdv of {
            Abs x_alXar a2_alXas ->
              jump $j_smf8p
                (Abs
                   x_alXar
                   ($w$capplySubst5
                      @~ <Co:1>
                      w_smelV
                      (case w1_smelW of wild3_Xj {
                         __DEFAULT -> Lift 1# wild3_Xj;
                         IdS -> IdS;
                         Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v 1#) rho1_add9T
                       })
                      a2_alXas));
            NoAbs x_alXau a2_alXav ->
              jump $j_smf8p
                (NoAbs
                   x_alXau ($w$capplySubst5 @~ <Co:1> w_smelV w1_smelW a2_alXav))
          };
        FunSort s1_alXdw s2_alXdx ->
          let {
            a1_sm4IX = $w$capplySubst5 @~ <Co:1> w_smelV w1_smelW s1_alXdw } in
          let {
            b_sm4IW = $w$capplySubst5 @~ <Co:1> w_smelV w1_smelW s2_alXdx } in
          case funSort' (a1_sm4IX `cast` <Co:2>) (b_sm4IW `cast` <Co:2>) of {
            Left x_acvT ->
              (FunSort (a1_sm4IX `cast` <Co:2>) (b_sm4IW `cast` <Co:2>))
              `cast` <Co:3>;
            Right y_acvV -> y_acvV `cast` <Co:3>
          };
        UnivSort s_alXdy ->
          let {
            s1_sm4IZ = $w$capplySubst5 @~ <Co:1> w_smelV w1_smelW s_alXdy } in
          case univSort' (s1_sm4IZ `cast` <Co:2>) of {
            Left x_acvT -> (UnivSort (s1_sm4IZ `cast` <Co:2>)) `cast` <Co:3>;
            Right y_acvV -> y_acvV `cast` <Co:3>
          };
        MetaS dt_dm2In dt1_dm2Io es_alXdA ->
          MetaS
            dt_dm2In
            dt1_dm2Io
            (map
               ($fSubstElim'_$capplySubst w_smelV (w1_smelW `cast` <Co:9>))
               es_alXdA);
        DefS d_alXdB es_alXdC ->
          DefS
            d_alXdB
            (map
               ($fSubstElim'_$capplySubst w_smelV (w1_smelW `cast` <Co:9>))
               es_alXdC);
        DummyS ds_dm1Oh -> wild1_XlS
      }
end Rec }

-- RHS size: {terms: 12, types: 28, coercions: 1, joins: 0/0}
$fSubstSort'_$capplySubst
  = \ @ a_smelT w_smelU w1_smelV w2_smelW w3_smelX ->
      case w_smelU of { MkCoercible ww1_smem0 ->
      $w$capplySubst5 @~ <Co:1> w1_smelV w2_smelW w3_smelX
      }

-- RHS size: {terms: 24, types: 54, coercions: 18, joins: 0/0}
$fSubstType''_$capplySubst
  = \ @ a_smem3
      @ b_smem4
      w_smem5
      w1_smem6
      w2_smem7
      w3_smem8
      w4_smem9
      w5_smema ->
      case w3_smem8 of { Eq# ww1_smemd ->
      case w5_smema of { El ww3_smemh ww4_smemi ->
      El
        ($fSubstSort'_$capplySubst
           w_smem5 w1_smem6 (w4_smem9 `cast` <Co:10>) ww3_smemh)
        (applySubst w2_smem7 (w4_smem9 `cast` <Co:8>) ww4_smemi)
      }
      }

-- RHS size: {terms: 18, types: 41, coercions: 5, joins: 0/0}
$fSubstType''
  = \ @ a_alZ2p
      @ b_alZ2q
      $dCoercible_alZ2r
      $dSubst1_alZ2s
      $dSubst2_alZ2t
      $d~1_alZ2u ->
      C:Subst
        (case eq_sel $d~1_alZ2u of co_alZOv { __DEFAULT ->
         ($p1Subst $dSubst1_alZ2s) `cast` <Co:5>
         })
        ($fSubstType''_$capplySubst
           $dCoercible_alZ2r $dSubst1_alZ2s $dSubst2_alZ2t $d~1_alZ2u)

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 10, joins: 0/0}
$fSubstBraveTerm
  = C:Subst
      ($fDeBruijnBraveTerm `cast` <Co:3>)
      ($fSubstBraveTerm_$sapplySubstTerm `cast` <Co:7>)

-- RHS size: {terms: 243, types: 233, coercions: 230, joins: 0/2}
$fSubstBraveTerm_$sapplySubstTerm
  = \ ds_dm0vZ t_alXnD ->
      case ds_dm0vZ of wild1_XlL {
        __DEFAULT ->
          let {
            lvl328_sm52O
              = \ ds1_dm1Ar ->
                  case ds1_dm1Ar of wild2_XeU {
                    Apply v_alXay ->
                      Apply
                        (case wild1_XlL `cast` <Co:9> of wild3_XeQ {
                           __DEFAULT ->
                             case v_alXay of { Arg a1_a3gXn a2_a3gXo ->
                             Arg
                               (case a1_a3gXn of
                                { ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY ds5_d3pmZ ds6_d3pn0 ->
                                ArgInfo ds2_d3pmW ds3_d3pmX ds4_d3pmY UnknownFVs ds6_d3pn0
                                })
                               ($fSubstBraveTerm_$sapplySubstTerm
                                  (wild3_XeQ `cast` <Co:7>) a2_a3gXo)
                             };
                           IdS -> v_alXay
                         });
                    Proj ds2_dm1AZ ds3_dm1B0 -> wild2_XeU;
                    IApply x_alXaz y_alXaA r_alXaB ->
                      IApply
                        ($fSubstBraveTerm_$sapplySubstTerm wild1_XlL x_alXaz)
                        ($fSubstBraveTerm_$sapplySubstTerm wild1_XlL y_alXaA)
                        ($fSubstBraveTerm_$sapplySubstTerm wild1_XlL r_alXaB)
                  } } in
          case t_alXnD `cast` <Co:1> of wild2_X79 {
            Var dt_dm2HA es_alXnN ->
              $fApplyBraveTerm_$sapplyTermE
                $fApplyBraveTerm1
                ($wlookupS $fSubstBraveTerm @~ <Co:1> wild1_XlL (I# dt_dm2HA))
                ((map lvl328_sm52O (es_alXnN `cast` <Co:4>)) `cast` <Co:3>);
            Lam h_alXnO m_alXnP ->
              (Lam
                 h_alXnO
                 (case m_alXnP `cast` <Co:3> of {
                    Abs x_alXar a_alXas ->
                      (Abs
                         x_alXar
                         (case wild1_XlL `cast` <Co:4> of wild4_Xj {
                            __DEFAULT ->
                              $fSubstBraveTerm_$sapplySubstTerm
                                ((Lift 1# wild4_Xj) `cast` <Co:3>) a_alXas;
                            IdS ->
                              $fSubstBraveTerm_$sapplySubstTerm (IdS `cast` <Co:3>) a_alXas;
                            Lift dt_dde2v rho1_add9T ->
                              $fSubstBraveTerm_$sapplySubstTerm
                                ((Lift (+# dt_dde2v 1#) rho1_add9T) `cast` <Co:3>) a_alXas
                          }))
                      `cast` <Co:2>;
                    NoAbs x_alXau a_alXav ->
                      (NoAbs
                         x_alXau ($fSubstBraveTerm_$sapplySubstTerm wild1_XlL a_alXav))
                      `cast` <Co:2>
                  }))
              `cast` <Co:2>;
            Lit l_alXnX -> wild2_X79 `cast` <Co:2>;
            Def f4_alXnQ es_alXnR ->
              (defApp
                 f4_alXnQ
                 []
                 ((map lvl328_sm52O (es_alXnR `cast` <Co:4>)) `cast` <Co:3>))
              `cast` <Co:2>;
            Con c_alXnS ci_alXnT vs_alXnU ->
              (Con
                 c_alXnS
                 ci_alXnT
                 ((map lvl328_sm52O (vs_alXnU `cast` <Co:4>)) `cast` <Co:3>))
              `cast` <Co:2>;
            Pi a_alXnZ b_alXo0 ->
              (Pi
                 (case wild1_XlL `cast` <Co:12> of wild3_Xg0 {
                    __DEFAULT ->
                      case a_alXnZ `cast` <Co:8> of
                      { Dom ds1_dm1xB ds2_dm1xC ds3_dm1xD ds4_dm1xE ds5_dm1xF ->
                      (Dom
                         (case ds1_dm1xB of
                          { ArgInfo ds6_d3o7S ds7_d3o7T ds8_d3o7U ds9_d3o7V ds10_d3o7W ->
                          ArgInfo ds6_d3o7S ds7_d3o7T ds8_d3o7U UnknownFVs ds10_d3o7W
                          })
                         ds2_dm1xC
                         ds3_dm1xD
                         (case ds4_dm1xE of {
                            Nothing -> Nothing;
                            Just a1_anJk ->
                              Just
                                ($fSubstBraveTerm_$sapplySubstTerm
                                   (wild3_Xg0 `cast` <Co:10>) a1_anJk)
                          })
                         (case ds5_dm1xF of { El s_alXdH t1_alXdI ->
                          El
                            ($w$capplySubst5
                               @~ <Co:1> $fSubstBraveTerm (wild3_Xg0 `cast` <Co:12>) s_alXdH)
                            ($fSubstBraveTerm_$sapplySubstTerm
                               (wild3_Xg0 `cast` <Co:10>) t1_alXdI)
                          }))
                      `cast` <Co:5>
                      };
                    IdS -> a_alXnZ
                  })
                 (case b_alXo0 `cast` <Co:6> of {
                    Abs x_alXar a1_alXas ->
                      (Abs
                         x_alXar
                         (case a1_alXas of { El s_alXdH t1_alXdI ->
                          let {
                            rho_sm4Ii
                              = case wild1_XlL `cast` <Co:10> of wild5_Xj {
                                  __DEFAULT -> Lift 1# wild5_Xj;
                                  IdS -> IdS;
                                  Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v 1#) rho1_add9T
                                } } in
                          El
                            ($w$capplySubst5
                               @~ <Co:1> $fSubstBraveTerm (rho_sm4Ii `cast` <Co:10>) s_alXdH)
                            ($fSubstBraveTerm_$sapplySubstTerm
                               (rho_sm4Ii `cast` <Co:8>) t1_alXdI)
                          }))
                      `cast` <Co:4>;
                    NoAbs x_alXau a1_alXav ->
                      (NoAbs
                         x_alXau
                         (case a1_alXav of { El s_alXdH t1_alXdI ->
                          El
                            ($w$capplySubst5
                               @~ <Co:1> $fSubstBraveTerm (wild1_XlL `cast` <Co:9>) s_alXdH)
                            ($fSubstBraveTerm_$sapplySubstTerm wild1_XlL t1_alXdI)
                          }))
                      `cast` <Co:4>
                  }))
              `cast` <Co:2>;
            Sort s_alXo1 ->
              (Sort
                 (($w$capplySubst5
                     @~ <Co:1>
                     $fSubstBraveTerm
                     (wild1_XlL `cast` <Co:9>)
                     (s_alXo1 `cast` <Co:3>))
                  `cast` <Co:2>))
              `cast` <Co:2>;
            Level l_alXnY ->
              case l_alXnY `cast` <Co:3> of { Max n_alXdi as_alXdj ->
              ($wlevelTm
                 n_alXdi
                 ((map
                     (\ ds1_dm1IK ->
                        case ds1_dm1IK of { Plus n1_alXde l1_alXdf ->
                        Plus
                          n1_alXde ($fSubstBraveTerm_$sapplySubstTerm wild1_XlL l1_alXdf)
                        })
                     as_alXdj)
                  `cast` <Co:3>))
              `cast` <Co:2>
              };
            MetaV dt_dm2HB dt1_dm2HC es_alXnW ->
              (MetaV
                 dt_dm2HB
                 dt1_dm2HC
                 ((map lvl328_sm52O (es_alXnW `cast` <Co:4>)) `cast` <Co:3>))
              `cast` <Co:2>;
            DontCare mv_alXo2 ->
              case ($fSubstBraveTerm_$sapplySubstTerm
                      wild1_XlL (mv_alXo2 `cast` <Co:2>))
                   `cast` <Co:1>
              of wild3_XJK {
                __DEFAULT -> (DontCare wild3_XJK) `cast` <Co:2>;
                DontCare ds1_d8PPv -> wild3_XJK `cast` <Co:2>
              };
            Dummy s_alXo3 es_alXo4 ->
              (Dummy
                 s_alXo3
                 ((map lvl328_sm52O (es_alXo4 `cast` <Co:4>)) `cast` <Co:3>))
              `cast` <Co:2>
          };
        IdS -> t_alXnD
      }

-- RHS size: {terms: 8, types: 7, coercions: 0, joins: 0/0}
$fApplyBraveTerm_$capply
  = \ t1_add8K args_add8L ->
      $fApplyBraveTerm_$sapplyTermE
        $fApplyBraveTerm1 t1_add8K (map Apply args_add8L)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fApplyBraveTerm_$capplyE
  = $fApplyBraveTerm_$sapplyTermE $fApplyBraveTerm1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fApplyBraveTerm
  = C:Apply $fApplyBraveTerm_$capply $fApplyBraveTerm_$capplyE

-- RHS size: {terms: 132, types: 95, coercions: 53, joins: 0/0}
$fApplyBraveTerm_$sapplyTermE
  = \ err'_alXlO m_alXlP ds_dm0Cy ->
      case ds_dm0Cy of wild1_XmK {
        [] -> m_alXlP;
        : ipv_sm36K ipv1_sm36L ->
          case m_alXlP `cast` <Co:1> of wild2_X6Z {
            Var dt_dm2HD es'_alXm0 ->
              (Var dt_dm2HD (++ es'_alXm0 wild1_XmK)) `cast` <Co:2>;
            Lam ds1_dm0KB b_alXm6 ->
              case ipv_sm36K of {
                Apply a_alXm7 ->
                  case b_alXm6 `cast` <Co:3> of {
                    Abs ds2_dddFd v_addbA ->
                      $fApplyBraveTerm_$sapplyTermE
                        $fApplyBraveTerm1
                        ($fSubstBraveTerm_$sapplySubstTerm
                           ((:#
                               (case a_alXm7 of { Arg ds3_d3o6D ds4_d3o6E ->
                                ds4_d3o6E `cast` <Co:6>
                                })
                               IdS)
                            `cast` <Co:3>)
                           v_addbA)
                        ipv1_sm36L;
                    NoAbs ds2_dddFe v_addbC ->
                      $fApplyBraveTerm_$sapplyTermE $fApplyBraveTerm1 v_addbC ipv1_sm36L
                  };
                Proj ipv2_sm36S ipv3_sm36T ->
                  (err'_alXlO lvl124_rmk2v wild2_X6Z wild1_XmK) `cast` <Co:2>;
                IApply ds2_dm0FP ds3_dm0FQ a_alXm9 ->
                  case b_alXm6 `cast` <Co:3> of {
                    Abs ds4_dddFd v_addbA ->
                      $fApplyBraveTerm_$sapplyTermE
                        $fApplyBraveTerm1
                        ($fSubstBraveTerm_$sapplySubstTerm
                           ((:# (a_alXm9 `cast` <Co:6>) IdS) `cast` <Co:3>) v_addbA)
                        ipv1_sm36L;
                    NoAbs ds4_dddFe v_addbC ->
                      $fApplyBraveTerm_$sapplyTermE $fApplyBraveTerm1 v_addbC ipv1_sm36L
                  }
              };
            Lit ds1_dm0KC ->
              (err'_alXlO lvl120_rmk2r wild2_X6Z wild1_XmK) `cast` <Co:2>;
            Def f4_alXm1 es'_alXm2 ->
              (defApp f4_alXm1 es'_alXm2 wild1_XmK) `cast` <Co:2>;
            Con c_alXm3 ci_alXm4 args_alXm5 ->
              ($wconApp
                 @~ <Co:1>
                 $fApplyBraveTerm
                 err'_alXlO
                 c_alXm3
                 ci_alXm4
                 args_alXm5
                 wild1_XmK)
              `cast` <Co:2>;
            Pi ds1_dm0KE ds2_dm0KF ->
              (err'_alXlO lvl116_rmk2n wild2_X6Z wild1_XmK) `cast` <Co:2>;
            Sort s_alXmd ->
              (Sort
                 (case s_alXmd of {
                    __DEFAULT -> $fApplySort'1;
                    MetaS dt_dm2Iw dt1_dm2Ix es'_alXlt ->
                      MetaS dt_dm2Iw dt1_dm2Ix (++ es'_alXlt wild1_XmK);
                    DefS d_alXlu es'_alXlv -> DefS d_alXlu (++ es'_alXlv wild1_XmK)
                  }))
              `cast` <Co:2>;
            Level ds1_dm0KD ->
              (err'_alXlO lvl112_rmk2j wild2_X6Z wild1_XmK) `cast` <Co:2>;
            MetaV dt_dm2HE dt1_dm2HF es'_alXmc ->
              (MetaV dt_dm2HE dt1_dm2HF (++ es'_alXmc wild1_XmK)) `cast` <Co:2>;
            DontCare mv_alXmg ->
              case ($fApplyBraveTerm_$sapplyTermE
                      $fApplyBraveTerm1 (mv_alXmg `cast` <Co:2>) wild1_XmK)
                   `cast` <Co:1>
              of wild3_XJK {
                __DEFAULT -> (DontCare wild3_XJK) `cast` <Co:2>;
                DontCare ds1_d8PPv -> wild3_XJK `cast` <Co:2>
              };
            Dummy s_alXme es'_alXmf ->
              (Dummy s_alXme (++ es'_alXmf wild1_XmK)) `cast` <Co:2>
          }
      }
end Rec }

-- RHS size: {terms: 133, types: 120, coercions: 33, joins: 0/0}
$wapplyTermE
  = \ @ t_smemu
      ww_smemD
      w_smemw
      ww1_smemH
      ww2_smemL
      w1_smemy
      w2_smemz
      w3_smemA ->
      case w3_smemA of wild1_XoT {
        [] -> w2_smemz;
        : ipv_sm38o ipv1_sm38p ->
          case w2_smemz `cast` <Co:2> of wild2_X73 {
            Var dt_dm2HD es'_alXm0 ->
              (Var dt_dm2HD (++ es'_alXm0 wild1_XoT)) `cast` <Co:1>;
            Lam ds_dm0KB b_alXm6 ->
              case ipv_sm38o of {
                Apply a_alXm7 ->
                  applyE
                    w_smemw
                    (case b_alXm6 `cast` <Co:2> of {
                       Abs ds1_dddFd v_addbA ->
                         applySubst
                           ww1_smemH
                           (:#
                              (case a_alXm7 of { Arg ds2_d3o6D ds3_d3o6E ->
                               ds3_d3o6E `cast` <Co:5>
                               })
                              IdS)
                           v_addbA;
                       NoAbs ds1_dddFe v_addbC -> v_addbC
                     })
                    ipv1_sm38p;
                Proj ipv2_sm38x ipv3_sm38y ->
                  (w1_smemy lvl124_rmk2v wild2_X73 wild1_XoT) `cast` <Co:1>;
                IApply ds1_dm0FP ds2_dm0FQ a_alXm9 ->
                  applyE
                    w_smemw
                    (case b_alXm6 `cast` <Co:2> of {
                       Abs ds3_dddFd v_addbA ->
                         applySubst ww1_smemH (:# (a_alXm9 `cast` <Co:5>) IdS) v_addbA;
                       NoAbs ds3_dddFe v_addbC -> v_addbC
                     })
                    ipv1_sm38p
              };
            Lit ds_dm0KC ->
              (w1_smemy lvl120_rmk2r wild2_X73 wild1_XoT) `cast` <Co:1>;
            Def f4_alXm1 es'_alXm2 ->
              (defApp f4_alXm1 es'_alXm2 wild1_XoT) `cast` <Co:1>;
            Con c_alXm3 ci_alXm4 args_alXm5 ->
              ($wconApp
                 @~ <Co:2> w_smemw w1_smemy c_alXm3 ci_alXm4 args_alXm5 wild1_XoT)
              `cast` <Co:1>;
            Pi ds_dm0KE ds1_dm0KF ->
              (w1_smemy lvl116_rmk2n wild2_X73 wild1_XoT) `cast` <Co:1>;
            Sort s_alXmd ->
              (Sort
                 (case s_alXmd of {
                    __DEFAULT -> $fApplySort'1;
                    MetaS dt_dm2Iw dt1_dm2Ix es'_alXlt ->
                      MetaS dt_dm2Iw dt1_dm2Ix (++ es'_alXlt wild1_XoT);
                    DefS d_alXlu es'_alXlv -> DefS d_alXlu (++ es'_alXlv wild1_XoT)
                  }))
              `cast` <Co:1>;
            Level ds_dm0KD ->
              (w1_smemy lvl112_rmk2j wild2_X73 wild1_XoT) `cast` <Co:1>;
            MetaV dt_dm2HE dt1_dm2HF es'_alXmc ->
              (MetaV dt_dm2HE dt1_dm2HF (++ es'_alXmc wild1_XoT)) `cast` <Co:1>;
            DontCare mv_alXmg ->
              case (applyE w_smemw (mv_alXmg `cast` <Co:1>) wild1_XoT)
                   `cast` <Co:2>
              of wild3_XJK {
                __DEFAULT -> (DontCare wild3_XJK) `cast` <Co:1>;
                DontCare ds_d8PPv -> wild3_XJK `cast` <Co:1>
              };
            Dummy s_alXme es'_alXmf ->
              (Dummy s_alXme (++ es'_alXmf wild1_XoT)) `cast` <Co:1>
          }
      }

-- RHS size: {terms: 22, types: 54, coercions: 2, joins: 0/0}
applyTermE
  = \ @ t_smemu
      w_smemv
      w1_smemw
      w2_smemx
      w3_smemy
      w4_smemz
      w5_smemA ->
      case w_smemv of { MkCoercible ww1_smemD ->
      case w2_smemx of { (ww3_smemH, ww4_smemI) ->
      case ww4_smemI of { Eq# ww6_smemL ->
      $wapplyTermE
        @~ <Co:1> w1_smemw ww3_smemH @~ <Co:1> w3_smemy w4_smemz w5_smemA
      }
      }
      }

-- RHS size: {terms: 10, types: 13, coercions: 0, joins: 0/0}
$fSubstSort'
  = \ @ a_alZ03 $dCoercible_alZ04 $dSubst1_alZ05 ->
      C:Subst
        ($fSubstSort'_$cp1Subst $dCoercible_alZ04 $dSubst1_alZ05)
        ($fSubstSort'_$capplySubst $dCoercible_alZ04 $dSubst1_alZ05)

-- RHS size: {terms: 222, types: 236, coercions: 257, joins: 0/1}
$wapplySubstTerm
  = \ @ t_smemU
      ww_smen2
      ww1_smen6
      ww2_smena
      w_smemX
      w1_smemY
      w2_smemZ ->
      case w1_smemY of wild1_Xle {
        __DEFAULT ->
          case w2_smemZ `cast` <Co:1> of wild2_X17H {
            Var dt_dm2HA es_alXnN ->
              applyE
                w_smemX
                ($wlookupS ww1_smen6 @~ <Co:1> wild1_Xle (I# dt_dm2HA))
                ((map
                    ($fSubstElim'_$capplySubst ww1_smen6 (wild1_Xle `cast` <Co:9>))
                    (es_alXnN `cast` <Co:4>))
                 `cast` <Co:3>);
            Lam h_alXnO m_alXnP ->
              (Lam
                 h_alXnO
                 (case m_alXnP `cast` <Co:3> of {
                    Abs x_alXar a_alXas ->
                      (Abs
                         x_alXar
                         (applySubst
                            ww1_smen6
                            (case wild1_Xle `cast` <Co:4> of wild4_Xj {
                               __DEFAULT -> Lift 1# wild4_Xj;
                               IdS -> IdS;
                               Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v 1#) rho1_add9T
                             })
                            a_alXas))
                      `cast` <Co:2>;
                    NoAbs x_alXau a_alXav ->
                      (NoAbs
                         x_alXau (applySubst ww1_smen6 (wild1_Xle `cast` <Co:4>) a_alXav))
                      `cast` <Co:2>
                  }))
              `cast` <Co:2>;
            Lit l_alXnX -> wild2_X17H `cast` <Co:2>;
            Def f4_alXnQ es_alXnR ->
              (defApp
                 f4_alXnQ
                 []
                 ((map
                     ($fSubstElim'_$capplySubst ww1_smen6 (wild1_Xle `cast` <Co:9>))
                     (es_alXnR `cast` <Co:4>))
                  `cast` <Co:3>))
              `cast` <Co:2>;
            Con c_alXnS ci_alXnT vs_alXnU ->
              (Con
                 c_alXnS
                 ci_alXnT
                 ((map
                     ($fSubstElim'_$capplySubst ww1_smen6 (wild1_Xle `cast` <Co:9>))
                     (vs_alXnU `cast` <Co:4>))
                  `cast` <Co:3>))
              `cast` <Co:2>;
            Pi a_alXnZ b_alXo0 ->
              (Pi
                 (case wild1_Xle `cast` <Co:12> of wild3_Xg0 {
                    __DEFAULT ->
                      case a_alXnZ `cast` <Co:8> of
                      { Dom ds_dm1xB ds1_dm1xC ds2_dm1xD ds3_dm1xE ds4_dm1xF ->
                      (Dom
                         (case ds_dm1xB of
                          { ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U ds8_d3o7V ds9_d3o7W ->
                          ArgInfo ds5_d3o7S ds6_d3o7T ds7_d3o7U UnknownFVs ds9_d3o7W
                          })
                         ds1_dm1xC
                         ds2_dm1xD
                         (case ds3_dm1xE of {
                            Nothing -> Nothing;
                            Just a1_anJk ->
                              Just (applySubst ww1_smen6 (wild3_Xg0 `cast` <Co:7>) a1_anJk)
                          })
                         (case ds4_dm1xF of { El s_alXdH t1_alXdI ->
                          El
                            ($w$capplySubst5
                               @~ <Co:1> ww1_smen6 (wild3_Xg0 `cast` <Co:12>) s_alXdH)
                            (applySubst ww1_smen6 (wild3_Xg0 `cast` <Co:7>) t1_alXdI)
                          }))
                      `cast` <Co:5>
                      };
                    IdS -> a_alXnZ
                  })
                 (case b_alXo0 `cast` <Co:6> of {
                    Abs x_alXar a1_alXas ->
                      (Abs
                         x_alXar
                         (case a1_alXas of { El s_alXdH t1_alXdI ->
                          let {
                            rho_alXdG
                              = case wild1_Xle `cast` <Co:10> of wild5_Xj {
                                  __DEFAULT -> Lift 1# wild5_Xj;
                                  IdS -> IdS;
                                  Lift dt_dde2v rho1_add9T -> Lift (+# dt_dde2v 1#) rho1_add9T
                                } } in
                          El
                            ($w$capplySubst5
                               @~ <Co:1> ww1_smen6 (rho_alXdG `cast` <Co:10>) s_alXdH)
                            (applySubst ww1_smen6 (rho_alXdG `cast` <Co:5>) t1_alXdI)
                          }))
                      `cast` <Co:4>;
                    NoAbs x_alXau a1_alXav ->
                      (NoAbs
                         x_alXau
                         (case a1_alXav of { El s_alXdH t1_alXdI ->
                          El
                            ($w$capplySubst5
                               @~ <Co:1> ww1_smen6 (wild1_Xle `cast` <Co:9>) s_alXdH)
                            (applySubst ww1_smen6 (wild1_Xle `cast` <Co:4>) t1_alXdI)
                          }))
                      `cast` <Co:4>
                  }))
              `cast` <Co:2>;
            Sort s_alXo1 ->
              (Sort
                 (($w$capplySubst5
                     @~ <Co:1>
                     ww1_smen6
                     (wild1_Xle `cast` <Co:9>)
                     (s_alXo1 `cast` <Co:3>))
                  `cast` <Co:2>))
              `cast` <Co:2>;
            Level l_alXnY ->
              case l_alXnY `cast` <Co:3> of { Max n_alXdi as_alXdj ->
              ($wlevelTm
                 n_alXdi
                 ((map
                     (\ ds_dm1IK ->
                        case ds_dm1IK of { Plus n1_alXde l1_alXdf ->
                        Plus
                          n1_alXde (applySubst ww1_smen6 (wild1_Xle `cast` <Co:4>) l1_alXdf)
                        })
                     as_alXdj)
                  `cast` <Co:3>))
              `cast` <Co:2>
              };
            MetaV dt_dm2HB dt1_dm2HC es_alXnW ->
              (MetaV
                 dt_dm2HB
                 dt1_dm2HC
                 ((map
                     ($fSubstElim'_$capplySubst ww1_smen6 (wild1_Xle `cast` <Co:9>))
                     (es_alXnW `cast` <Co:4>))
                  `cast` <Co:3>))
              `cast` <Co:2>;
            DontCare mv_alXo2 ->
              case (applySubst
                      ww1_smen6 (wild1_Xle `cast` <Co:4>) (mv_alXo2 `cast` <Co:2>))
                   `cast` <Co:1>
              of wild3_XJK {
                __DEFAULT -> (DontCare wild3_XJK) `cast` <Co:2>;
                DontCare ds_d8PPv -> wild3_XJK `cast` <Co:2>
              };
            Dummy s_alXo3 es_alXo4 ->
              (Dummy
                 s_alXo3
                 ((map
                     ($fSubstElim'_$capplySubst ww1_smen6 (wild1_Xle `cast` <Co:9>))
                     (es_alXo4 `cast` <Co:4>))
                  `cast` <Co:3>))
              `cast` <Co:2>
          };
        IdS -> w2_smemZ
      }

-- RHS size: {terms: 20, types: 51, coercions: 2, joins: 0/0}
applySubstTerm
  = \ @ t_smemU w_smemV w1_smemW w2_smemX w3_smemY w4_smemZ ->
      case w_smemV of { MkCoercible ww1_smen2 ->
      case w1_smemW of { (ww3_smen6, ww4_smen7) ->
      case ww4_smen7 of { Eq# ww6_smena ->
      $wapplySubstTerm
        @~ <Co:1> ww3_smen6 @~ <Co:1> w2_smemX w3_smemY w4_smemZ
      }
      }
      }

-- RHS size: {terms: 12, types: 10, coercions: 0, joins: 0/0}
funSort
  = \ a_alXqL b_alXqM ->
      case funSort' a_alXqL b_alXqM of {
        Left x_acvT -> FunSort a_alXqL b_alXqM;
        Right y_acvV -> y_acvV
      }


------ Local rules for imported ids --------
"SPEC $cdeBruijnVar @ DBPatVar"
    forall $dDeBruijn_sm4RY.
      $fDeBruijnPattern'_$cdeBruijnVar $dDeBruijn_sm4RY
      = $fDeBruijnPattern'2
"SPEC $cdebruijnNamedVar @ DBPatVar"
    forall $dDeBruijn_sm4S0.
      $fDeBruijnPattern'_$cdebruijnNamedVar $dDeBruijn_sm4S0
      = $fDeBruijnPattern'1
"SPEC $fDeBruijnPattern' @ DBPatVar"
    forall $dDeBruijn_sm4RW.
      $fDeBruijnPattern' $dDeBruijn_sm4RW
      = $fDeBruijnPattern'_$s$fDeBruijnPattern'
"SPEC $capply @ (Dom' Term Type)"
    forall $d(%,%)_sm4SI.
      $fApplyTele_$capply $d(%,%)_sm4SI
      = $fApplyExtLamInfo_$s$capply
"SPEC $c== @ (Dom' Term Type)"
    forall $dSubst1_sm4Rp $dEq2_sm4Rq.
      $fEqTelV_$c==1 $dSubst1_sm4Rp $dEq2_sm4Rq
      = $fEqSection_$s$c==
"SPEC $c/= @ (Dom' Term Type)"
    forall $dSubst1_sm4Rk $dEq2_sm4Rl.
      $fEqTele_$c/= $dSubst1_sm4Rk $dEq2_sm4Rl
      = $fEqSection_$s$c/=
"SPEC $ccompare @ (Type'' Term Term)"
    forall $dOrd_sm4KZ.
      $fOrdDom'_$ccompare $dOrd_sm4KZ
      = $fOrdDom'_$s$ccompare
"SPEC $ccompare @ Term"
    forall $dOrd_sm4KV.
      $fOrdDom'_$ccompare $dOrd_sm4KV
      = $fOrdDom'_$s$ccompare1
"SPEC $capplySubst @ Term"
    forall $dCoercible_sm4Jc $dSubst1_sm4Jd.
      $fSubstSort'_$capplySubst $dCoercible_sm4Jc $dSubst1_sm4Jd
      = $fApplyRewriteRule_$s$capplySubst
"SPEC $capplySubst @ Term @ Term"
    forall $dCoercible_sm4KO $dSubst1_sm4KP $dSubst2_sm4KQ $d~1_sm4KR.
      $fSubstType''_$capplySubst $dCoercible_sm4KO
                                 $dSubst1_sm4KP
                                 $dSubst2_sm4KQ
                                 $d~1_sm4KR
      = $fSubstType''_$s$capplySubst
"SPEC $fSubstType'' @ Term @ Term"
    forall $dCoercible_sm4KJ $dSubst1_sm4KK $dSubst2_sm4KL $d~1_sm4KM.
      $fSubstType'' $dCoercible_sm4KJ
                    $dSubst1_sm4KK
                    $dSubst2_sm4KL
                    $d~1_sm4KM
      = $fSubstType''_$s$fSubstType''
"SPEC applyTermE"
    forall $d(%,%)_XlYtf $dApply_XlYA2 $dCoercible_alYmr.
      applyTermE $dCoercible_alYmr $dApply_XlYA2 $d(%,%)_XlYtf
      = $fApplyTerm_$sapplyTermE
"SPEC applyTermE"
    forall $d(%,%)_XlYty $dApply_XlYAl $dCoercible_alYmK.
      applyTermE $dCoercible_alYmK $dApply_XlYAl $d(%,%)_XlYty
      = $fApplyBraveTerm_$sapplyTermE
"SPEC applySubstTerm"
    forall $dApply_XlYqL $d(%,%)_XlYxy $dCoercible_alYjX.
      applySubstTerm $dCoercible_alYjX $d(%,%)_XlYxy $dApply_XlYqL
      = $fApplyExtLamInfo_$sapplySubstTerm
"SPEC applySubstTerm"
    forall $dApply_XlYqW $d(%,%)_XlYxJ $dCoercible_alYk8.
      applySubstTerm $dCoercible_alYk8 $d(%,%)_XlYxJ $dApply_XlYqW
      = $fSubstBraveTerm_$sapplySubstTerm

